Delay pass of closure conversion

Source Denotations

D     infinite set of d's
Dᶠ     finite set of d's
d ::= Dᶠ ↦ d | ν | ⟨d,...,d⟩ | error

Application Operator

D₁ ▪ D₂ = { d | Dᶠ ↦ d ∈ D₁ and Dᶠ ⊆ D₂ and Dᶠ not empty}
          ∪ { error | error ∈ D₁ ∪ D₂}
	  ∪ { error | ⟨d₁,...,dₙ⟩ ∈ D₁ }

Abstraction Operator

Λ F = {ν} ∪ { Dᶠ ↦ d | d ∈ F(Dᶠ), error ∉ Dᶠ }

Product Operator

∏ [D₁, ..., Dₙ] = { ⟨d₁,...,dₙ⟩ | ∀ i∈{1..n}, dᵢ ∈ Dᵢ, dᵢ ≠ error }
                  ∪ { error | ∃i, error ∈ Dᵢ}

Index Operator

D[i] = { dᵢ | ⟨d₀,...,dₙ⟩ ∈ D }
        ∪ { error | d ∈ ⟦ L ⟧ρ, d ≠ ⟨dₒ,...,dₙ⟩ }

Source Language:

L,M,N ::= x | L(M) | λ x y. N @ M | ⟨ M₀ , ... , Mₙ ⟩ | L [ i ]

⟦ x ⟧ρ = ρ x
⟦ L(M) ⟧ρ = ⟦ L ⟧ρ ▪ ⟦ M ⟧ρ
⟦ λ x y. N @ M ⟧ρ = (Λ λD₁. Λ λD₂. ⟦ N ⟧ρ[x ↦ D₁][y ↦ D₂]) ▪ ⟦ M ⟧ρ
⟦ ⟨ M₀ , ... , Mₙ ⟩ ⟧ρ = ∏ { ⟦ Mᵢ ⟧ρ | i ∈ 0..n}
⟦ L [ i ] ⟧ρ = ⟦ L ⟧ρ [ i ]

Target Denotations

D     infinite set of d's
Dᶠ     finite set of d's
d ::= Dᶠ ↦ d | ν | ⟨d,...,d⟩ | error | injᶜ d | injᵗ d

Application Operator

D₁ ▪ D₂ = { d | Dᶠ ↦ d ∈ D₁ and Dᶠ ⊆ D₂ and Dᶠ not empty}
          ∪ { error | error ∈ D₁ ∪ D₂}
	  ∪ { error | d₁ ∈ D₁, d₁ ≠ Dᶠ ↦ d and d₁ ≠ ν }

Closure Injection Operator

InjC D = { injᶜ d | d ∈ D } ∪ {error | error ∈ ⟦ M ⟧ρ}

Closure Projection Operator

ProjC D = { d | injᶜ d ∈ D } ∪ {error | error ∈ ⟦ M ⟧ρ}
          ∪ { error | d ∈ ⟦ M ⟧ρ, d ≠ injᶜ d′ }

Tuple Injection Operator

InjT D = { injᵗ d | d ∈ D } ∪ {error | error ∈ ⟦ M ⟧ρ}

Tuple Projection Operator

ProjT D = { d | injᵗ d ∈ D } ∪ {error | error ∈ ⟦ M ⟧ρ}
          ∪ { error | d ∈ ⟦ M ⟧ρ, d ≠ injᵗ d′ }

Target Language:

L,M,N ::= x | L(M,N) | λ (x, y). N | ⟨ M₁ , ... , Mₙ ⟩ | M [ n ]
        | injC M | injT M | projC M | projT M

⟦ x ⟧ρ = ρ x
⟦ L(M,N) ⟧ρ = (⟦ L ⟧ρ ▪ ⟦ M ⟧ρ) ▪ ⟦ N ⟧ρ
⟦ λ x y. N ⟧ρ = Λ λD₁. Λ λD₂. ⟦ N ⟧ρ[x ↦ D₁][y ↦ D₂]
⟦ ⟨ M₁ , ... , Mₙ ⟩ ⟧ρ = ∏ [ ⟦ Mᵢ ⟧ρ | i ∈ 1..n ]
⟦ L [ i ] ⟧ρ = { dᵢ | ⟨d₁,...,dₙ⟩ ∈ ⟦ L ⟧ρ } ∪ {error | error ∈ ⟦ L ⟧ρ}
⟦ injC M ⟧ρ = InjC ⟦ M ⟧ρ
⟦ injT M ⟧ρ = InjT ⟦ M ⟧ρ
⟦ projC M ⟧ρ = ProjC ⟦ M ⟧ρ
⟦ projT M ⟧ρ = ProjT ⟦ M ⟧ρ

Delay Pass

D(x)                 = x
D(L(M))              = let c = projC D(L) in c[0](c[1], M)
D(λ x y. N @ M)      = injC ⟨ λ x y. N , M ⟩
D(⟨ M₁ , ... , Mₙ ⟩) = injT ⟨ D(M₁) , ..., D(Mₙ) ⟩
D(L [ i ])           = (projT D(L)) [ i ]

Predicates

IsInjC(D) = ∃d. injᶜ d ∈ D
IsInjT(D,n) = ∃d. injᵗ d ∈ D and IsTup(ProjT D, n)
IsFun(D) = ν ∈ D
IsTup(D,n) = ∃d₁,...,dₙ. ⟨d₁,...,dₙ⟩ ∈ D

Relating Source and Target Denotations

"bulk" definition on D's

D₁ ≈ D₂ =
  (IsFun(D₁) and IsInjC(D₂) and
   ∀ D₃ D₄. ▷ (D₃ ≈ D₄) → ▷ ((D₁ ▪ D₃) ≈ (let F = (ProjC D₂) in
                                         F[0] ▪ F[1] ▪ D₄)))
  or
  (∃ n. IsTup(D,n) and IsInjT(D₂,n) and 
   ∀ i ∈ 1..n, ▷ (D[i] ≈ ProjT(D₂)[i]))


================================================================================

determ:
  If X ∈ [e]ρ1 and Y ∈ [e]ρ2,
  then (X ∩ Y) ∈ [e](ρ1 ∩ ρ2).



strengthen:
  If X ∈ [e]ρ1 and X <: Y and ρ2 <: ρ1,
  then Y ∈ [e]ρ2.



(A → B) ∩ (C → D) ∈ [λ e]ρ
  A → B ∈ [λ e]ρ
    B ∈ [e]A#ρ
  C → D ∈ [λ e]ρ
    D ∈ [e]C#ρ

  A → B ~ C → D

  Case A ~ C:

    (B ∩ D) ∈ [e](A ∩ C)#ρ  by determ 
    (A ∩ C) → (B ∩ D) ∈ [λ e]ρ

  Case A /~ C:
    then they couldn't be supertypes of the same type



================================================================================

Γ |- A    Δ, A, Σ |- C 
----------------------
Δ, Γ, Σ |- C


case le_arrow le_arrow
A → B
C → D

Have:
A ⊦ c1 : dom(Γ)      C ⊦ c3 : dom(Δ), A, dom(Σ)
cod(Γ) ⊦ c2 : B      cod(Δ), B, cod(Σ) ⊦ c4 : D
---------------      --------------------------
Γ ⊦ A → B            Δ, A → B, Σ ⊦ C → D


Proof:

C ⊦ c3' : A   A ⊦ c1 : dom(Γ)
----------------------------(IH)
C ⊦ c4 : dom(Γ)
C ⊦ c3' : dom(Δ),dom(Σ)        cod(Γ) ⊦ c2 : B   cod(Δ),B,cod(Σ) ⊦ c4 : D
-------------------------      -----------------------------------------(IH)
C ⊦ dom(Δ), dom(Γ), dom(Σ)     cod(Δ), cod(Γ), cod(Σ) ⊦ D
---------------------------------------------------------(→)
Δ, Γ, Σ ⊦ C → D





================================================================================
Could P(N) (or B(A)) be used for semantic subtyping?
And avoid the need for the E and give inversion principles?


V = n | Pf(V) x V

A,B,C,D ::= n | A → B | A ∩ B

[n] = {n}
[A → B] = { (vs,v) | vs ⊆ [A] implies v ∈ [B] }
[A ∩ B] = [A] ∩ [B]

A <: B def= [A] ⊆ [B]


Suppose A → B <: C → D
  { (vs,v) | vs ⊆ [A] implies v ∈ [B] }
  ⊆
  { (vs,v) | vs ⊆ [C] implies v ∈ [D] }

nts C <: A
<=  [C] ⊆ [A]
  Suppose x ∈ [C].
  nts x ∈ [A].

