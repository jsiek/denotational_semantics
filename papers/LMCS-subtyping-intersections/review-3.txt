“Transitivity of Subtyping for Intersection Types”

The paper considers intersection type systems in the style of Coppo, Dezani-Ciancaglini, and Salle, and more closely Barendregt, Dekkers, and Statman (BCD). These systems typically include an explicit transitivity rule in the Subtyping relation, which, among other things, poses issues for inversion lemmas. The paper follows up on a recent result by Laurent who demonstrated that equivalent systems can be formulated without explicit transitivity. In comparison to Laurent, the paper presents a much simplified proof strategy, reducing six lemmas to one, and eliminating the need for a separate sequent-style system. 

With the adoption of intersection types into mainstream programming languages like TypeScript and Scala, the paper is timely, and it addresses an important question with a convincing solution, that may be useful for future large-scale language formalization efforts.

The main technical innovation appears to be the design of the new subtyping judgment "<:" in Figure 4 (later shown to be equivalent to "≤" in BCD), and the induction metrics that enable the proof of Theorem 7 (transitivity).

The paper is overall well written and clear, with a good level of detail provided for the proofs. The formal development is mechanized in Agda, which provides additional confidence in the results.

The only question I had is specifically related to the recent adoption of intersection types in Scala and in formal work on the underlying DOT calculus. The need for transitivity elimination is also described in the OOPSLA'16 paper "Type Soundness for Dependent Object Types", and the apparent solution adopted there was to "push back" top-level uses of the transitivity rule further up into derivations, based on a lemma "A <: B /\ B <! C  ==>  A <! C" where "A <! C" is a subtyping derivation that does not end in the transitivity rule but may use it internally. While it is not possible to get rid of transitivity entirely in DOT, it seems possible to apply the "pushback" process to exhaustion in the BCD setting considered in this paper, and in fact I'm wondering if this is roughly equivalent to the induction metric "<<". Perhaps the author can give this some thought, and maybe a discussion of this piece of related work would be a useful addition (if only to strengthen the motivation).

As far as I remember, DOT does not include the rule "(→∩)", however, adapted in similar way as "(lbL)" and "(lbR)" to support internal transitivity, it does not seem to pose any obvious major difficulties:


   A' ≤ A   (B ∩ C) ≤ D
-------------------------
(A → B) ∩ (A → C) ≤ A' → D


Minor notes:

The paper has a few formatting issues with text running into the margin (p1, p8, some URLs in the bibliography).

Typos: 

"and then then prove transitivity" (p2) double "then"

"Before moving on, we make note of some basic facts" perhaps "take note" or "make a note of"?

Bibliography:

"M. Dezani-Ciancaglini, F. Honsell, and Y. Motohama. Compositional characterisations of -terms" missing a lambda symbol

"E. Engeler. Algebras and combinators. algebra universalis" capitalize journal title (?)

"H. Ishihara and T. Kurata. Completeness of intersection and union type assignment systems for call-by-value -models." missing lambda
