Reviewer 1
==========

>> The introduction is rather short and only gives one application for
>> which the subformula would be interesting. Moreover it is not
>> explained why the proposal from Laurent would not be appropriate for
>> this application.

The revision includes a new section "Motivations from Verified
Compilation" that goes into much more detail regarding the need for
what the revision now calls the "subformula conjunction property", and
explains how we initially used Laurent's proposal but then later
switched to the new system.

>> While the inference system defining <: is claimed to satisfy the
>> subformula property, it is not true strictly speaking. This is because
>> dom(A) and cod(A) are not subformulas of A. E.g. the derivation of
>> (A->B)/\(A->C)<:A->(B/\C) uses A/\A. Most of the consequences of the
>> subformula property hold anyway because dom(A) and cod(A) are not so
>> far from being subformulas of A (they are strictly smaller than A,
>> contain no new atom or new connective, etc).

The revision fixes this problem by being more precise regarding
terminology, defining the "subformula conjunction property".  Also the
revision explains why this property is enough for our purposes.

>> The abstract mentions that the transitivity proof requires a subtle
>> choice of the induction measure. Nevertheless it seems possible to
>> simplify it by using a lexicographic ordering on (depth B, size B,
>> size C) or on (depth B, size B + size C).

Excellent, we've switched to the lexicographic ordering on
(depth B, size B, size C).

>> page 1, line -5: type systems -> type system
>> page 2, line -15: then then -> then
>> page 3, line 4: provide a link to the Agda development
>> page 3, line 11: functions -> partial functions
>> page 3, lines 18,19: point to Proposition 3(5)
>> page 3, line -7: remarks about eta-reduction are not very clear
>>                  BCD typing is not preserved under eta-reduction
>> page 4, figure 3, A\subseteq B: missing \forall
>> page 5, line -3: <: -> \subseteq (3 times)
>> page 7, lines -2,-1: remove depth(B2)<=depth(B) and

The revision addresses all of the above except for the last item on
page 3 regarding eta-reduction. BCD typing is indeed preserved under
eta reduction (see Proposition 12.1.15 and Corollary 14.2.9 of Lambda
Calculus with Types by Barendregt, Dekkers, and Statman). Perhaps the
reviewer was thinking of eta-expansion, which is not preserved by BCD
typing.


Reviewer 2
==========

>> 1. lack of details for the motivating connection to Siek's broader
>>    project(s), alluded to in the Introduction but too briefly to
>>    assess the value of this work on that basis.

The revision includes a new section "Motivations from Verified
Compilation" to address this problem.

>> 2. failure, as also in the Laurent paper that seems to have been the
>>    starting point for this work, to consider the deep line of work on
>>    logical treatments of subtyping.
>>
>> ...  In contrast, Siek's system handles function types through some
>> very particular meta-level operations on type expressions and side
>> conditions to the function subtyping rule (->').  I worry that
>> these conditions will be brittle, and not work well in a setting
>> where compositionality at the type level is required.  Imagine, for
>> example, allowing type-level functions as in System F-omega.  Then
>> particular checks on the forms of type expressions will fail in the
>> presence of applications of type variables (i.e., abstracted type
>> expressions), since we will not have a concrete type expression to
>> apply these various checks and meta-level operations to.  So an
>> approach that is based just on syntactic conditions on type
>> expressions seems fragile and not likely to be extensible to richer
>> type systems.

The logical treatments of subtyping are indeed useful for extending to
richer type systems for programming languages. The author has made use
of them in the context of research on gradual typing.  However, the
motivation for the present work is rather different: constructing
filter models (denotational semantics) for programming languages. For
that purpose, there is no need for richer type systems such as System
F-omega; intersection types already provide what is needed to express
the runtime behavior of functional programs. The revision includes
changes to the introduction to differentiate the varied uses of
intersection type systems and to make it clear that the present
article's motivation comes from the realm of filter models, not type
systems for programming languages.

>> Other comments:

>> A. page 1: you say that BCD extends STLC with addition of intersection
>>    types, a top type, and "an infinite collection of type constants".
>>    The last of these surprised me as STLC usually includes base types
>>    (at least one, or else there are no types at all).  If you can
>>    clarify (very briefly -- do not want to distract from the main flow
>>    of your discourse) that would be great.

I've rephrased to remove mention of the STLC, as that was not necessary.

>> B. page 2, you write that the "BCD subtyping judgment does not enjoy
>>    the subformula property".  But proof-theoretically, the subformula
>>    property is a property of a proof system: a proof system has the
>>    subformula property if for every closed proof of that proof system,
>>    every formula occurring in the proof is a subformula of the theorem
>>    proved by the proof.

The mistaken uses of "judgment" have been replaced with "subtyping system"
(i.e. proof system).

>> C. page 3: you say that A \in B "indicates whether A is syntactically
>>    a part of B".  This is not correct without some violence to the
>>    usual notion of syntactic part.  For example, alpha is not \in
>>    (alpha -> alpha) according to the rules of Figure 3.  This is again
>>    part of what I find displeasing about this approach: we have some
>>    very particular and not too intuitive (at least, not correctly
>>    intuitively described, in this case!) notions that yes, do lead to
>>    a correct system (this is proven in Agda).  But it would be much
>>    more satisfying, in the spirit of Tiuryn's work, for example, and
>>    the other works he cites and builds on, to see a compositional
>>    treatment of function types via substructural typing.  This would
>>    avoid these fiddly syntactic definitions.

I've changed the notation for \in and \subseteq to make it clear that
these notions are different from the usual ones and added some
explanation to provide an intuition for what they accomplish.


Reviewer 3
==========

>> The only question I had is specifically related to the recent adoption
>> of intersection types in Scala and in formal work on the underlying
>> DOT calculus. The need for transitivity elimination is also described
>> in the OOPSLA'16 paper "Type Soundness for Dependent Object Types",
>> and the apparent solution adopted there was to "push back" top-level
>> uses of the transitivity rule further up into derivations, based on a
>> lemma "A <: B /\ B <! C ==> A <! C" where "A <! C" is a subtyping
>> derivation that does not end in the transitivity rule but may use it
>> internally. While it is not possible to get rid of transitivity
>> entirely in DOT, it seems possible to apply the "pushback" process to
>> exhaustion in the BCD setting considered in this paper, and in fact
>> I'm wondering if this is roughly equivalent to the induction metric
>> "<<". Perhaps the author can give this some thought, and maybe a
>> discussion of this piece of related work would be a useful addition
>> (if only to strengthen the motivation).

That is an interesting connection. I think that this style of proof
would work using the new function rule (→′) but not with the old rules
(→) and (→∩). I've added a discussion of this connection to the
revision.

>> As far as I remember, DOT does not include the rule "(→∩)", however,
>> adapted in similar way as "(lbL)" and "(lbR)" to support internal
>> transitivity, it does not seem to pose any obvious major difficulties:
>>    A' ≤ A   (B ∩ C) ≤ D
>> -------------------------
>> (A → B) ∩ (A → C) ≤ A' → D

I suspect that the above rule handles the case when (→∩) derives the
A <: B premise of (trans), but not when (→∩) derives the B <: C premise
of (trans).  In the 2012 article "Intersection types with subtyping by
means of cut elimination", Laurent comes up with another rule that
fixes that problem:

D ≤ C → A    D ≤ C → B
----------------------
D ≤ C → (A ∩ B)

but then he was forced to add another rule

C ≤ A → D   D ≤ B
-----------------
C ≤ A → B

that does not satisfy the subformula property.


>> Minor notes:

>> The paper has a few formatting issues with text running into the
>> margin (p1, p8, some URLs in the bibliography).

>> Typos: 

>> "and then then prove transitivity" (p2) double "then"

>> "Before moving on, we make note of some basic facts" perhaps "take
>> note" or "make a note of"?

>> Bibliography:

>> "M. Dezani-Ciancaglini, F. Honsell, and Y. Motohama. Compositional
>> characterisations of -terms" missing a lambda symbol

>> "E. Engeler. Algebras and combinators. algebra universalis" capitalize
>> journal title (?)

>> "H. Ishihara and T. Kurata. Completeness of intersection and union
>> type assignment systems for call-by-value -models." missing lambda

All of the above have been fixed in the revision.
