This article by Jeremy Siek presents a new formulation of the
subtyping system of Barendregt, Coppo, and Dezani-Ciancaglini (BCD),
based on a recent (2018) workshop paper by Laurent.  Siek's
development, unlike Laurent's, has been conducted also in Agda (in
addition to a careful presentation in the paper), providing a very
strong confirmation of correctness of the results.  I have looked over
Siek's Agda code and find it quite beautifully written and convincing
(that is, I agree that the theorem it proves is indeed the
formalization of the intended one).  So this is a very good point in
favor of the paper.

Despite these strong points, I am sorry to have to recommend rejection
of the paper in its current form.  There are two main reasons for
this:

1. lack of details for the motivating connection to Siek's broader
   project(s), alluded to in the Introduction but too briefly to
   assess the value of this work on that basis.

2. failure, as also in the Laurent paper that seems to have been the
   starting point for this work, to consider the deep line of work on
   logical treatments of subtyping.  I will mention papers in this
   line below.  The result is that Siek's formulation, while
   technically correct, is set up in a pretty delicate (and, in my
   view, not aesthetically or foundationally pleasing) way that I fear
   is unlikely to be robust to changes in the type system.

Main criticism 1:

The stated goal of the paper is to present a new proof system for
subtyping as studied by Barendregt, Coppo, and Dezani-Ciancaglini
(BCD), which has the subformula property intrinsically (as I will term
it; see (B) below).  Laurent in 2018 already presented a proof system
with this property.  Here, the author's goal is to devise a system for
which transitivity can be proved more directly than in Laurent's
analysis.

This is a pretty niche goal, not to mince words.  We already have a
proof system (Laurent's) that has the subformula property, but here
the goal is to have one that makes it easier to get transitivity.
Having looked over Laurent's paper, I can say that the development
there does look somewhat complicated, and the proofs are given just at
the level of a sketch.  In contrast, the present work is based on a
complete formalization of the main theorems -- equivalence with BCD,
transitivity -- in Agda.  So this is definitely a step forward.  But I
feel more motivation is needed for why the *direction* of this step is
valuable.  One motivation could possibly be: I want to formalize a
complex type system involving BCD subtyping, and Laurent's version
just looked infeasible to formalize, so I developed my own version.
This would be a pretty good reason, in my opinion, but I would like to
see the motivation explained further (than just my guess here).  The
only statement about motivation is on page 2 where the author states
that "The subformula property is a useful one" -- no doubt! -- but
doesn't detail the particular use case of interest enough for me to
assess the value of developing a *second* BCD subtyping system with
the subformula property.

Main criticism 2:

The second criticism is about positioning the work with respect to an
important line of previous research concerned with the logical
underpinnings of subtyping. A very well written and informative
example is Tiuryn's "A Sequent Calculus for Subtyping Polymorphic
Types", which devises several subtyping systems as logics, and relates
to previous efforts in that direction. These works have a number of
interesting advantages over the proposals of Laurent and Siek.

First, they deal in a more compositional way with function types,
using ideas from substructural logic. The need for substructuralism is
due to the fact that usually one does not want to consider (a -> b ->
c) to be a subtype of (b -> a -> c), though as intuitionistic
formulas, these are equivalent.  In contrast, Siek's system handles
function types through some very particular meta-level operations on
type expressions and side conditions to the function subtyping rule
(->').  I worry that these conditions will be brittle, and not work
well in a setting where compositionality at the type level is
required.  Imagine, for example, allowing type-level functions as in
System F-omega.  Then particular checks on the forms of type
expressions will fail in the presence of applications of type
variables (i.e., abstracted type expressions), since we will not have
a concrete type expression to apply these various checks and meta-level
operations to.  So an approach that is based just on syntactic conditions
on type expressions seems fragile and not likely to be extensible to
richer type systems.

A point worth noting in passing is that Tiuryn's paper actually
presents a Curry-Howard view of subtyping and gives rules that derive
coercions. In fact, the line of work goes back to a paper of
Mitchell's which relates subtyping to typing by coercions which
eta-reduce to the identity. (One can find similar ideas in Miquel's
"Implicit Calculus of Constructions".) 

@article{DBLP:journals/iandc/Tiuryn01, author = {Jerzy Tiuryn}, title = {A Sequent Calculus for Subtyping Polymorphic Types}, journal = {Inf. Comput.}, volume = {164}, number = {2}, pages = {345--369}, year = {2001}}

Other comments:

A. page 1: you say that BCD extends STLC with addition of intersection
   types, a top type, and "an infinite collection of type constants".
   The last of these surprised me as STLC usually includes base types
   (at least one, or else there are no types at all).  If you can
   clarify (very briefly -- do not want to distract from the main flow
   of your discourse) that would be great.

B. page 2, you write that the "BCD subtyping judgment does not enjoy
   the subformula property".  But proof-theoretically, the subformula
   property is a property of a proof system: a proof system has the
   subformula property if for every closed proof of that proof system,
   every formula occurring in the proof is a subformula of the theorem
   proved by the proof.  So it is a (meta-level) type error to refer
   to a judgment as having the subformula.  To be clear: it is not
   even correct to say that the set of valid subtyping judgments has
   the property, for different proof systems (some with, some without
   the property) could give rise to the same valid judgments.  We are
   speaking about whether some particular set of proof rules has the
   property.  Even there we could imagine a distinction (which I did
   not find in a brief literature search) between the *rules* having
   the property (we could say intrinsic subformula property?) and the
   proofs derivable from the rules having the property (extrinsic, the
   definition I use just above). For say that the proof system
   includes a spurious rule with some premise that is not a subformula
   of the conclusion, but where that rule can never actually be
   successfully used (due to other constraints in it) in a closed
   derivation.  Then the proof system would have the subformula
   property extrinsically but not intrinsically.

C. page 3: you say that A \in B "indicates whether A is syntactically
   a part of B".  This is not correct without some violence to the
   usual notion of syntactic part.  For example, alpha is not \in
   (alpha -> alpha) according to the rules of Figure 3.  This is again
   part of what I find displeasing about this approach: we have some
   very particular and not too intuitive (at least, not correctly
   intuitively described, in this case!) notions that yes, do lead to
   a correct system (this is proven in Agda).  But it would be much
   more satisfying, in the spirit of Tiuryn's work, for example, and
   the other works he cites and builds on, to see a compositional
   treatment of function types via substructural typing.  This would
   avoid these fiddly syntactic definitions.
