{-# OPTIONS --allow-unsolved-metas #-}

module Model.Filter.Clos3 where
{-

 In this intermediate semantics all functions take two parameters,
   so application have two operands and
 This semantics is after the 'delay' pass,
   and before the 'globalize' pass.

-}

open import Utilities using (_iff_)
open import Primitives
open import ScopedTuple hiding (ùí´)
open import NewSigUtil
open import NewDOpSig
open import Utilities using (extensionality)
open import SetsAsPredicates
open import NewDenotProperties
open import Model.Filter.DomainAnnFun
open import Model.Filter.OperationAnnFun
open import Syntax using (Sig; ext; ‚àÅ; ŒΩ; ‚ñ†; Var; _‚Ä¢_; ‚Üë; id; _‚®ü_) public

open import Data.Empty renaming (‚ä• to Bot)
open import Data.Nat using (‚Ñï; zero; suc; _+_; _<_)
open import Data.Nat.Properties using (+-suc)
open import Data.List using (List; []; _‚à∑_; replicate)
open import Data.Product
   using (_√ó_; Œ£; Œ£-syntax; ‚àÉ; ‚àÉ-syntax; proj‚ÇÅ; proj‚ÇÇ) renaming (_,_ to ‚ü®_,_‚ü©)
open import Data.Unit using (‚ä§; tt)
open import Data.Unit.Polymorphic using () renaming (tt to ptt; ‚ä§ to pTrue)
open import Level renaming (zero to lzero; suc to lsuc)
import Relation.Binary.PropositionalEquality as Eq
open Eq using (_‚â°_; _‚â¢_; refl; sym; cong; cong‚ÇÇ; cong-app)
open Eq.‚â°-Reasoning

{- Syntax ---------------------------------------------------------------------}

data Op : Set where
  clos-op : ‚Ñï ‚Üí Op
  app : Op
  lit : (B : Base) ‚Üí (k : base-rep B) ‚Üí Op
  tuple : ‚Ñï ‚Üí Op
  get : ‚Ñï ‚Üí Op
  inl-op : Op
  inr-op : Op
  case-op : Op

sig : Op ‚Üí List Sig
sig (clos-op n) = ‚àÅ (ŒΩ (ŒΩ ‚ñ†)) ‚à∑ (replicate n ‚ñ†)
sig app = ‚ñ† ‚à∑ ‚ñ† ‚à∑ []
sig (lit B k) = []
sig (tuple n) = replicate n ‚ñ†
sig (get i) = ‚ñ† ‚à∑ []
sig inl-op = ‚ñ† ‚à∑ []
sig inr-op = ‚ñ† ‚à∑ []
sig case-op = ‚ñ† ‚à∑ ŒΩ ‚ñ† ‚à∑ ŒΩ ‚ñ† ‚à∑ []

module ASTMod = Syntax.OpSig Op sig
open ASTMod using (`_; _‚¶Ö_‚¶Ü; Subst; Ctx; plug; rename; 
                   ‚ü™_‚ü´; _[_]; subst-zero; clear; bind; ast; cons; nil;
                   Arg; Args;
                   rename-id; exts-cons-shift; WF; WF-Ctx; ctx-depth;
                   WF-op; WF-cons; WF-nil; WF-ast; WF-bind; WF-var;
                   COp; CAst; CBind; ccons; tcons; append‚Çä)
            renaming (ABT to AST) public

ùïÜ-Clos3 : DOpSig (ùí´ Value) sig
ùïÜ-Clos3 (clos-op n) ‚ü® F , Ds ‚ü© = 
  ùíú‚ãÜ ‚ü® Œõ ‚ü® (Œª X ‚Üí Œõ ‚ü® F X , ptt ‚ü©) , ptt ‚ü© 
     , ‚ü® ùíØ n Ds 
     , ptt ‚ü© ‚ü©
ùïÜ-Clos3 app = ‚ãÜ
ùïÜ-Clos3 (lit B k) = ‚Ñ¨ B k
ùïÜ-Clos3 (tuple n) = ùíØ n
ùïÜ-Clos3 (get i) = proj i
ùïÜ-Clos3 inl-op = ‚Ñí
ùïÜ-Clos3 inr-op = ‚Ñõ
ùïÜ-Clos3 case-op = ùíû

ùïÜ-Clos3-mono : ùïÜ-monotone sig ùïÜ-Clos3
ùïÜ-Clos3-mono (clos-op x) ‚ü® F , Ds ‚ü© ‚ü® F' , Ds' ‚ü© ‚ü® F~ , Ds~ ‚ü© = 
    ùíú‚ãÜ-mono ‚ü® Œõ ‚ü® (Œª X ‚Üí Œõ ‚ü® F X , ptt ‚ü©) , ptt ‚ü© , ‚ü® ùíØ x Ds , ptt ‚ü© ‚ü© 
            ‚ü® Œõ ‚ü® (Œª X ‚Üí Œõ ‚ü® F' X , ptt ‚ü©) , ptt ‚ü© , ‚ü® ùíØ x Ds' , ptt ‚ü© ‚ü© 
            ‚ü® Œõ-mono ‚ü® (Œª X ‚Üí Œõ ‚ü® F X , ptt ‚ü©) , ptt ‚ü© 
                     ‚ü® (Œª X ‚Üí Œõ ‚ü® F' X , ptt ‚ü©) , ptt ‚ü© 
                     ‚ü® (Œª D D' D‚äÜ ‚Üí Œõ-mono ‚ü® F D , ptt ‚ü© 
                                           ‚ü® F' D' , ptt ‚ü© 
                                           ‚ü® F~ D D' D‚äÜ , ptt ‚ü©) , ptt ‚ü© 
            , ‚ü® ùíØ-mono x Ds Ds' Ds~ , ptt ‚ü© ‚ü©
     {- Œõ-mono ‚ü® F , ‚ü® ùíØ x Ds , ptt ‚ü© ‚ü© ‚ü® F' , ‚ü® ùíØ x Ds' , ptt ‚ü© ‚ü©
              ‚ü® F~ , ‚ü® ùíØ-mono x Ds Ds' Ds~ , ptt ‚ü© ‚ü© -}

  {- Œõn-mono (suc zero) ‚ü® F , ‚ü® ùíØ x Ds , ptt ‚ü© ‚ü© ‚ü® F' , ‚ü® ùíØ x Ds' , ptt ‚ü© ‚ü© 
             ‚ü® F~ , ‚ü® ùíØ-mono x Ds Ds' Ds~ , ptt ‚ü© ‚ü©
  -}
  {- ùíú-mono x ‚ü® Œõ ‚ü® F (ùíØ x Ds) , ptt ‚ü© , Ds ‚ü© ‚ü® Œõ ‚ü® F' (ùíØ x Ds') , ptt ‚ü© , Ds' ‚ü© 
    ‚ü® Œõ-mono ‚ü® F (ùíØ x Ds) , ptt ‚ü© ‚ü® F' (ùíØ x Ds') , ptt ‚ü© 
             ‚ü® F~ (ùíØ x Ds) (ùíØ x Ds') (lower (ùíØ-mono x Ds Ds' Ds~)) , ptt ‚ü© 
    , Ds~ ‚ü© -}
  {- DComp-rest-pres _‚äÜ_ (replicate x ‚ñ†) ‚ñ† ‚ñ† (ùíØ x) (ùíØ x) 
                  (Œª T ‚Üí ùíú x (Œõ (F1 T))) (Œª T ‚Üí ùíú x (Œõ (F2 T))) 
                  (ùíØ-mono x) 
                  (Œª T T' T‚äÜ ‚Üí ùíú-mono x (Œõ (F1 T)) (Œõ (F2 T')) 
                               (Œõ-mono (F1 T) (F2 T') (F~ T T' (lower T‚äÜ)))) -}
ùïÜ-Clos3-mono app = ‚ãÜ-mono
ùïÜ-Clos3-mono (lit B k) _ _ _ = lift (Œª d z ‚Üí z)
ùïÜ-Clos3-mono (tuple x) = ùíØ-mono x
ùïÜ-Clos3-mono (get x) = proj-mono x
ùïÜ-Clos3-mono inl-op = ‚Ñí-mono
ùïÜ-Clos3-mono inr-op = ‚Ñõ-mono
ùïÜ-Clos3-mono case-op = ùíû-mono

ùïÜ-Clos3-consis : ùïÜ-consistent _~_ sig ùïÜ-Clos3
ùïÜ-Clos3-consis = {!   !}

{-  (clos-op x) ‚ü® F , Ds ‚ü© ‚ü® F' , Ds' ‚ü© ‚ü® F~ , Ds~ ‚ü© = {!   !}
  {- ùíú-consis x ‚ü® Œõ ‚ü® F (ùíØ x Ds) , ptt ‚ü© , Ds ‚ü© ‚ü® Œõ ‚ü® F' (ùíØ x Ds') , ptt ‚ü© , Ds' ‚ü© 
    ‚ü® Œõ-consis ‚ü® F (ùíØ x Ds) , ptt ‚ü© ‚ü® F' (ùíØ x Ds') , ptt ‚ü© 
             ‚ü® F~ (ùíØ x Ds) (ùíØ x Ds') (lower (ùíØ-consis x Ds Ds' Ds~)) , ptt ‚ü© 
    , Ds~ ‚ü© -}
  {- DComp-rest-pres (Every _~_) (replicate x ‚ñ†) ‚ñ† ‚ñ† (ùíØ x) (ùíØ x) 
                  (Œª T ‚Üí ùíú x (Œõ (F1 T))) ((Œª T ‚Üí ùíú x (Œõ (F2 T)))) 
  (ùíØ-consis x) (Œª T T' T~ ‚Üí ùíú-consis x (Œõ (F1 T)) (Œõ (F2 T')) 
                            (Œõ-consis (F1 T) (F2 T') (F~ T T' (lower T~)))) -}
ùïÜ-Clos3-consis app = ‚ãÜ-consis
ùïÜ-Clos3-consis (lit B k) = ‚Ñ¨-consis B k
ùïÜ-Clos3-consis (tuple x) = ùíØ-consis x
ùïÜ-Clos3-consis (get x) = proj-consis x
ùïÜ-Clos3-consis inl-op = ‚Ñí-consis
ùïÜ-Clos3-consis inr-op = ‚Ñõ-consis
ùïÜ-Clos3-consis case-op = ùíû-consis
-}


open import Fold2 Op sig
open import NewSemantics Op sig public

instance
  Clos3-Semantics : Semantics
  Clos3-Semantics = record { interp-op = ùïÜ-Clos3 ;
                             mono-op = ùïÜ-Clos3-mono ;
                             error = œâ }
open Semantics {{...}} public
