{-# OPTIONS --allow-unsolved-metas #-}

module Model.Filter.Clos4AnnFun where
{-

 In this intermediate semantics all functions take two parameters,
   so application have two operands and
 This semantics is after the 'delay' pass,
   and before the 'globalize' pass.

-}

open import Utilities using (_iff_)
open import Primitives
open import ScopedTuple hiding (ùí´)
open import NewSigUtil
open import NewDOpSig
open import Utilities using (extensionality)
open import SetsAsPredicates
open import NewDenotProperties
open import Model.Filter.DomainAnnFun
open import Model.Filter.OperationAnnFun
open import Syntax using (Sig; ext; ‚àÅ; ŒΩ; ‚ñ†; Var; _‚Ä¢_; ‚Üë; id; _‚®ü_) public

open import Data.Empty renaming (‚ä• to Bot)
open import Data.Nat using (‚Ñï; zero; suc; _+_; _<_)
open import Data.Nat.Properties using (+-suc)
open import Data.List using (List; []; _‚à∑_; replicate)
open import Data.Product
   using (_√ó_; Œ£; Œ£-syntax; ‚àÉ; ‚àÉ-syntax; proj‚ÇÅ; proj‚ÇÇ) renaming (_,_ to ‚ü®_,_‚ü©)
open import Data.Unit using (‚ä§; tt)
open import Data.Unit.Polymorphic using () renaming (tt to ptt; ‚ä§ to pTrue)
open import Level renaming (zero to lzero; suc to lsuc)
import Relation.Binary.PropositionalEquality as Eq
open Eq using (_‚â°_; _‚â¢_; refl; sym; cong; cong‚ÇÇ; cong-app)
open Eq.‚â°-Reasoning

{- Syntax ---------------------------------------------------------------------}

data Op : Set where
  fun-op : Op
  app : Op
  lit : (B : Base) ‚Üí (k : base-rep B) ‚Üí Op
  pair-op : Op
  fst-op : Op
  snd-op : Op
  tuple : ‚Ñï ‚Üí Op
  get : ‚Ñï ‚Üí Op
  inl-op : Op
  inr-op : Op
  case-op : Op

sig : Op ‚Üí List Sig
sig fun-op = ‚àÅ (ŒΩ (ŒΩ ‚ñ†)) ‚à∑ []
sig app = ‚ñ† ‚à∑ ‚ñ† ‚à∑ ‚ñ† ‚à∑ []
sig (lit B k) = []
sig pair-op = ‚ñ† ‚à∑ ‚ñ† ‚à∑ []
sig fst-op = ‚ñ† ‚à∑ []
sig snd-op = ‚ñ† ‚à∑ []
sig (tuple n) = replicate n ‚ñ†
sig (get i) = ‚ñ† ‚à∑ []
sig inl-op = ‚ñ† ‚à∑ []
sig inr-op = ‚ñ† ‚à∑ []
sig case-op = ‚ñ† ‚à∑ ŒΩ ‚ñ† ‚à∑ ŒΩ ‚ñ† ‚à∑ []

module ASTMod = Syntax.OpSig Op sig
open ASTMod using (`_; _‚¶Ö_‚¶Ü; Subst; Ctx; plug; rename; 
                   ‚ü™_‚ü´; _[_]; subst-zero; clear; bind; ast; cons; nil;
                   Arg; Args;
                   rename-id; exts-cons-shift; WF; WF-Ctx; ctx-depth;
                   WF-op; WF-cons; WF-nil; WF-ast; WF-bind; WF-var;
                   COp; CAst; CBind; ccons; tcons; append‚Çä)
            renaming (ABT to AST) public

ùïÜ-Clos4 : DOpSig (ùí´ Value) sig
ùïÜ-Clos4 fun-op ‚ü® F , _ ‚ü© = Œõ ‚ü® (Œª X ‚Üí Œõ ‚ü® (Œª Y ‚Üí F X Y) , ptt ‚ü©) , ptt ‚ü©
ùïÜ-Clos4 app ‚ü® L , ‚ü® M , ‚ü® N , _ ‚ü© ‚ü© ‚ü© = ‚ãÜ ‚ü® ‚ãÜ ‚ü® L , ‚ü® M , ptt ‚ü© ‚ü© , ‚ü® N , ptt ‚ü© ‚ü©
ùïÜ-Clos4 (lit B k) = ‚Ñ¨ B k
ùïÜ-Clos4 pair-op = ùíúpair
ùïÜ-Clos4 fst-op = car
ùïÜ-Clos4 snd-op = cdr
ùïÜ-Clos4 (tuple x) = ùíØ x
ùïÜ-Clos4 (get x) = proj x
ùïÜ-Clos4 inl-op = ‚Ñí
ùïÜ-Clos4 inr-op = ‚Ñõ
ùïÜ-Clos4 case-op = ùíû

ùïÜ-Clos4-mono : ùïÜ-monotone sig ùïÜ-Clos4
ùïÜ-Clos4-mono fun-op ‚ü® F1 , _ ‚ü© ‚ü® F2 , _ ‚ü©  ‚ü® F~ , _ ‚ü© = 
  Œõ-mono ‚ü® (Œª X ‚Üí Œõ ‚ü® (F1 X) , ptt ‚ü©) , ptt ‚ü© ‚ü® (Œª X ‚Üí Œõ ‚ü® (F2 X) , ptt ‚ü©) , ptt ‚ü©
         ‚ü® (Œª X1 X2 X~ ‚Üí Œõ-mono ‚ü® (F1 X1) , ptt ‚ü© ‚ü® (F2 X2) , ptt ‚ü© 
                                ‚ü® (F~ X1 X2 X~) , ptt ‚ü©) , ptt ‚ü©
ùïÜ-Clos4-mono app ‚ü® L1 , ‚ü® M1 , ‚ü® N1 , _ ‚ü© ‚ü© ‚ü© 
                 ‚ü® L2 , ‚ü® M2 , ‚ü® N2 , _ ‚ü© ‚ü© ‚ü© ‚ü® L~ , ‚ü® M~ , ‚ü® N~ , _ ‚ü© ‚ü© ‚ü© = 
  ‚ãÜ-mono ‚ü® ‚ãÜ ‚ü® L1 , ‚ü® M1 , ptt ‚ü© ‚ü© , ‚ü® N1 , ptt ‚ü© ‚ü©
         ‚ü® ‚ãÜ ‚ü® L2 , ‚ü® M2 , ptt ‚ü© ‚ü© , ‚ü® N2 , ptt ‚ü© ‚ü©
         ‚ü® ‚ãÜ-mono ‚ü® L1 , ‚ü® M1 , ptt ‚ü© ‚ü© ‚ü® L2 , ‚ü® M2 , ptt ‚ü© ‚ü©  ‚ü® L~ , ‚ü® M~ , ptt ‚ü© ‚ü© 
         , ‚ü® N~ , ptt ‚ü© ‚ü©
ùïÜ-Clos4-mono (lit B k) _ _ _ = lift (Œª d d‚àà ‚Üí d‚àà)
ùïÜ-Clos4-mono pair-op = ùíúpair-mono
ùïÜ-Clos4-mono fst-op = car-mono
ùïÜ-Clos4-mono snd-op = cdr-mono
ùïÜ-Clos4-mono (tuple x) = ùíØ-mono x
ùïÜ-Clos4-mono (get x) = proj-mono x
ùïÜ-Clos4-mono inl-op = ‚Ñí-mono
ùïÜ-Clos4-mono inr-op = ‚Ñõ-mono
ùïÜ-Clos4-mono case-op = ùíû-mono

ùïÜ-Clos4-consis : ùïÜ-consistent _~_ sig ùïÜ-Clos4
ùïÜ-Clos4-consis = {!   !}

{-
ùïÜ-Clos4-consis : ùïÜ-consistent _~_ sig ùïÜ-Clos4
ùïÜ-Clos4-consis fun-op ‚ü® F1 , _ ‚ü© ‚ü® F2 , _ ‚ü©  ‚ü® F~ , _ ‚ü© = 
  Œõ-consis ‚ü® (Œª X ‚Üí Œõ ‚ü® (F1 X) , ptt ‚ü©) , ptt ‚ü© ‚ü® (Œª X ‚Üí Œõ ‚ü® (F2 X) , ptt ‚ü©) , ptt ‚ü©
         ‚ü® (Œª X1 X2 X~ ‚Üí Œõ-consis ‚ü® (F1 X1) , ptt ‚ü© ‚ü® (F2 X2) , ptt ‚ü© 
                                ‚ü® (F~ X1 X2 X~) , ptt ‚ü©) , ptt ‚ü©
ùïÜ-Clos4-consis app ‚ü® L1 , ‚ü® M1 , ‚ü® N1 , _ ‚ü© ‚ü© ‚ü© 
                 ‚ü® L2 , ‚ü® M2 , ‚ü® N2 , _ ‚ü© ‚ü© ‚ü© ‚ü® L~ , ‚ü® M~ , ‚ü® N~ , _ ‚ü© ‚ü© ‚ü© = 
  ‚ãÜ-consis ‚ü® ‚ãÜ ‚ü® L1 , ‚ü® M1 , ptt ‚ü© ‚ü© , ‚ü® N1 , ptt ‚ü© ‚ü©
         ‚ü® ‚ãÜ ‚ü® L2 , ‚ü® M2 , ptt ‚ü© ‚ü© , ‚ü® N2 , ptt ‚ü© ‚ü©
         ‚ü® ‚ãÜ-consis ‚ü® L1 , ‚ü® M1 , ptt ‚ü© ‚ü© ‚ü® L2 , ‚ü® M2 , ptt ‚ü© ‚ü©  ‚ü® L~ , ‚ü® M~ , ptt ‚ü© ‚ü© 
         , ‚ü® N~ , ptt ‚ü© ‚ü©
 {- DComp-pres (Every _~_) (‚ñ† ‚à∑ ‚ñ† ‚à∑ []) ‚ñ† (‚ñ† ‚à∑ []) ‚ñ† _‚ãÜ_ _‚ãÜ_ _‚ãÜ_ _‚ãÜ_ ‚ãÜ-consis ‚ãÜ-consis -}
ùïÜ-Clos4-consis (lit B k) = ‚Ñ¨-consis B k
ùïÜ-Clos4-consis pair-op = pair-consis
ùïÜ-Clos4-consis fst-op = car-consis
ùïÜ-Clos4-consis snd-op = cdr-consis
ùïÜ-Clos4-consis (tuple x) = ùíØ-consis x
ùïÜ-Clos4-consis (get x) = proj-consis x
ùïÜ-Clos4-consis inl-op = ‚Ñí-consis
ùïÜ-Clos4-consis inr-op = ‚Ñõ-consis
ùïÜ-Clos4-consis case-op = ùíû-consis
-}

open import Fold2 Op sig
open import NewSemantics Op sig public

instance
  Clos4-Semantics : Semantics
  Clos4-Semantics = record { interp-op = ùïÜ-Clos4 ;
                                  mono-op = ùïÜ-Clos4-mono ;
                                  error = œâ }
open Semantics {{...}} public
