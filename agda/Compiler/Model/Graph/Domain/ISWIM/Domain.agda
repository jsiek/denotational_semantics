
module Compiler.Model.Graph.Domain.ISWIM.Domain where

open import Primitives
open import Utilities using (extensionality)
open import SetsAsPredicates
open import Var
open import Substitution using (_‚Ä¢_)
open import ScopedTuple hiding (ùí´)
open import Syntax using (Sig; ext; ŒΩ; ‚ñ†; Var; _‚Ä¢_; ‚Üë; id; _‚®ü_) public
open import NewSigUtil
open import NewDOpSig
open import NewDenotProperties

open import Data.Empty using (‚ä•-elim) renaming (‚ä• to False)
open import Data.List using (List ; _‚à∑_ ; []; _++_; length; replicate)
open import Data.List.Relation.Unary.Any using (Any; here; there; any?)
open import Data.List.Relation.Unary.All 
  using (All; []; _‚à∑_; head; tail; lookup; tabulate; all?)
  renaming (map to allmap)
open import Data.List.Relation.Binary.Pointwise using (Pointwise; []; _‚à∑_)
open import Data.List.Relation.Binary.Subset.Propositional using ()
  renaming (_‚äÜ_ to _l‚äÜ_)
open import Data.List.Properties using (++-conicalÀ°; ‚à∑-dec)
open import Data.List.Membership.Propositional renaming (_‚àà_ to _‚ãµ_)
open import Data.List.Membership.Propositional.Properties
  using (‚àà-++‚Å∫À°; ‚àà-++‚Å∫ ≥)
open import Data.Nat using (‚Ñï; zero; suc; _‚âü_; _<_; z‚â§n; s‚â§s; _+_)
open import Data.Fin using (Fin; zero; suc)
open import Data.Fin.Properties using () renaming (_‚âü_ to _fin‚âü_)
open import Data.Product using (_√ó_; Œ£; Œ£-syntax; proj‚ÇÅ; proj‚ÇÇ; ‚àÉ; ‚àÉ-syntax; uncurry)
    renaming (_,_ to ‚ü®_,_‚ü©)
open import Data.Product.Properties using (,-injective)
open import Relation.Nullary.Product using (_√ó-dec_)
open import Data.Sum using (_‚äé_; inj‚ÇÅ; inj‚ÇÇ; [_,_])
open import Data.Unit using (tt) renaming (‚ä§ to True)
open import Data.Unit.Polymorphic using (‚ä§) renaming (tt to ptt)
open import Relation.Binary.PropositionalEquality
    using (_‚â°_; _‚â¢_; refl; sym; trans; subst; cong; cong‚ÇÇ)
open import Level using (Level; Lift; lift; lower)
    renaming (zero to lzero; suc to lsuc)
open import Relation.Nullary using (¬¨_; Dec; yes; no)
open import Relation.Nullary.Decidable using (map‚Ä≤)


{- Denotational Values --------------------------------------------------------}

data Value : Set where
  const : {B : Base} ‚Üí (k : base-rep B) ‚Üí Value  {- A primitive constant of type B. -}
  _‚Ü¶_ : (V : List Value) ‚Üí (w : Value) ‚Üí Value
      {- An entry in a function's graph. -}
  ŒΩ : Value      {- The empty function -}
  œâ : Value          {- An error value, to serve as a default value in Envs and
                        to differentiate from converging -}
  ‚¶Ö_‚à£ : (u : Value) ‚Üí Value  
  ‚à£_‚¶Ü : (V : List Value) ‚Üí Value
         {- closure values are pairs with multi-value snds (to store environments), 
            which we split up into car and cdr behaviors 
            for easier distributivity properties
            Think of a pair ‚¶Ö u , V ‚¶Ü as ‚¶Ö u ‚à£ ‚äî ‚à£ V ‚¶Ü -}
  tup[_]_ : ‚àÄ {n} (i : Fin n) ‚Üí (d : Value) ‚Üí Value                 {- Tuples -}
  left : (d : Value) ‚Üí Value                      {- Sums -}
  right : (d : Value) ‚Üí Value                     {- Sums -}

{- Equality -------------------------------------------------------------------}

l‚äÜ‚ÜíAll‚àà : ‚àÄ {A : Set} (U V : List A) ‚Üí U l‚äÜ V ‚Üí All (Œª z ‚Üí Any (z ‚â°_) V) U
l‚äÜ‚ÜíAll‚àà U V = tabulate

All‚àà‚Üíl‚äÜ : ‚àÄ {A : Set} {U V : List A} ‚Üí All (Œª z ‚Üí Any (z ‚â°_) V) U ‚Üí U l‚äÜ V
All‚àà‚Üíl‚äÜ = lookup

_‚ä¢_l‚äÜ?_ : ‚àÄ {A : Set} (‚â°? : ‚àÄ (a b : A) ‚Üí Dec (a ‚â° b)) (U V : List A) ‚Üí Dec (U l‚äÜ V)
‚â°? ‚ä¢ U l‚äÜ? V = map‚Ä≤ All‚àà‚Üíl‚äÜ (l‚äÜ‚ÜíAll‚àà U V) (all? (Œª x ‚Üí any? (Œª y ‚Üí ‚â°? x y) V) U)

l‚äÜ‚Üí‚äÜ : ‚àÄ {A : Set} (U V : List A) ‚Üí U l‚äÜ V ‚Üí mem U ‚äÜ mem V
l‚äÜ‚Üí‚äÜ U V Ul‚äÜV d = Ul‚äÜV {d}

‚äÜ‚Üíl‚äÜ : ‚àÄ {A : Set} (U V : List A) ‚Üí mem U ‚äÜ mem V ‚Üí U l‚äÜ V
‚äÜ‚Üíl‚äÜ U V U‚äÜV {d} = U‚äÜV d

const-inj-base : ‚àÄ {B B' k k'} ‚Üí const {B} k ‚â° const {B'} k' ‚Üí B ‚â° B'
const-inj-base {B}{B'} refl = refl

const-inj : ‚àÄ {B k k'} ‚Üí const {B} k ‚â° const {B} k' ‚Üí k ‚â° k'
const-inj refl = refl

fst-inj : ‚àÄ {v v'} ‚Üí ‚¶Ö v ‚à£ ‚â° ‚¶Ö v' ‚à£ ‚Üí v ‚â° v'
fst-inj refl = refl

snd-inj : ‚àÄ {v v'} ‚Üí ‚à£ v ‚¶Ü ‚â° ‚à£ v' ‚¶Ü ‚Üí v ‚â° v'
snd-inj refl = refl

tup-inj-easy : ‚àÄ {n} {i i' : Fin n} {d d'} ‚Üí (tup[ i ] d) ‚â° (tup[ i' ] d') 
   ‚Üí ‚ü® i , d ‚ü© ‚â° ‚ü® i' , d' ‚ü©
tup-inj-easy refl = refl

tup-inj : ‚àÄ {n n'} {i : Fin n} {i' : Fin n'} {d d'} 
        ‚Üí (tup[ i ] d) ‚â° (tup[ i' ] d') ‚Üí 
   Œ£[ n‚â°n' ‚àà n ‚â° n' ] (subst Fin n‚â°n' i) ‚â° i' √ó d ‚â° d'
tup-inj refl = ‚ü® refl , ‚ü® refl , refl ‚ü© ‚ü©

tup-inj-uncurried : ‚àÄ {n n'} {i : Fin n} {i' : Fin n'} {d d'} 
        ‚Üí (tup[ i ] d) ‚â° (tup[ i' ] d') ‚Üí 
   Œ£[ n‚â°n' ‚àà n ‚â° n' ] ‚ü® (subst Fin n‚â°n' i) , d ‚ü© ‚â° ‚ü® i' , d' ‚ü©
tup-inj-uncurried refl = ‚ü® refl , refl ‚ü©

tup-inj-uncurried' : ‚àÄ {n n'} {i : Fin n} {i' : Fin n'} {d d'} 
        ‚Üí (tup[ i ] d) ‚â° (tup[ i' ] d') ‚Üí (n‚â°n' : n ‚â° n') ‚Üí
   ‚ü® (subst Fin n‚â°n' i) , d ‚ü© ‚â° ‚ü® i' , d' ‚ü©
tup-inj-uncurried' refl refl = refl

left-inj : ‚àÄ {v v'} ‚Üí (left v) ‚â° left v' ‚Üí v ‚â° v'
left-inj refl = refl

right-inj : ‚àÄ {v v'} ‚Üí (right v) ‚â° right v' ‚Üí v ‚â° v'
right-inj refl = refl

‚Ü¶-inj : ‚àÄ {V V' w w'} ‚Üí  V ‚Ü¶ w ‚â° V' ‚Ü¶ w'
      ‚Üí V ‚â° V' √ó w ‚â° w'
‚Ü¶-inj refl = ‚ü® refl , refl ‚ü©

‚Ü¶-inj-uncurried : ‚àÄ {V V' w w'} ‚Üí V ‚Ü¶ w ‚â° V' ‚Ü¶ w'
      ‚Üí ‚ü® V , w ‚ü© ‚â° ‚ü® V' , w' ‚ü©
‚Ü¶-inj-uncurried refl = refl

_d‚âü_ : (d‚ÇÅ : Value) ‚Üí (d‚ÇÇ : Value) ‚Üí Dec (d‚ÇÅ ‚â° d‚ÇÇ)
_ds‚âü_ : (ds‚ÇÅ : List Value) ‚Üí (ds‚ÇÇ : List Value) ‚Üí Dec (ds‚ÇÅ ‚â° ds‚ÇÇ)
const {B} k d‚âü const {B'} k‚ÇÅ with base-eq? B B'
... | no neq = no Œª z ‚Üí neq (const-inj-base z)
... | yes refl = map‚Ä≤ (cong (const {B})) const-inj (base-rep-eq? k k‚ÇÅ)
const k d‚âü ŒΩ = no (Œª ())
const k d‚âü (V ‚Ü¶ w) = no (Œª ())
const k d‚âü œâ = no (Œª ())
const k d‚âü ‚¶Ö d‚ÇÅ' ‚à£ = no (Œª ())
const k d‚âü ‚à£ d‚ÇÇ' ‚¶Ü = no (Œª ())
const k d‚âü (tup[ i ] d) = no (Œª ())
const k d‚âü (left v‚ÇÅ) = no (Œª ())
const k d‚âü (right v‚ÇÅ) = no (Œª ())
(V ‚Ü¶ w) d‚âü const k = no (Œª ())
(V ‚Ü¶ w) d‚âü (V' ‚Ü¶ w') = map‚Ä≤ (uncurry (cong‚ÇÇ _‚Ü¶_)) ‚Ü¶-inj ((V ds‚âü V') √ó-dec (w d‚âü w'))
(V ‚Ü¶ w) d‚âü ŒΩ = no (Œª ())
(V ‚Ü¶ w) d‚âü œâ = no (Œª ())
(V ‚Ü¶ w) d‚âü ‚¶Ö d‚ÇÅ' ‚à£ = no (Œª ())
(V ‚Ü¶ w) d‚âü ‚à£ d‚ÇÇ' ‚¶Ü = no (Œª ())
(V ‚Ü¶ w) d‚âü (tup[ i ] d) = no (Œª ())
(V ‚Ü¶ w) d‚âü (left v‚ÇÅ) = no (Œª ())
(V ‚Ü¶ w) d‚âü (right v‚ÇÅ) = no (Œª ())
ŒΩ d‚âü const k = no (Œª ())
ŒΩ d‚âü (V ‚Ü¶ d‚ÇÉ) = no (Œª ())
ŒΩ d‚âü ŒΩ = yes refl
ŒΩ d‚âü œâ = no (Œª ())
ŒΩ d‚âü ‚¶Ö d‚ÇÅ' ‚à£ = no (Œª ())
ŒΩ d‚âü ‚à£ d‚ÇÇ' ‚¶Ü = no (Œª ())
ŒΩ d‚âü (tup[ i ] d) = no (Œª ())
ŒΩ d‚âü (left v) = no (Œª ())
ŒΩ d‚âü  (right v) = no (Œª ())
œâ d‚âü const k = no (Œª ())
œâ d‚âü (V ‚Ü¶ d‚ÇÉ) = no (Œª ())
œâ d‚âü ŒΩ = no (Œª ())
œâ d‚âü œâ = yes refl
œâ d‚âü ‚¶Ö d‚ÇÅ ‚à£ = no (Œª ())
œâ d‚âü ‚à£ d‚ÇÇ ‚¶Ü = no (Œª ())
œâ d‚âü (tup[ i ] d) = no (Œª ())
œâ d‚âü (left v) = no (Œª ())
œâ d‚âü (right v) = no (Œª ())
‚¶Ö u ‚à£ d‚âü const k = no (Œª ())
‚¶Ö u ‚à£ d‚âü (V ‚Ü¶ v) = no (Œª ())
‚¶Ö u ‚à£ d‚âü ŒΩ = no (Œª ())
‚¶Ö u ‚à£ d‚âü œâ = no (Œª ())
‚¶Ö u ‚à£ d‚âü ‚¶Ö v ‚à£ = map‚Ä≤ (cong ‚¶Ö_‚à£) fst-inj (u d‚âü v)
‚¶Ö u ‚à£ d‚âü ‚à£ V ‚¶Ü = no (Œª ())
‚¶Ö u ‚à£ d‚âü (tup[ i ] d) = no (Œª ())
‚¶Ö u ‚à£ d‚âü left v = no (Œª ())
‚¶Ö u ‚à£ d‚âü right v = no (Œª ())
‚à£ V ‚¶Ü d‚âü const k = no (Œª ())
‚à£ V ‚¶Ü d‚âü (V‚ÇÅ ‚Ü¶ v) = no (Œª ())
‚à£ V ‚¶Ü d‚âü ŒΩ = no (Œª ())
‚à£ V ‚¶Ü d‚âü œâ = no (Œª ())
‚à£ V ‚¶Ü d‚âü ‚¶Ö v ‚à£ = no (Œª ())
‚à£ V ‚¶Ü d‚âü ‚à£ V‚ÇÅ ‚¶Ü = map‚Ä≤ (cong ‚à£_‚¶Ü) snd-inj (V ds‚âü V‚ÇÅ)
‚à£ V ‚¶Ü d‚âü (tup[ i ] d) = no (Œª ())
‚à£ V ‚¶Ü d‚âü left v = no (Œª ())
‚à£ V ‚¶Ü d‚âü right v = no (Œª ())
(tup[ i ] d) d‚âü const k = no (Œª ())
(tup[ i ] d) d‚âü (V ‚Ü¶ d‚ÇÉ) = no (Œª ())
(tup[ i ] d) d‚âü ŒΩ = no (Œª ())
(tup[ i ] d) d‚âü œâ = no (Œª ())
(tup[_]_ {n} i d) d‚âü (tup[_]_ {n'} i' d') with n ‚âü n'
... | no neq = no Œª z ‚Üí neq (proj‚ÇÅ (tup-inj z))
... | yes refl = map‚Ä≤ (cong (Œª z ‚Üí tup[ proj‚ÇÅ z ] proj‚ÇÇ z))
        (Œª z ‚Üí tup-inj-uncurried' z refl)
        (map‚Ä≤ (uncurry (cong‚ÇÇ ‚ü®_,_‚ü©)) ,-injective (i fin‚âü i' √ó-dec (d d‚âü d')))
(tup[ i ] d) d‚âü (left v) = no (Œª ())
(tup[ i ] d) d‚âü (right v) = no (Œª ())
(tup[ i ] d) d‚âü ‚¶Ö v ‚à£ = no (Œª ())
(tup[ i ] d) d‚âü ‚à£ v ‚¶Ü = no (Œª ())
(left v) d‚âü const k = no (Œª ())
(left v) d‚âü (V‚ÇÅ ‚Ü¶ d‚ÇÉ) = no (Œª ())
(left v) d‚âü ŒΩ = no (Œª ())
(left v) d‚âü œâ = no (Œª ())
(left v) d‚âü ‚¶Ö d‚ÇÅ ‚à£ = no (Œª ())
(left v) d‚âü ‚à£ d‚ÇÇ ‚¶Ü = no (Œª ())
(left v) d‚âü (tup[ i ] d) = no (Œª ())
(left v) d‚âü (left v‚ÇÅ) = map‚Ä≤ (cong left) left-inj (v d‚âü v‚ÇÅ)
(left v) d‚âü (right v‚ÇÅ) = no (Œª ())
(right v) d‚âü const k = no (Œª ())
(right v) d‚âü (V‚ÇÅ ‚Ü¶ d‚ÇÉ) = no (Œª ())
(right v) d‚âü ŒΩ = no (Œª ())
(right v) d‚âü œâ = no (Œª ())
(right v) d‚âü ‚¶Ö d‚ÇÅ ‚à£ = no (Œª ())
(right v) d‚âü ‚à£ d‚ÇÇ ‚¶Ü = no (Œª ())
(right v) d‚âü (tup[ i ] d) = no (Œª ())
(right v) d‚âü (left v‚ÇÅ) = no (Œª ())
(right v) d‚âü (right v‚ÇÅ) = map‚Ä≤ (cong right) right-inj (v d‚âü v‚ÇÅ)
[] ds‚âü [] = yes refl
[] ds‚âü (x ‚à∑ ds‚ÇÇ) = no (Œª ())
(x ‚à∑ ds‚ÇÅ) ds‚âü [] = no (Œª ())
(x ‚à∑ ds‚ÇÅ) ds‚âü (x‚ÇÅ ‚à∑ ds‚ÇÇ) = ‚à∑-dec (x d‚âü x‚ÇÅ) (ds‚ÇÅ ds‚âü ds‚ÇÇ)

_l‚äÜ?_ : ‚àÄ (U V : List Value) ‚Üí Dec (U l‚äÜ V)
U l‚äÜ? V = _d‚âü_ ‚ä¢ U l‚äÜ? V

_mem‚äÜ?_ : ‚àÄ (U V : List Value) ‚Üí Dec (mem U ‚äÜ mem V)
U mem‚äÜ? V = map‚Ä≤ (l‚äÜ‚Üí‚äÜ U V) (‚äÜ‚Üíl‚äÜ U V) (U l‚äÜ? V)

{- Consistency ----------------------------------------------------------------}

infix 5 _~_
infix 5 _‚âà_

_‚âà_ : List Value ‚Üí List Value ‚Üí Set
_~_ : Value ‚Üí Value ‚Üí Set
const {B} x ~ const {B‚ÇÅ} x‚ÇÅ = Œ£[ B‚â° ‚àà B ‚â° B‚ÇÅ ] (subst base-rep B‚â° x) ‚â° x‚ÇÅ
const x ~ (V‚ÇÅ ‚Ü¶ v) = False
const x ~ ŒΩ = False
const x ~ œâ = False  
const x ~ ‚¶Ö d‚ÇÅ ‚à£ = False
const x ~ ‚à£ d‚ÇÇ ‚¶Ü = False
const x ~ (tup[ i ] d') = False
const x ~ (left x‚ÇÅ) = False
const x ~ (right x‚ÇÅ) = False
(V' ‚Ü¶ w') ~ const x‚ÇÇ = False
(V ‚Ü¶ w) ~ (V' ‚Ü¶ w') = (¬¨ V ‚âà V') ‚äé (V ‚âà V' √ó w¬†~ w' )
(V' ‚Ü¶ u) ~ ŒΩ = True
(V' ‚Ü¶ w') ~ œâ = False
(V' ‚Ü¶ w') ~ ‚¶Ö d‚ÇÅ' ‚à£ = False
(V' ‚Ü¶ w') ~ ‚à£ d‚ÇÇ' ‚¶Ü = False
(V' ‚Ü¶ w') ~ (tup[ i ] d') = False
(V' ‚Ü¶ w') ~ (left x) = False
(V' ‚Ü¶ w') ~ (right x) = False
ŒΩ ~ const x = False
ŒΩ ~ (V' ‚Ü¶ v) = True
ŒΩ ~ ŒΩ = True
ŒΩ ~ œâ = False
ŒΩ ~ ‚¶Ö d‚ÇÅ' ‚à£ = False
ŒΩ ~ ‚à£ d‚ÇÇ' ‚¶Ü = False
ŒΩ ~ (tup[ i ] d') = False
ŒΩ ~ (left x) = False
ŒΩ ~ (right x) = False
œâ ~ const x = False
œâ ~ (V' ‚Ü¶ v) = False
œâ ~ ŒΩ = False
œâ ~ œâ = True {- starting with œâ related with just itself -}
œâ ~ ‚¶Ö d‚ÇÅ' ‚à£ = False
œâ ~ ‚à£ d‚ÇÇ' ‚¶Ü = False
œâ ~ (tup[ i ] d') = False
œâ ~ (left x) = False
œâ ~ (right x) = False
‚¶Ö u ‚à£ ~ const k = False
‚¶Ö u ‚à£ ~ (V ‚Ü¶ v) = False
‚¶Ö u ‚à£ ~ ŒΩ = False
‚¶Ö u ‚à£ ~ œâ = False
‚¶Ö u ‚à£ ~ ‚¶Ö v ‚à£ = u ~ v
‚¶Ö u ‚à£ ~ ‚à£ V ‚¶Ü = True
‚¶Ö u ‚à£ ~ (tup[ i ] d) = False
‚¶Ö u ‚à£ ~ left v = False
‚¶Ö u ‚à£ ~ right v = False
‚à£ V ‚¶Ü ~ const k = False
‚à£ V ‚¶Ü ~ (V‚ÇÅ ‚Ü¶ v) = False
‚à£ V ‚¶Ü ~ ŒΩ = False
‚à£ V ‚¶Ü ~ œâ = False
‚à£ V ‚¶Ü ~ ‚¶Ö v ‚à£ = True
‚à£ V ‚¶Ü ~ ‚à£ V‚ÇÅ ‚¶Ü = V ‚âà V‚ÇÅ
‚à£ V ‚¶Ü ~ (tup[ i ] d) = False
‚à£ V ‚¶Ü ~ left v = False
‚à£ V ‚¶Ü ~ right v = False
(tup[ i ] d') ~ const x‚ÇÅ = False
(tup[ i ] d') ~ (V‚ÇÅ ‚Ü¶ v) = False
(tup[ i ] d') ~ ŒΩ = False
(tup[ i ] d') ~ œâ = False
(tup[ i ] d') ~ ‚¶Ö d‚ÇÅ' ‚à£ = False
(tup[ i ] d') ~ ‚à£ d‚ÇÇ' ‚¶Ü = False
(tup[_]_ {n} i d) ~ (tup[_]_ {n'} i' d') 
    = Œ£[ n‚â° ‚àà n ‚â° n' ] ((¬¨ ((subst Fin n‚â° i) ‚â° i')) ‚äé ((subst Fin n‚â° i) ‚â° i' √ó d ~ d'))
(tup[ i ] d') ~ (left x‚ÇÅ) = False
(tup[ i ] d') ~ (right x‚ÇÅ) = False
(left x) ~ const x‚ÇÅ = False
(left x) ~ (V‚ÇÅ ‚Ü¶ v) = False
(left x) ~ ŒΩ = False
(left x) ~ œâ = False
(left x) ~ ‚¶Ö d‚ÇÅ' ‚à£ = False
(left x) ~ ‚à£ d‚ÇÇ' ‚¶Ü = False
(left x) ~ (tup[ i ] d') = False
(left x) ~ (left x‚ÇÅ) = x ~ x‚ÇÅ
(left x) ~ (right x‚ÇÅ) = False
(right x) ~ const x‚ÇÅ = False
(right x) ~ (V‚ÇÅ ‚Ü¶ v) = False
(right x) ~ ŒΩ = False
(right x) ~ œâ = False
(right x) ~ ‚¶Ö d‚ÇÅ' ‚à£ = False
(right x) ~ ‚à£ d‚ÇÇ' ‚¶Ü = False
(right x) ~ (tup[ i ] d') = False
(right x) ~ (left x‚ÇÅ) = False
(right x) ~ (right x‚ÇÅ) = x ~ x‚ÇÅ

[] ‚âà vs = True 
(u ‚à∑ us) ‚âà vs = All (u ~_) vs √ó us ‚âà vs

‚âà[] : ‚àÄ V ‚Üí V ‚âà []
‚âà[] [] = tt
‚âà[] (x ‚à∑ V) = ‚ü® All.[] , ‚âà[] V ‚ü©

‚âàhead : ‚àÄ U v V ‚Üí U ‚âà (v ‚à∑ V) ‚Üí All (_~ v) U
‚âàhead [] v V U~vV = []
‚âàhead (x ‚à∑ U) v V ‚ü® x~v ‚à∑ x~V , snd ‚ü© = x~v ‚à∑ ‚âàhead U v V snd

‚âàtail : ‚àÄ U v V ‚Üí U ‚âà (v ‚à∑ V) ‚Üí U ‚âà V
‚âàtail [] v V U~vV = tt
‚âàtail (x ‚à∑ U) v V ‚ü® x~v ‚à∑ x~V , snd ‚ü© = 
  ‚ü® x~V , ‚âàtail U v V snd ‚ü©


‚âà-sym : ‚àÄ U V ‚Üí U ‚âà V ‚Üí V ‚âà U
~-sym-All : ‚àÄ u V ‚Üí All (_~ u) V ‚Üí All (_~_ u) V
~-sym : ‚àÄ u v ‚Üí u ~ v ‚Üí v ~ u
~-sym (const {B} x) (const {B‚ÇÅ} x‚ÇÅ) ‚ü® refl , u~v ‚ü© = ‚ü® refl , sym u~v ‚ü©
~-sym  (V ‚Ü¶ w)  (V' ‚Ü¶ w') (inj‚ÇÅ ¬¨V~V') = 
  inj‚ÇÅ Œª z ‚Üí ¬¨V~V' (‚âà-sym V' V z)
~-sym  (V ‚Ü¶ w)  (V' ‚Ü¶ w') (inj‚ÇÇ ‚ü® V~V' , w~w' ‚ü©) = 
  inj‚ÇÇ ‚ü® ‚âà-sym V V' V~V' , ~-sym w w' w~w' ‚ü©
~-sym (V' ‚Ü¶ u) ŒΩ u~v = tt
~-sym ŒΩ (V' ‚Ü¶ v) u~v = tt
~-sym ŒΩ ŒΩ u~v = tt
~-sym œâ œâ u~v = tt
~-sym ‚¶Ö u ‚à£ ‚¶Ö v ‚à£ u~v = ~-sym u v u~v
~-sym ‚¶Ö u ‚à£ ‚à£ V ‚¶Ü u~v = tt
~-sym ‚à£ V ‚¶Ü ‚¶Ö v ‚à£ u~v = tt
~-sym ‚à£ V ‚¶Ü ‚à£ V‚ÇÅ ‚¶Ü u~v = ‚âà-sym V V‚ÇÅ u~v
~-sym (tup[_]_ {n} i d) (tup[_]_ {n'} i' d') ‚ü® refl , inj‚ÇÅ neq ‚ü© = 
    ‚ü® refl , inj‚ÇÅ (Œª z ‚Üí neq (sym z)) ‚ü©
~-sym (tup[_]_ {n} i d) (tup[_]_ {n'} i' d') ‚ü® refl , inj‚ÇÇ ‚ü® refl , d~ ‚ü© ‚ü© =
    ‚ü® refl , inj‚ÇÇ ‚ü® refl , ~-sym d d' d~ ‚ü© ‚ü©
~-sym (left x) (left x‚ÇÅ) u~v = ~-sym x x‚ÇÅ u~v
~-sym (right x) (right x‚ÇÅ) u~v = ~-sym x x‚ÇÅ u~v

~-sym-All u [] [] = []
~-sym-All u (x ‚à∑ xs) (px ‚à∑ V~u) = 
  ~-sym x u px ‚à∑ ~-sym-All u xs V~u

‚âà-sym U [] U‚âàV = tt
‚âà-sym U (x ‚à∑ V) U‚âàV = 
  ‚ü® ~-sym-All x U (‚âàhead U x V U‚âàV) 
  , ‚âà-sym U V (‚âàtail U x V U‚âàV) ‚ü©

~-tup-inv : ‚àÄ {n}{i i' : Fin n}{d d'} ‚Üí tup[ i ] d ~ tup[ i' ] d'
    ‚Üí (¬¨ (i ‚â° i')) ‚äé (i ‚â° i' √ó d ~ d')
~-tup-inv ‚ü® refl , snd ‚ü© = snd

~-const-inv : ‚àÄ {B k k'} ‚Üí const {B} k ~ const k' 
    ‚Üí k ‚â° k'
~-const-inv ‚ü® refl , snd ‚ü© = snd

_‚âà?_ : (U V : List Value) ‚Üí Dec (U ‚âà V)
_~>?_ : (u : Value) (V : List Value) ‚Üí Dec (All (u ~_) V)
_~?_ : (u v : Value) ‚Üí Dec (u ~ v)
const {B} x ~? const {B'} x‚ÇÅ with base-eq? B B'
... | no neq = no Œª z ‚Üí neq (proj‚ÇÅ z)
... | yes refl with base-rep-eq? x x‚ÇÅ
... | no neq = no Œª z ‚Üí neq (~-const-inv z)
... | yes refl = yes ‚ü® refl , refl ‚ü©
const x ~? (V‚ÇÅ ‚Ü¶ v) = no (Œª z ‚Üí z)
const x ~? ŒΩ = no (Œª z ‚Üí z)
const x ~? œâ = no (Œª z ‚Üí z)
const x ~? ‚¶Ö d‚ÇÅ' ‚à£ = no (Œª z ‚Üí z)
const x ~? ‚à£ d‚ÇÇ' ‚¶Ü = no (Œª z ‚Üí z)
const x ~? (tup[ i ] d') = no (Œª z ‚Üí z)
const x ~? (left x‚ÇÅ) = no (Œª z ‚Üí z)
const x ~? (right x‚ÇÅ) = no (Œª z ‚Üí z)
(V' ‚Ü¶ u) ~? const x‚ÇÇ = no (Œª z ‚Üí z)
(V ‚Ü¶ w) ~?  (V' ‚Ü¶ w') with V ‚âà? V'
... | no ¬¨V~V' = yes (inj‚ÇÅ ¬¨V~V')
... | yes V~V' with w ~? w'
... | no ¬¨w~w' = no (Œª z ‚Üí [ (Œª x ‚Üí x V~V') 
                           , (Œª x ‚Üí ¬¨w~w' (proj‚ÇÇ x)) ] z )
... | yes w~w' = yes (inj‚ÇÇ ‚ü® V~V' , w~w' ‚ü©)
(V' ‚Ü¶ w') ~? ŒΩ = yes tt
(V' ‚Ü¶ w') ~? œâ = no (Œª z ‚Üí z)
(V' ‚Ü¶ w') ~? ‚¶Ö d‚ÇÅ' ‚à£ = no (Œª z ‚Üí z)
(V' ‚Ü¶ w') ~? ‚à£ d‚ÇÇ' ‚¶Ü = no (Œª z ‚Üí z)
(V' ‚Ü¶ w') ~? (tup[ i ] d') = no (Œª z ‚Üí z)
(V' ‚Ü¶ w') ~? (left x) = no (Œª z ‚Üí z)
(V' ‚Ü¶ w') ~? (right x) = no (Œª z ‚Üí z)
ŒΩ ~? const x = no (Œª z ‚Üí z)
ŒΩ ~? (V' ‚Ü¶ v) = yes tt
ŒΩ ~? ŒΩ = yes tt
ŒΩ ~? œâ = no (Œª z ‚Üí z)
ŒΩ ~? ‚¶Ö d‚ÇÅ' ‚à£ = no (Œª z ‚Üí z)
ŒΩ ~? ‚à£ d‚ÇÇ' ‚¶Ü = no (Œª z ‚Üí z)
ŒΩ ~? (tup[ i ] d') = no (Œª z ‚Üí z)
ŒΩ ~? (left x) = no (Œª z ‚Üí z)
ŒΩ ~? (right x) = no (Œª z ‚Üí z)
œâ ~? const x = no (Œª z ‚Üí z)
œâ ~? (V' ‚Ü¶ v) = no (Œª z ‚Üí z)
œâ ~? ŒΩ = no (Œª z ‚Üí z)
œâ ~? œâ = yes tt
œâ ~? ‚¶Ö d‚ÇÅ' ‚à£ = no (Œª z ‚Üí z)
œâ ~? ‚à£ d‚ÇÇ' ‚¶Ü = no (Œª z ‚Üí z)
œâ ~? (tup[ i ] d') = no (Œª z ‚Üí z)
œâ ~? (left x) = no (Œª z ‚Üí z)
œâ ~? (right x) = no (Œª z ‚Üí z)
‚¶Ö u ‚à£ ~? const k = no Œª z ‚Üí z
‚¶Ö u ‚à£ ~? (V ‚Ü¶ v) = no (Œª z ‚Üí z)
‚¶Ö u ‚à£ ~? ŒΩ = no (Œª z ‚Üí z)
‚¶Ö u ‚à£ ~? œâ = no (Œª z ‚Üí z)
‚¶Ö u ‚à£ ~? ‚¶Ö v ‚à£ = u ~? v
‚¶Ö u ‚à£ ~? ‚à£ V ‚¶Ü = yes tt
‚¶Ö u ‚à£ ~? (tup[ i ] d) = no (Œª z ‚Üí z)
‚¶Ö u ‚à£ ~? left v = no (Œª z ‚Üí z)
‚¶Ö u ‚à£ ~? right v = no (Œª z ‚Üí z)
‚à£ V ‚¶Ü ~? const k = no (Œª z ‚Üí z)
‚à£ V ‚¶Ü ~? (V‚ÇÅ ‚Ü¶ v) = no (Œª z ‚Üí z)
‚à£ V ‚¶Ü ~? ŒΩ = no (Œª z ‚Üí z)
‚à£ V ‚¶Ü ~? œâ = no (Œª z ‚Üí z)
‚à£ V ‚¶Ü ~? ‚¶Ö v ‚à£ = yes tt
‚à£ V ‚¶Ü ~? ‚à£ V‚ÇÅ ‚¶Ü = V ‚âà? V‚ÇÅ
‚à£ V ‚¶Ü ~? (tup[ i ] d) = no (Œª z ‚Üí z)
‚à£ V ‚¶Ü ~? left v = no (Œª z ‚Üí z)
‚à£ V ‚¶Ü ~? right v = no (Œª z ‚Üí z)
(tup[ i ] d') ~? const x‚ÇÅ = no (Œª z ‚Üí z)
(tup[ i ] d') ~? (V‚ÇÅ ‚Ü¶ v) = no (Œª z ‚Üí z)
(tup[ i ] d') ~? ŒΩ = no (Œª z ‚Üí z)
(tup[ i ] d') ~? œâ = no (Œª z ‚Üí z)
(tup[ i ] d') ~? ‚¶Ö d‚ÇÅ' ‚à£ = no (Œª z ‚Üí z)
(tup[ i ] d') ~? ‚à£ d‚ÇÇ' ‚¶Ü = no (Œª z ‚Üí z)
(tup[_]_ {n} i d) ~? (tup[_]_ {n'} i' d') with n ‚âü n'
... | no neq = no (Œª z ‚Üí neq (proj‚ÇÅ z))
... | yes refl with i fin‚âü i'
... | no neq = yes ‚ü® refl , inj‚ÇÅ neq ‚ü©
... | yes refl with d ~? d'
... | yes d~ = yes ‚ü® refl , inj‚ÇÇ ‚ü® refl , d~ ‚ü© ‚ü©
... | no ¬¨d~ = no Œª z ‚Üí ¬¨d~ ([ (Œª x ‚Üí ‚ä•-elim (x refl)) 
                            , (Œª x ‚Üí proj‚ÇÇ x) ] (~-tup-inv {n}{i}{i'}{d} z))
(tup[ i ] d') ~? (left x‚ÇÅ) = no (Œª z ‚Üí z)
(tup[ i ] d') ~? (right x‚ÇÅ) = no (Œª z ‚Üí z)
(left x) ~? const x‚ÇÅ = no (Œª z ‚Üí z)
(left x) ~? (V‚ÇÅ ‚Ü¶ v) = no (Œª z ‚Üí z)
(left x) ~? ŒΩ = no (Œª z ‚Üí z)
(left x) ~? œâ = no (Œª z ‚Üí z)
(left x) ~? ‚¶Ö d‚ÇÅ' ‚à£ = no (Œª z ‚Üí z)
(left x) ~? ‚à£ d‚ÇÇ' ‚¶Ü = no (Œª z ‚Üí z)
(left x) ~? (tup[ i ] d') = no (Œª z ‚Üí z)
(left x) ~? (left x‚ÇÅ) = x ~? x‚ÇÅ
(left x) ~? (right x‚ÇÅ) = no (Œª z ‚Üí z)
(right x) ~? const x‚ÇÅ = no (Œª z ‚Üí z)
(right x) ~? (V‚ÇÅ ‚Ü¶ v) = no (Œª z ‚Üí z)
(right x) ~? ŒΩ = no (Œª z ‚Üí z)
(right x) ~? œâ = no (Œª z ‚Üí z)
(right x) ~? ‚¶Ö d‚ÇÅ' ‚à£ = no (Œª z ‚Üí z)
(right x) ~? ‚à£ d‚ÇÇ' ‚¶Ü = no (Œª z ‚Üí z)
(right x) ~? (tup[ i ] d') = no (Œª z ‚Üí z)
(right x) ~? (left x‚ÇÅ) = no (Œª z ‚Üí z)
(right x) ~? (right x‚ÇÅ) = x ~? x‚ÇÅ

u ~>? [] = yes All.[]
u ~>? (x ‚à∑ V) with u ~? x
... | no ¬¨u~x = no (Œª z ‚Üí ¬¨u~x (head z))
... | yes u~x with u ~>? V 
... | no ¬¨u~V = no Œª z ‚Üí ¬¨u~V (tail z)
... | yes U~V = yes (u~x All.‚à∑ U~V)

[] ‚âà? V = yes tt
(x ‚à∑ U) ‚âà? V with x ~>? V
... | no ¬¨x~V = no (Œª z ‚Üí ¬¨x~V (proj‚ÇÅ z))
... | yes x~V with U ‚âà? V
... | no ¬¨U~V = no (Œª z ‚Üí ¬¨U~V (proj‚ÇÇ z))
... | yes U~V = yes ‚ü® x~V , U~V ‚ü©



‚âà‚áíEvery : ‚àÄ A B ‚Üí A ‚âà B ‚Üí Every _~_ (mem A) (mem B)
‚âà‚áíEvery (x ‚à∑ A) B ‚ü® x~B , A~B ‚ü© a b (here refl) b‚ààB = 
  lookup x~B b‚ààB
‚âà‚áíEvery (x ‚à∑ A) B ‚ü® x~B , A~B ‚ü© a b (there a‚ààA) b‚ààB = 
  ‚âà‚áíEvery A B A~B a b a‚ààA b‚ààB

Every‚áí‚âà : ‚àÄ A B ‚Üí Every _~_ (mem A) (mem B) ‚Üí A ‚âà B
Every‚áí‚âà [] B A~B = tt
Every‚áí‚âà (x ‚à∑ A) B A~B = 
  ‚ü® tabulate (Œª {b} b‚ààB ‚Üí A~B x b (here refl) b‚ààB) 
  , Every‚áí‚âà A B (Œª a b a‚ààA b‚ààB ‚Üí A~B a b (there a‚ààA) b‚ààB) ‚ü©

