module PValue where
{-

  A denotational semantics of ISWIM, adapting the call-by-name models
  P(œâ) of Scott (1976) and D‚Çê of Engeler (1981) to call-by-value.

  Theorems:
  * soundness of reduction wrt. denotations
  * adequacy of denotations wrt. reduction
  * denotational equality implies contextual equivalence

  Main Lemmas:
  * denotations are continuous (for soundness)
  * compositionality (for contextual equivalence)

-}

open import Primitives
open import Syntax using (Rename)
open import ISWIM hiding (Ctx)
open import AbstractBindingTree Op sig using (Ctx; CHole)
open import WellScoped Op sig using (WF-plug) 
open import Fold2 Op sig
open import ScopedTuple hiding (ùí´)
open import Sig
open import Utilities using (extensionality)
open import SetsAsPredicates

open import Data.Empty using (‚ä•-elim) renaming (‚ä• to False)
open import Data.List using (List ; _‚à∑_ ; []; _++_; length)
open import Data.List.Properties using (++-conicalÀ°)
open import Data.List.Membership.Propositional renaming (_‚àà_ to _‚ãµ_)
open import Data.List.Membership.Propositional.Properties
  using (‚àà-++‚Å∫À°; ‚àà-++‚Å∫ ≥)
open import Data.List.Relation.Unary.Any using (here; there) 
open import Data.Nat using (‚Ñï; zero; suc; _‚âü_; _<_; s‚â§s)
open import Data.Product using (_√ó_; Œ£; Œ£-syntax; proj‚ÇÅ; proj‚ÇÇ)
    renaming (_,_ to ‚ü®_,_‚ü©)
open import Data.Sum using (_‚äé_; inj‚ÇÅ; inj‚ÇÇ)
open import Data.Unit using (tt) renaming (‚ä§ to True)
open import Relation.Binary.PropositionalEquality
    using (_‚â°_; _‚â¢_; refl; sym; subst)
open import Relation.Nullary using (¬¨_; Dec; yes; no)

module PValue where

{- Finite Sets represented by Lists --------------------------------------------}

mem : ‚àÄ{T : Set} ‚Üí List T ‚Üí T ‚Üí Set
mem {T} ls x = x ‚ãµ ls

E‚â¢[]‚áínonempty-mem : ‚àÄ{T}{E : List T}
  ‚Üí E ‚â¢ [] ‚Üí nonempty (mem E)
E‚â¢[]‚áínonempty-mem {T} {[]} E‚â¢[] = ‚ä•-elim (E‚â¢[] refl)
E‚â¢[]‚áínonempty-mem {T} {x ‚à∑ E} E‚â¢[] = ‚ü® x , here refl ‚ü©


{- Denotational Values ---------------------------------------------------------}

data Value : Set where
  const : {B : Base} ‚Üí base-rep B ‚Üí Value   {- A primitive constant of type B. -}
  _‚Ü¶_ : List Value ‚Üí Value ‚Üí Value         {- An entry in a function's graph. -}
  ŒΩ : Value       {- A function. Needed for CBV to distinguish from diverging. -}


{- Abstraction and Application -------------------------------------------------}

Œõ : (ùí´ Value ‚Üí ùí´ Value) ‚Üí ùí´ Value
Œõ f (const k) = False
Œõ f (V ‚Ü¶ w) = w ‚àà f (mem V)  √ó  V ‚â¢ []
Œõ f ŒΩ = True

infix 10 _‚ñ™_
_‚ñ™_ : ùí´ Value ‚Üí ùí´ Value ‚Üí ùí´ Value
D‚ÇÅ ‚ñ™ D‚ÇÇ = Œª w ‚Üí Œ£[ V ‚àà List Value ] (V ‚Ü¶ w ‚àà D‚ÇÅ)  √ó  (mem V ‚äÜ D‚ÇÇ)  √ó  V ‚â¢ []

‚Ñò : (P : Prim) ‚Üí rep P ‚Üí ùí´ Value
‚Ñò (base B) k (const {B‚Ä≤} k‚Ä≤)
    with base-eq? B B‚Ä≤
... | yes refl = k ‚â° k‚Ä≤
... | no neq = False
‚Ñò (base B) k (V ‚Ü¶ w) = False
‚Ñò (base B) k ŒΩ = False
‚Ñò (B ‚áí P) f (const k) = False
‚Ñò (B ‚áí P) f (V ‚Ü¶ w) =
   Œ£[ k ‚àà base-rep B ] V ‚â° (const {B} k) ‚à∑ []  √ó  w ‚àà ‚Ñò P (f k)
‚Ñò (B ‚áí P) f ŒΩ = True

k‚àà‚Ñòk : ‚àÄ{B}{k} ‚Üí const {B} k ‚àà ‚Ñò (base B) k
k‚àà‚Ñòk {B}{k}
    with base-eq? B B
... | yes refl = refl
... | no neq = neq refl

k‚Ä≤‚àà‚Ñòk‚áíP‚â°B : ‚àÄ{P B}{k}{k‚Ä≤} ‚Üí const {B} k‚Ä≤ ‚àà ‚Ñò P k ‚Üí P ‚â° base B
k‚Ä≤‚àà‚Ñòk‚áíP‚â°B {base B‚Ä≤} {B} {k} {k‚Ä≤} k‚Ä≤‚àà‚Ñòk
    with base-eq? B‚Ä≤ B
... | yes refl = refl
... | no neq = ‚ä•-elim k‚Ä≤‚àà‚Ñòk

k‚Ä≤‚àà‚Ñòk‚áík‚Ä≤‚â°k : ‚àÄ{B}{k}{k‚Ä≤} ‚Üí const {B} k‚Ä≤ ‚àà ‚Ñò (base B) k ‚Üí k‚Ä≤ ‚â° k
k‚Ä≤‚àà‚Ñòk‚áík‚Ä≤‚â°k {B}{k}{k‚Ä≤} m
    with base-eq? B B
... | yes refl = sym m
... | no neq = ‚ä•-elim m


{- Application is a Congruence -------------------------------------------------}

‚ñ™-cong : ‚àÄ{D‚ÇÅ D‚ÇÇ D‚ÇÉ D‚ÇÑ : ùí´ Value}
  ‚Üí D‚ÇÅ ‚âÉ D‚ÇÉ  ‚Üí  D‚ÇÇ ‚âÉ D‚ÇÑ
  ‚Üí D‚ÇÅ ‚ñ™ D‚ÇÇ ‚âÉ D‚ÇÉ ‚ñ™ D‚ÇÑ
‚ñ™-cong ‚ü® d13 , d31 ‚ü© ‚ü® d24 , d42 ‚ü© = ‚ü® (‚ñ™-cong-‚äÜ d13 d24) , (‚ñ™-cong-‚äÜ d31 d42) ‚ü©
  where
  ‚ñ™-cong-‚äÜ : ‚àÄ{D‚ÇÅ D‚ÇÇ D‚ÇÉ D‚ÇÑ : ùí´ Value}
    ‚Üí D‚ÇÅ ‚äÜ D‚ÇÉ  ‚Üí  D‚ÇÇ ‚äÜ D‚ÇÑ
    ‚Üí D‚ÇÅ ‚ñ™ D‚ÇÇ ‚äÜ D‚ÇÉ ‚ñ™ D‚ÇÑ
  ‚ñ™-cong-‚äÜ D11 D22 w ‚ü® V , ‚ü® wv‚ààD1 , ‚ü® V<D2 , V‚â¢[] ‚ü© ‚ü© ‚ü© =
     ‚ü® V , ‚ü® (D11 (V ‚Ü¶ w) wv‚ààD1) , ‚ü® (Œª d z ‚Üí D22 d (V<D2 d z)) , V‚â¢[] ‚ü© ‚ü© ‚ü©
  
{- Abstraction followed by Application is the identity -------------------------}

continuous : (F : ùí´ Value ‚Üí ùí´ Value) ‚Üí Set‚ÇÅ
continuous F = ‚àÄ X E ‚Üí mem E ‚äÜ F X ‚Üí nonempty X
    ‚Üí Œ£[ D ‚àà List Value ] mem D ‚äÜ X  √ó  mem E ‚äÜ F (mem D)  √ó  D ‚â¢ []

monotone : (F : ùí´ Value ‚Üí ùí´ Value) ‚Üí Set‚ÇÅ
monotone F = ‚àÄ D‚ÇÅ D‚ÇÇ ‚Üí D‚ÇÅ ‚äÜ D‚ÇÇ ‚Üí F D‚ÇÅ ‚äÜ F D‚ÇÇ

Œõ-‚ñ™-id : ‚àÄ {F : ùí´ Value ‚Üí ùí´ Value}{X : ùí´ Value}
  ‚Üí continuous F ‚Üí monotone F ‚Üí nonempty X
  ‚Üí (Œõ F) ‚ñ™ X ‚âÉ F X
Œõ-‚ñ™-id {F}{X} Fcont Fmono NE-X = ‚ü® (Œõ-‚ñ™-‚äÜ Fmono) , (‚äÜ-Œõ-‚ñ™ Fcont NE-X) ‚ü©
  where
  Œõ-‚ñ™-‚äÜ : ‚àÄ {F : ùí´ Value ‚Üí ùí´ Value}{X : ùí´ Value}
    ‚Üí monotone F  ‚Üí  (Œõ F) ‚ñ™ X ‚äÜ F X
  Œõ-‚ñ™-‚äÜ {F} {X} Fmono w ‚ü® V , ‚ü® ‚ü® w‚ààFV , _ ‚ü© , ‚ü® V<X , V‚â¢[] ‚ü© ‚ü© ‚ü© =
      Fmono (mem V) X V<X w w‚ààFV

  ‚äÜ-Œõ-‚ñ™ : ‚àÄ {F : ùí´ Value ‚Üí ùí´ Value}{X : ùí´ Value}
    ‚Üí continuous F  ‚Üí nonempty X ‚Üí  F X ‚äÜ (Œõ F) ‚ñ™ X
  ‚äÜ-Œõ-‚ñ™ {F}{X} Fcont NE-X w w‚ààFX 
      with Fcont X (w ‚à∑ []) (Œª { d (here refl) ‚Üí w‚ààFX }) NE-X
  ... | ‚ü® D , ‚ü® D<X , ‚ü® w‚ààFD , NE-D ‚ü© ‚ü© ‚ü© =
        ‚ü® D , ‚ü® ‚ü® w‚ààFD w (here refl) , NE-D ‚ü© , ‚ü® D<X , NE-D ‚ü© ‚ü© ‚ü©

  
{- Denotational Semantics of the ISWIM Language via fold -----------------------}

interp-op  : (op : Op) ‚Üí Tuple (sig op) (ArgTy (ùí´ Value)) ‚Üí ùí´ Value
interp-op lam ‚ü® F , _ ‚ü© = Œõ F
interp-op app ‚ü® D‚ÇÅ , ‚ü® D‚ÇÇ , _ ‚ü© ‚ü© = D‚ÇÅ ‚ñ™ D‚ÇÇ
interp-op (lit P k) _ = ‚Ñò P k

Env : Set‚ÇÅ
Env = Var ‚Üí ùí´ Value

infix 11 ‚ü¶_‚üß_
‚ü¶_‚üß_ : Term ‚Üí Env ‚Üí ùí´ Value
‚ü¶ M ‚üß œÅ = fold interp-op ‚àÖ œÅ M

‚ü¶‚üß-app : ‚àÄ{L M : Term}{œÅ : Env}
  ‚Üí ‚ü¶ L ¬∑ M ‚üß œÅ ‚â° ‚ü¶ L ‚üß œÅ ‚ñ™ ‚ü¶ M ‚üß œÅ
‚ü¶‚üß-app = refl

‚ü¶‚üß-lam : ‚àÄ{N : Term}{œÅ : Env}
  ‚Üí ‚ü¶ ∆õ N ‚üß œÅ ‚â° Œõ (Œª D ‚Üí ‚ü¶ N ‚üß (D ‚Ä¢ œÅ))
‚ü¶‚üß-lam = refl

‚ü¶‚üß-prim : ‚àÄ{P : Prim}{k : rep P}{œÅ : Env}
  ‚Üí ‚ü¶ $ P k ‚üß œÅ ‚â° ‚Ñò P k
‚ü¶‚üß-prim = refl


{- Syntactic values terminate (i.e., have nonempty denotations) ----------------}

nonempty-env : Env ‚Üí Set
nonempty-env œÅ = ‚àÄ x ‚Üí nonempty (œÅ x)

value-nonempty : ‚àÄ{V : Term}{œÅ}
  ‚Üí nonempty-env œÅ ‚Üí TermValue V ‚Üí nonempty (‚ü¶ V ‚üß œÅ)
value-nonempty NE-œÅ (V-var {x}) = NE-œÅ x
value-nonempty NE-œÅ (V-∆õ) = ‚ü® ŒΩ , tt ‚ü©
value-nonempty NE-œÅ (V-lit {base B} {k}) = ‚ü® const k , k‚àà‚Ñòk ‚ü©
value-nonempty NE-œÅ (V-lit {B ‚áí P} {k}) = ‚ü® ŒΩ , tt ‚ü©


{- Substitution Lemma (via fold-subst-fusion) ----------------------------------}

‚ü¶‚üß-par-subst : ‚àÄ {M : Term}{œÉ : Subst}{œÅ : Var ‚Üí ùí´ Value}
  ‚Üí ‚ü¶ ‚ü™ œÉ ‚ü´ M ‚üß œÅ ‚â° ‚ü¶ M ‚üß (Œª x ‚Üí ‚ü¶ œÉ x ‚üß œÅ)
‚ü¶‚üß-par-subst {M}{œÅ} = fold-subst-fusion M

‚ü¶‚üß-subst : ‚àÄ {M N : Term}{œÅ : Var ‚Üí ùí´ Value}
  ‚Üí ‚ü¶ M [ N ] ‚üß œÅ ‚â° ‚ü¶ M ‚üß ((‚ü¶ N ‚üß œÅ) ‚Ä¢ œÅ)
‚ü¶‚üß-subst {M}{N}{œÅ} =
  subst (Œª X ‚Üí ‚ü¶ M [ N ] ‚üß œÅ ‚â° ‚ü¶ M ‚üß X) (extensionality EQ)
        (‚ü¶‚üß-par-subst {M}{N ‚Ä¢ id})
  where 
  EQ : (x : Var) ‚Üí ‚ü¶ (N ‚Ä¢ id) x ‚üß œÅ ‚â° (‚ü¶ N ‚üß œÅ ‚Ä¢ œÅ) x
  EQ zero = refl
  EQ (suc x) = refl


{- Denotations are monotone ----------------------------------------------------}

‚ü¶‚üß-monotone : ‚àÄ{M : Term}{œÅ œÅ‚Ä≤}  ‚Üí  (‚àÄ x ‚Üí œÅ x ‚äÜ œÅ‚Ä≤ x)  ‚Üí  ‚ü¶ M ‚üß œÅ ‚äÜ ‚ü¶ M ‚üß œÅ‚Ä≤ 
‚ü¶‚üß-monotone {` x} œÅ<œÅ‚Ä≤ = œÅ<œÅ‚Ä≤ x
‚ü¶‚üß-monotone {L ¬∑ M} œÅ<œÅ‚Ä≤ w ‚ü® V , ‚ü® Vw‚ààL , ‚ü® V‚äÜM , V‚â¢[] ‚ü© ‚ü© ‚ü© =
   let vw‚ààLœÅ‚Ä≤ = ‚ü¶‚üß-monotone {L} œÅ<œÅ‚Ä≤ (V ‚Ü¶ w) Vw‚ààL in
   let v‚ààMœÅ‚Ä≤ = ‚ü¶‚üß-monotone {M} œÅ<œÅ‚Ä≤ in
   ‚ü® V , ‚ü® vw‚ààLœÅ‚Ä≤ , ‚ü® (Œª v v‚ààV ‚Üí v‚ààMœÅ‚Ä≤ v (V‚äÜM v v‚ààV)) , V‚â¢[] ‚ü© ‚ü© ‚ü©
‚ü¶‚üß-monotone {∆õ N}{œÅ}{œÅ‚Ä≤} œÅ<œÅ‚Ä≤ (const k) ()
‚ü¶‚üß-monotone {∆õ N}{œÅ}{œÅ‚Ä≤} œÅ<œÅ‚Ä≤ (V ‚Ü¶ w) ‚ü® w‚àà‚ü¶N‚üßV‚Ä¢œÅ , V‚â¢[] ‚ü© =
  ‚ü® ‚ü¶‚üß-monotone {N}{mem V ‚Ä¢ œÅ}{mem V ‚Ä¢ œÅ‚Ä≤} G w w‚àà‚ü¶N‚üßV‚Ä¢œÅ , V‚â¢[] ‚ü©
  where G : (x : Var) ‚Üí (mem V ‚Ä¢ œÅ) x ‚äÜ (mem V ‚Ä¢ œÅ‚Ä≤) x
        G zero = Œª v z ‚Üí z
        G (suc x) = œÅ<œÅ‚Ä≤ x
‚ü¶‚üß-monotone {∆õ N}{œÅ}{œÅ‚Ä≤} œÅ<œÅ‚Ä≤ ŒΩ _ = tt
‚ü¶‚üß-monotone {$ p k} œÅ<œÅ‚Ä≤ v v‚àà‚Ñòk = v‚àà‚Ñòk

‚ü¶‚üß-monotone-one : ‚àÄ{N : Term}{œÅ} ‚Üí monotone (Œª D ‚Üí ‚ü¶ N ‚üß (D ‚Ä¢ œÅ))
‚ü¶‚üß-monotone-one {N}{œÅ} D‚ÇÅ D‚ÇÇ D12 = ‚ü¶‚üß-monotone {N} G
  where G : (x : Var) ‚Üí (D‚ÇÅ ‚Ä¢ œÅ) x ‚äÜ (D‚ÇÇ ‚Ä¢ œÅ) x
        G zero = D12
        G (suc x) = Œª v z ‚Üí z


{- Denotations are continuous --------------------------------------------------}

infix 5 _‚äÜ‚Çë_
_‚äÜ‚Çë_ : Env ‚Üí Env ‚Üí Set
œÅ‚ÇÅ ‚äÜ‚Çë œÅ‚ÇÇ = ‚àÄ x ‚Üí œÅ‚ÇÅ x ‚äÜ œÅ‚ÇÇ x

‚äÜ‚Çë-trans : ‚àÄ{œÅ‚ÇÅ œÅ‚ÇÇ œÅ‚ÇÉ} ‚Üí œÅ‚ÇÅ ‚äÜ‚Çë œÅ‚ÇÇ ‚Üí œÅ‚ÇÇ ‚äÜ‚Çë œÅ‚ÇÉ ‚Üí œÅ‚ÇÅ ‚äÜ‚Çë œÅ‚ÇÉ
‚äÜ‚Çë-trans {œÅ‚ÇÅ}{œÅ‚ÇÇ}{œÅ‚ÇÉ} r12 r23 x = Œª d z ‚Üí r23 x d (r12 x d z)

{- environments whose codomain are finite nonempty sets -}
fin-env : Env ‚Üí Set
fin-env œÅ = ‚àÄ x ‚Üí Œ£[ E ‚àà List Value ] œÅ x ‚âÉ mem E √ó E ‚â¢ []

{- creates an environment that maps each variable x to
   a singleton set of some element in œÅ x.  -}
initial-fin-env : (œÅ : Env) ‚Üí (NE-œÅ : nonempty-env œÅ) ‚Üí Env
initial-fin-env œÅ NE-œÅ x
    with NE-œÅ x
... | ‚ü® v , v‚ààœÅx ‚ü© = ‚åà v ‚åâ

initial-fin : (œÅ : Env) ‚Üí (NE-œÅ : nonempty-env œÅ)
   ‚Üí fin-env (initial-fin-env œÅ NE-œÅ)
initial-fin œÅ NE-œÅ x
    with NE-œÅ x
... | ‚ü® v , v‚ààœÅx ‚ü© =
      ‚ü® v ‚à∑ [] ,
      ‚ü® ‚ü® (Œª {w refl ‚Üí (here refl)}) , (Œª {w (here refl) ‚Üí refl}) ‚ü© , (Œª ()) ‚ü© ‚ü©

initial-fin-‚äÜ : (œÅ : Env) ‚Üí (NE-œÅ : nonempty-env œÅ)
  ‚Üí initial-fin-env œÅ NE-œÅ ‚äÜ‚Çë œÅ
initial-fin-‚äÜ œÅ NE-œÅ x v v‚ààinitial
    with NE-œÅ x
... | ‚ü® w , w‚ààœÅx ‚ü© rewrite v‚ààinitial = w‚ààœÅx

extend-nonempty-env : ‚àÄ{œÅ}{X}
   ‚Üí nonempty-env œÅ  ‚Üí  nonempty X  ‚Üí  nonempty-env (X ‚Ä¢ œÅ)
extend-nonempty-env {œÅ} {X} NE-œÅ NE-X zero = NE-X
extend-nonempty-env {œÅ} {X} NE-œÅ V‚â¢[] (suc x) = NE-œÅ x

infix 6 _‚äî‚Çë_
_‚äî‚Çë_ : Env ‚Üí Env ‚Üí Env
(œÅ‚ÇÅ ‚äî‚Çë œÅ‚ÇÇ) x v = œÅ‚ÇÅ x v ‚äé œÅ‚ÇÇ x v

join-fin-env : ‚àÄ{œÅ‚ÇÅ œÅ‚ÇÇ}  ‚Üí fin-env œÅ‚ÇÅ  ‚Üí  fin-env œÅ‚ÇÇ  ‚Üí  fin-env (œÅ‚ÇÅ ‚äî‚Çë œÅ‚ÇÇ)
join-fin-env {œÅ‚ÇÅ}{œÅ‚ÇÇ} f1 f2 x
    with f1 x
... | ‚ü® E1 , ‚ü® œÅ‚ÇÅ=E1 , NE-E1 ‚ü© ‚ü©
    with f2 x
... | ‚ü® E2 , ‚ü® œÅ‚ÇÇ=E2 , NE-E2 ‚ü© ‚ü© =
    ‚ü® (E1 ++ E2) , ‚ü® ‚ü® G , (H {E1} Œª d z ‚Üí z) ‚ü© ,
      (Œª E12=[] ‚Üí NE-E1 (++-conicalÀ° E1 E2 E12=[])) ‚ü© ‚ü©
    where
    G : (v : Value) ‚Üí œÅ‚ÇÅ x v ‚äé œÅ‚ÇÇ x v ‚Üí mem (E1 ++ E2) v
    G v (inj‚ÇÅ œÅ1x) = ‚àà-++‚Å∫À° ((proj‚ÇÅ œÅ‚ÇÅ=E1) v œÅ1x)
    G v (inj‚ÇÇ œÅ2x) = ‚àà-++‚Å∫ ≥ E1 ((proj‚ÇÅ œÅ‚ÇÇ=E2) v œÅ2x)

    H : ‚àÄ{E} ‚Üí mem E ‚äÜ mem E1 ‚Üí mem (E ++ E2) ‚äÜ (Œª v ‚Üí œÅ‚ÇÅ x v ‚äé œÅ‚ÇÇ x v)
    H {[]} E<E1 v v‚ààE++E2 = inj‚ÇÇ ((proj‚ÇÇ œÅ‚ÇÇ=E2) v v‚ààE++E2)
    H {x ‚à∑ E} E<E1 .x (here refl) = inj‚ÇÅ ((proj‚ÇÇ œÅ‚ÇÅ=E1) x (E<E1 x (here refl)))
    H {x ‚à∑ E} E<E1 v (there v‚ààE++E2) =
       H (Œª v z ‚Üí E<E1 v (there z)) v v‚ààE++E2

{- single-env maps x to D and any other variable y to something in œÅ y. -}
single-env : Var ‚Üí ùí´ Value ‚Üí (œÅ : Env) ‚Üí (NE-œÅ : nonempty-env œÅ) ‚Üí Env
single-env x D œÅ NE-œÅ y
    with x ‚âü y
... | yes refl = D
... | no neq
    with NE-œÅ y
... | ‚ü® v , v‚ààœÅy ‚ü© = ‚åà v ‚åâ    

single-fin : ‚àÄ{v}{x}{œÅ}{NE-œÅ} ‚Üí fin-env (single-env x ‚åà v ‚åâ œÅ NE-œÅ)
single-fin {v}{x}{œÅ}{NE-œÅ} y
    with x ‚âü y
... | yes refl =
    ‚ü® v ‚à∑ [] ,
    ‚ü® ‚ü® (Œª { v‚ÇÅ refl ‚Üí (here refl)}) , (Œª{ v‚ÇÅ (here refl) ‚Üí refl}) ‚ü© , (Œª ()) ‚ü© ‚ü©
... | no neq
    with NE-œÅ y
... | ‚ü® w , w‚ààœÅy ‚ü© =
    ‚ü® w ‚à∑ [] ,
    ‚ü® ‚ü® (Œª { v‚ÇÅ refl ‚Üí here refl}) , (Œª { v‚ÇÅ (here refl) ‚Üí refl}) ‚ü© , (Œª ()) ‚ü© ‚ü©

single-‚äÜ : ‚àÄ{œÅ x v}{NE-œÅ : nonempty-env œÅ}
  ‚Üí  v ‚àà œÅ x  ‚Üí  single-env x ‚åà v ‚åâ œÅ NE-œÅ ‚äÜ‚Çë œÅ
single-‚äÜ {œÅ}{x}{v}{NE-œÅ} v‚ààœÅx y w sing 
    with x ‚âü y
... | yes refl rewrite sing = v‚ààœÅx
... | no neq
    with NE-œÅ y
... | ‚ü® u , u‚ààœÅy ‚ü© rewrite sing = u‚ààœÅy

v‚ààsingle[xv]x : ‚àÄ{v}{x}{œÅ}{NE-œÅ} ‚Üí v ‚àà single-env x ‚åà v ‚åâ œÅ NE-œÅ x
v‚ààsingle[xv]x {v}{x}
    with x ‚âü x
... | yes refl = refl
... | no neq = ‚ä•-elim (neq refl)

join-lub : ‚àÄ{œÅ œÅ‚ÇÅ œÅ‚ÇÇ} ‚Üí œÅ‚ÇÅ ‚äÜ‚Çë œÅ ‚Üí œÅ‚ÇÇ ‚äÜ‚Çë œÅ ‚Üí œÅ‚ÇÅ ‚äî‚Çë œÅ‚ÇÇ ‚äÜ‚Çë œÅ
join-lub {œÅ} {œÅ‚ÇÅ} {œÅ‚ÇÇ} œÅ‚ÇÅ‚äÜœÅ œÅ‚ÇÇ‚äÜœÅ x v (inj‚ÇÅ v‚ààœÅ‚ÇÅx) = œÅ‚ÇÅ‚äÜœÅ x v v‚ààœÅ‚ÇÅx
join-lub {œÅ} {œÅ‚ÇÅ} {œÅ‚ÇÇ} œÅ‚ÇÅ‚äÜœÅ œÅ‚ÇÇ‚äÜœÅ x v (inj‚ÇÇ v‚ààœÅ‚ÇÇx) = œÅ‚ÇÇ‚äÜœÅ x v v‚ààœÅ‚ÇÇx

join-‚äÜ-left : ‚àÄ{œÅ‚ÇÅ œÅ‚ÇÇ} ‚Üí œÅ‚ÇÅ ‚äÜ‚Çë œÅ‚ÇÅ ‚äî‚Çë œÅ‚ÇÇ
join-‚äÜ-left {œÅ‚ÇÅ}{œÅ‚ÇÇ} = Œª x d z ‚Üí inj‚ÇÅ z

join-‚äÜ-right : ‚àÄ{œÅ‚ÇÅ œÅ‚ÇÇ} ‚Üí œÅ‚ÇÇ ‚äÜ‚Çë œÅ‚ÇÅ ‚äî‚Çë œÅ‚ÇÇ
join-‚äÜ-right {œÅ‚ÇÅ}{œÅ‚ÇÇ} = Œª x d z ‚Üí inj‚ÇÇ z

{- the main lemmas (mutually recursive) -}
‚ü¶‚üß-continuous-env : ‚àÄ{M : Term}{œÅ}{v}{NE-œÅ : nonempty-env œÅ}
  ‚Üí v ‚àà ‚ü¶ M ‚üß œÅ
  ‚Üí Œ£[ œÅ‚Ä≤ ‚àà Env ] fin-env œÅ‚Ä≤  √ó  œÅ‚Ä≤ ‚äÜ‚Çë œÅ  √ó  v ‚àà ‚ü¶ M ‚üß œÅ‚Ä≤
‚ü¶‚üß-continuous-‚äÜ : ‚àÄ{M : Term}{œÅ}{E}{NE-œÅ : nonempty-env œÅ}
  ‚Üí mem E ‚äÜ ‚ü¶ M ‚üß œÅ
  ‚Üí Œ£[ œÅ‚Ä≤ ‚àà Env ] fin-env œÅ‚Ä≤  √ó  œÅ‚Ä≤ ‚äÜ‚Çë œÅ  √ó  mem E ‚äÜ ‚ü¶ M ‚üß œÅ‚Ä≤

‚ü¶‚üß-continuous-env {` x}{œÅ}{v}{NE-œÅ} v‚àà‚ü¶x‚üßœÅ =
   ‚ü® (single-env x ‚åà v ‚åâ œÅ NE-œÅ) , ‚ü® single-fin {v}{x} , ‚ü® single-‚äÜ v‚àà‚ü¶x‚üßœÅ ,
     v‚ààsingle[xv]x {v}{x} ‚ü© ‚ü© ‚ü©
‚ü¶‚üß-continuous-env {L ¬∑ M}{œÅ}{w}{NE-œÅ} ‚ü® V , ‚ü® V‚Ü¶w‚àà‚ü¶L‚üßœÅ , ‚ü® V‚äÜ‚ü¶M‚üßœÅ , V‚â¢[] ‚ü© ‚ü© ‚ü©
    with ‚ü¶‚üß-continuous-env{L}{œÅ}{V ‚Ü¶ w}{NE-œÅ} V‚Ü¶w‚àà‚ü¶L‚üßœÅ
... | ‚ü® œÅ‚ÇÅ , ‚ü® fœÅ‚ÇÅ , ‚ü® œÅ‚ÇÅ‚äÜœÅ , V‚Ü¶w‚àà‚ü¶L‚üßœÅ‚ÇÅ ‚ü© ‚ü© ‚ü© = G
    where
    G : Œ£[ œÅ‚Ä≤ ‚àà Env ] fin-env œÅ‚Ä≤  √ó  œÅ‚Ä≤ ‚äÜ‚Çë œÅ  √ó  w ‚àà ‚ü¶ L ¬∑ M ‚üß œÅ‚Ä≤
    G   with ‚ü¶‚üß-continuous-‚äÜ{M}{œÅ = œÅ}{NE-œÅ = NE-œÅ} V‚äÜ‚ü¶M‚üßœÅ
    ... | ‚ü® œÅ‚ÇÇ , ‚ü® fœÅ‚ÇÇ , ‚ü® œÅ‚ÇÇ‚äÜœÅ , V‚äÜ‚ü¶M‚üßœÅ‚ÇÇ ‚ü© ‚ü© ‚ü© =
          ‚ü® œÅ‚ÇÉ , ‚ü® join-fin-env fœÅ‚ÇÅ fœÅ‚ÇÇ , ‚ü® join-lub œÅ‚ÇÅ‚äÜœÅ œÅ‚ÇÇ‚äÜœÅ ,
            w‚àà‚ü¶L¬∑M‚üßœÅ‚ÇÉ ‚ü© ‚ü© ‚ü©
        where
        œÅ‚ÇÉ = œÅ‚ÇÅ ‚äî‚Çë œÅ‚ÇÇ
        œÅ‚ÇÅ‚äÜœÅ‚ÇÉ = Œª x v z ‚Üí inj‚ÇÅ z
        V‚Ü¶w‚àà‚ü¶L‚üßœÅ‚ÇÉ : V ‚Ü¶ w ‚àà ‚ü¶ L ‚üß œÅ‚ÇÉ
        V‚Ü¶w‚àà‚ü¶L‚üßœÅ‚ÇÉ = ‚ü¶‚üß-monotone{L}{œÅ‚ÇÅ}{œÅ‚ÇÉ} œÅ‚ÇÅ‚äÜœÅ‚ÇÉ (V ‚Ü¶ w) V‚Ü¶w‚àà‚ü¶L‚üßœÅ‚ÇÅ
        œÅ‚ÇÇ‚äÜœÅ‚ÇÑ = Œª x v z ‚Üí inj‚ÇÇ z
        V‚äÜ‚ü¶M‚üßœÅ‚ÇÉ : mem V ‚äÜ ‚ü¶ M ‚üß œÅ‚ÇÉ
        V‚äÜ‚ü¶M‚üßœÅ‚ÇÉ v v‚ààV = ‚ü¶‚üß-monotone{M}{œÅ‚ÇÇ}{œÅ‚ÇÉ} œÅ‚ÇÇ‚äÜœÅ‚ÇÑ v (V‚äÜ‚ü¶M‚üßœÅ‚ÇÇ v v‚ààV)
        w‚àà‚ü¶L¬∑M‚üßœÅ‚ÇÉ : w ‚àà ‚ü¶ L ¬∑ M ‚üß œÅ‚ÇÉ
        w‚àà‚ü¶L¬∑M‚üßœÅ‚ÇÉ = ‚ü® V , ‚ü® V‚Ü¶w‚àà‚ü¶L‚üßœÅ‚ÇÉ , ‚ü® V‚äÜ‚ü¶M‚üßœÅ‚ÇÉ , V‚â¢[] ‚ü© ‚ü© ‚ü©
‚ü¶‚üß-continuous-env {∆õ N}{œÅ}{V ‚Ü¶ w}{NE-œÅ} ‚ü® w‚àà‚ü¶N‚üßV‚Ä¢œÅ , V‚â¢[] ‚ü©
    with ‚ü¶‚üß-continuous-env{N}{mem V ‚Ä¢ œÅ}{w}
             {extend-nonempty-env NE-œÅ (E‚â¢[]‚áínonempty-mem V‚â¢[])} w‚àà‚ü¶N‚üßV‚Ä¢œÅ
... | ‚ü® œÅ‚Ä≤ , ‚ü® fœÅ‚Ä≤ , ‚ü® œÅ‚Ä≤‚äÜV‚Ä¢œÅ , w‚àà‚ü¶N‚üßV‚Ä¢œÅ‚Ä≤ ‚ü© ‚ü© ‚ü© =    
    ‚ü® (Œª x ‚Üí œÅ‚Ä≤ (suc x)) , ‚ü® (Œª x ‚Üí fœÅ‚Ä≤ (suc x)) , ‚ü® (Œª x ‚Üí œÅ‚Ä≤‚äÜV‚Ä¢œÅ (suc x)) ,
    ‚ü® ‚ü¶‚üß-monotone{N}{œÅ‚Ä≤}{mem V ‚Ä¢ (Œª z ‚Üí œÅ‚Ä≤ (suc z))} G w w‚àà‚ü¶N‚üßV‚Ä¢œÅ‚Ä≤ , V‚â¢[] ‚ü© ‚ü© ‚ü© ‚ü©
    where G : (x : Var) ‚Üí œÅ‚Ä≤ x ‚äÜ (mem V ‚Ä¢ (Œª x‚ÇÅ ‚Üí œÅ‚Ä≤ (suc x‚ÇÅ))) x
          G zero v v‚ààœÅ‚Ä≤x = œÅ‚Ä≤‚äÜV‚Ä¢œÅ 0 v v‚ààœÅ‚Ä≤x
          G (suc x) v v‚ààœÅ‚Ä≤x = v‚ààœÅ‚Ä≤x
‚ü¶‚üß-continuous-env {∆õ N}{œÅ}{ŒΩ}{NE-œÅ} _ =
    ‚ü® initial-fin-env œÅ NE-œÅ , ‚ü® initial-fin œÅ NE-œÅ , ‚ü® initial-fin-‚äÜ œÅ NE-œÅ ,
      tt ‚ü© ‚ü© ‚ü©
‚ü¶‚üß-continuous-env {$ P k}{œÅ}{v}{NE-œÅ} v‚àà‚ü¶M‚üßœÅ =
  ‚ü® initial-fin-env œÅ NE-œÅ , ‚ü® initial-fin œÅ NE-œÅ , ‚ü® initial-fin-‚äÜ œÅ NE-œÅ ,
    v‚àà‚ü¶M‚üßœÅ ‚ü© ‚ü© ‚ü©

‚ü¶‚üß-continuous-‚äÜ {M}{œÅ}{[]}{NE-œÅ} []‚äÜ‚ü¶M‚üßœÅ =
  ‚ü® initial-fin-env œÅ NE-œÅ , ‚ü® initial-fin œÅ NE-œÅ , ‚ü® initial-fin-‚äÜ œÅ NE-œÅ ,
    (Œª d ()) ‚ü© ‚ü© ‚ü©
‚ü¶‚üß-continuous-‚äÜ {M}{œÅ}{v ‚à∑ E}{NE-œÅ} v‚à∑E‚äÜ‚ü¶M‚üßœÅ
    with ‚ü¶‚üß-continuous-‚äÜ {M}{œÅ}{E}{NE-œÅ} Œª d z ‚Üí v‚à∑E‚äÜ‚ü¶M‚üßœÅ d (there z)
... | ‚ü® œÅ‚ÇÅ , ‚ü® fœÅ‚ÇÅ , ‚ü® œÅ‚ÇÅ‚äÜœÅ , E‚äÜ‚ü¶M‚üßœÅ‚ÇÅ ‚ü© ‚ü© ‚ü©
    with ‚ü¶‚üß-continuous-env {M}{œÅ}{v}{NE-œÅ} (v‚à∑E‚äÜ‚ü¶M‚üßœÅ v (here refl))
... | ‚ü® œÅ‚ÇÇ , ‚ü® fœÅ‚ÇÇ , ‚ü® œÅ‚ÇÇ‚äÜœÅ , v‚àà‚ü¶M‚üßœÅ‚ÇÇ ‚ü© ‚ü© ‚ü© =
    ‚ü® œÅ‚ÇÉ , ‚ü® (join-fin-env fœÅ‚ÇÅ fœÅ‚ÇÇ) , ‚ü® (join-lub œÅ‚ÇÅ‚äÜœÅ œÅ‚ÇÇ‚äÜœÅ) ,
    G ‚ü© ‚ü© ‚ü©
    where
    œÅ‚ÇÉ = œÅ‚ÇÅ ‚äî‚Çë œÅ‚ÇÇ
    G : (d : Value) ‚Üí mem (v ‚à∑ E) d ‚Üí d ‚àà ‚ü¶ M ‚üß œÅ‚ÇÉ
    G d (here refl) = ‚ü¶‚üß-monotone {M}{œÅ‚ÇÇ}{œÅ‚ÇÉ} join-‚äÜ-right v v‚àà‚ü¶M‚üßœÅ‚ÇÇ
    G d (there m) = ‚ü¶‚üß-monotone {M}{œÅ‚ÇÅ}{œÅ‚ÇÉ} join-‚äÜ-left d (E‚äÜ‚ü¶M‚üßœÅ‚ÇÅ d m)

‚ü¶‚üß-continuous : ‚àÄ{N : Term}{œÅ}{NE-œÅ : nonempty-env œÅ}
  ‚Üí continuous (Œª D ‚Üí ‚ü¶ N ‚üß (D ‚Ä¢ œÅ))
‚ü¶‚üß-continuous {N}{œÅ}{NE-œÅ} X E E‚äÜ‚ü¶N‚üßX‚Ä¢œÅ NE-X
    with ‚ü¶‚üß-continuous-‚äÜ {N}{X ‚Ä¢ œÅ}{E}{extend-nonempty-env NE-œÅ NE-X} E‚äÜ‚ü¶N‚üßX‚Ä¢œÅ
... | ‚ü® œÅ‚Ä≤ , ‚ü® fœÅ‚Ä≤ , ‚ü® œÅ‚Ä≤‚äÜX‚Ä¢œÅ , E‚äÜ‚ü¶N‚üßœÅ‚Ä≤ ‚ü© ‚ü© ‚ü©
    with fœÅ‚Ä≤ 0
... | ‚ü® D , ‚ü® œÅ‚Ä≤x=D , NE-D ‚ü© ‚ü© =
    ‚ü® D , ‚ü® (Œª v v‚ààD ‚Üí œÅ‚Ä≤‚äÜX‚Ä¢œÅ 0 v ((proj‚ÇÇ œÅ‚Ä≤x=D) v v‚ààD)) ,
    ‚ü® (Œª d d‚ààE ‚Üí ‚ü¶‚üß-monotone {N}{œÅ‚Ä≤}{mem D ‚Ä¢ œÅ} G d (E‚äÜ‚ü¶N‚üßœÅ‚Ä≤ d d‚ààE)) , NE-D ‚ü© ‚ü© ‚ü©
    where
    G : (x : Var) ‚Üí œÅ‚Ä≤ x ‚äÜ (mem D ‚Ä¢ œÅ) x
    G zero d d‚ààœÅ0 = (proj‚ÇÅ œÅ‚Ä≤x=D) d d‚ààœÅ0 
    G (suc x) d m = œÅ‚Ä≤‚äÜX‚Ä¢œÅ (suc x) d m

ISWIM-Œõ-‚ñ™-id : ‚àÄ {N : Term}{œÅ}{NE-œÅ : nonempty-env œÅ}{X : ùí´ Value}
  ‚Üí nonempty X
  ‚Üí (Œõ Œª X ‚Üí ‚ü¶ N ‚üß (X ‚Ä¢ œÅ)) ‚ñ™ X ‚âÉ ‚ü¶ N ‚üß (X ‚Ä¢ œÅ)
ISWIM-Œõ-‚ñ™-id {N}{œÅ}{NE-œÅ}{X} NE-X =
    Œõ-‚ñ™-id {Œª D ‚Üí ‚ü¶ N ‚üß (D ‚Ä¢ œÅ)} (‚ü¶‚üß-continuous{N}{œÅ}{NE-œÅ}) (‚ü¶‚üß-monotone-one{N})
        NE-X

{- Primitive Abstraction followed by Application is the identity ---------------}

‚Ñò-‚ñ™-‚âÉ : ‚àÄ{B}{P}{f}{k}  ‚Üí  (‚Ñò (B ‚áí P) f) ‚ñ™ (‚Ñò (base B) k) ‚âÉ ‚Ñò P (f k)
‚Ñò-‚ñ™-‚âÉ {B}{P}{f}{k} = ‚ü® fwd , back ‚ü©
  where
  fwd : ‚Ñò (B ‚áí P) f ‚ñ™ ‚Ñò (base B) k ‚äÜ ‚Ñò P (f k)
  fwd w ‚ü® V , ‚ü® ‚ü® k‚Ä≤ , ‚ü® refl , w‚ààfk‚Ä≤ ‚ü© ‚ü© , ‚ü® k‚Ä≤‚ààpk , _ ‚ü© ‚ü© ‚ü©
      with k‚Ä≤‚ààpk (const k‚Ä≤) (here refl)
  ... | pkk‚Ä≤ rewrite k‚Ä≤‚àà‚Ñòk‚áík‚Ä≤‚â°k pkk‚Ä≤ = w‚ààfk‚Ä≤
  back : ‚Ñò P (f k) ‚äÜ ‚Ñò (B ‚áí P) f ‚ñ™ ‚Ñò (base B) k
  back w w‚ààfk = ‚ü® (const k ‚à∑ []) , ‚ü® ‚ü® k , ‚ü® refl , w‚ààfk ‚ü© ‚ü© ,
                ‚ü® (Œª {d (here refl) ‚Üí k‚àà‚Ñòk}) , (Œª ()) ‚ü© ‚ü© ‚ü©

{- Soundness of Reduction with respect to Denotations --------------------------}

‚ü¶‚üß‚Äî‚Üí : ‚àÄ{M N : Term}{œÅ : Var ‚Üí ùí´ Value} {NE-œÅ : nonempty-env œÅ}
   ‚Üí M ‚Äî‚Üí N
   ‚Üí ‚ü¶ M ‚üß œÅ ‚âÉ ‚ü¶ N ‚üß œÅ
‚ü¶‚üß‚Äî‚Üí {L ¬∑ M} {L‚Ä≤ ¬∑ M} {œÅ}{NE-œÅ} (Œæ‚ÇÅ-rule L‚Äî‚ÜíL‚Ä≤) =
    let IH = ‚ü¶‚üß‚Äî‚Üí{œÅ = œÅ}{NE-œÅ} L‚Äî‚ÜíL‚Ä≤ in
    ‚ü¶ L ¬∑ M ‚üß œÅ              ‚âÉ‚ü®‚ü©
    (‚ü¶ L ‚üß œÅ) ‚ñ™ (‚ü¶ M ‚üß œÅ)    ‚âÉ‚ü® ‚ñ™-cong IH ‚âÉ-refl ‚ü©
    (‚ü¶ L‚Ä≤ ‚üß œÅ) ‚ñ™ (‚ü¶ M ‚üß œÅ)   ‚âÉ‚ü®‚ü©
    ‚ü¶ L‚Ä≤ ¬∑ M ‚üß œÅ             ‚àé where open ‚âÉ-Reasoning  
‚ü¶‚üß‚Äî‚Üí {V ¬∑ M} {.(_ ¬∑ _)} {œÅ}{NE-œÅ} (Œæ‚ÇÇ-rule {M‚Ä≤ = M‚Ä≤} v M‚Äî‚ÜíM‚Ä≤) =
    let IH = ‚ü¶‚üß‚Äî‚Üí{œÅ = œÅ}{NE-œÅ} M‚Äî‚ÜíM‚Ä≤ in
    ‚ü¶ V ¬∑ M ‚üß œÅ              ‚âÉ‚ü®‚ü©
    (‚ü¶ V ‚üß œÅ) ‚ñ™ (‚ü¶ M ‚üß œÅ)    ‚âÉ‚ü® ‚ñ™-cong (‚âÉ-refl{D = ‚ü¶ V ‚üß œÅ}) IH ‚ü©
    (‚ü¶ V ‚üß œÅ) ‚ñ™ (‚ü¶ M‚Ä≤ ‚üß œÅ)   ‚âÉ‚ü®‚ü©
    ‚ü¶ V ¬∑ M‚Ä≤ ‚üß œÅ             ‚àé where open ‚âÉ-Reasoning  
‚ü¶‚üß‚Äî‚Üí {∆õ N ¬∑ V} {_} {œÅ} {NE-œÅ} (Œ≤-rule v) =
    ‚ü¶ ∆õ N ¬∑ V ‚üß œÅ                         ‚âÉ‚ü®‚ü©
    (Œõ (Œª D ‚Üí ‚ü¶ N ‚üß (D ‚Ä¢ œÅ))) ‚ñ™ (‚ü¶ V ‚üß œÅ) ‚âÉ‚ü® ISWIM-Œõ-‚ñ™-id {N}{œÅ}{NE-œÅ}
                                                   (value-nonempty NE-œÅ v) ‚ü©
    ‚ü¶ N ‚üß (‚ü¶ V ‚üß œÅ ‚Ä¢ œÅ)             ‚âÉ‚ü® ‚âÉ-reflexive (sym (‚ü¶‚üß-subst {N} {V} {œÅ})) ‚ü©
    ‚ü¶ N [ V ] ‚üß œÅ                   ‚àé where open ‚âÉ-Reasoning
‚ü¶‚üß‚Äî‚Üí {($ (B ‚áí P) f ¬∑ $ (base B) k)} {_} {œÅ} Œ¥-rule =
    ‚ü¶ $ (B ‚áí P) f ¬∑ $ (base B) k ‚üß œÅ        ‚âÉ‚ü®‚ü©
    (‚Ñò (B ‚áí P) f) ‚ñ™ (‚Ñò (base B) k)         ‚âÉ‚ü® ‚Ñò-‚ñ™-‚âÉ {B}{P} ‚ü©
    ‚ü¶ $ P (f k) ‚üß œÅ                         ‚àé where open ‚âÉ-Reasoning

soundness : ‚àÄ {M N : Term} {œÅ : Env}{NE-œÅ : nonempty-env œÅ}
  ‚Üí M ‚Äî‚Ü† N
    -------------------
  ‚Üí ‚ü¶ M ‚üß œÅ ‚âÉ ‚ü¶ N ‚üß œÅ
soundness {M}{_}{œÅ} (M ‚ñ°) =
    ‚ü¶ M ‚üß œÅ ‚âÉ‚ü®‚ü© ‚ü¶ M ‚üß œÅ ‚àé where open ‚âÉ-Reasoning
soundness {M}{N}{œÅ}{NE-œÅ} (_‚Äî‚Üí‚ü®_‚ü©_ M {M = M‚Ä≤} M‚Äî‚ÜíM‚Ä≤ M‚Ä≤‚Äî‚Ü†N) =
    ‚ü¶ M ‚üß œÅ      ‚âÉ‚ü® ‚ü¶‚üß‚Äî‚Üí{œÅ = œÅ}{NE-œÅ} M‚Äî‚ÜíM‚Ä≤ ‚ü© 
    ‚ü¶ M‚Ä≤ ‚üß œÅ     ‚âÉ‚ü® soundness{œÅ = œÅ}{NE-œÅ} M‚Ä≤‚Äî‚Ü†N ‚ü© 
    ‚ü¶ N ‚üß œÅ      ‚àé where open ‚âÉ-Reasoning

{- Adequacy of Denotations -----------------------------------------------------}

open import EvalISWIM {- the big-step semantics of ISWIM -}

{- Relate denotational values to big-step values -}
ùïç : Value ‚Üí Val ‚Üí Set
ùïçs : List Value ‚Üí Val ‚Üí Set

ùïç (const {B} k) (val-const {P} p) = ‚Ñò P p (const {B} k)
ùïç (const {B} k) (val-clos N Œ≥) = False
ùïç (const {B} k) bogus = False
ùïç (V ‚Ü¶ w) (val-const {P} f) = ‚Ñò P f (V ‚Ü¶ w)
ùïç (V ‚Ü¶ w) (val-clos N Œ≥) =
    (‚àÄ{c : Val} ‚Üí ùïçs V c ‚Üí Œ£[ c' ‚àà Val ] (Œ≥ ,' c) ‚ä¢ N ‚áì c'  √ó  ùïç w c')
ùïç (V ‚Ü¶ w) bogus = False
ùïç ŒΩ (val-const {base B} k) = False
ùïç ŒΩ (val-const {B ‚áí P} f) = True
ùïç ŒΩ (val-clos N Œ≥) = True
ùïç ŒΩ bogus = False

ùïçs [] c = True
ùïçs (v ‚à∑ V) c = ùïç v c √ó ùïçs V c

ùïçkc‚áíc‚â°k : ‚àÄ{B}{k}{c}
  ‚Üí ùïç (const {B} k) c
  ‚Üí c ‚â° val-const {base B} k
ùïçkc‚áíc‚â°k {B} {k} {val-const {P} k‚Ä≤} ùïçkc
    with k‚Ä≤‚àà‚Ñòk‚áíP‚â°B {P}{B} ùïçkc
... | refl
    with k‚Ä≤‚àà‚Ñòk‚áík‚Ä≤‚â°k ùïçkc
... | refl = refl

‚Ñò‚áíùïç : ‚àÄ{P}{k}{w}
   ‚Üí ‚Ñò P k w
   ‚Üí ùïç w (val-const {P} k)
‚Ñò‚áíùïç {P} {k} {const x} w‚ààk = w‚ààk
‚Ñò‚áíùïç {P} {k} {x ‚Ü¶ w} w‚ààk = w‚ààk
‚Ñò‚áíùïç {B ‚áí P} {k} {ŒΩ} w‚ààk = tt

V‚äÜùïçc‚áíùïçsV : ‚àÄ{V}{c} ‚Üí (‚àÄ u ‚Üí mem V u ‚Üí ùïç u c) ‚Üí ùïçs V c
V‚äÜùïçc‚áíùïçsV {[]} V‚äÜùïçc = tt
V‚äÜùïçc‚áíùïçsV {v ‚à∑ V} V‚äÜùïçc =
    ‚ü® V‚äÜùïçc v (here refl) , V‚äÜùïçc‚áíùïçsV (Œª u z ‚Üí V‚äÜùïçc u (there z)) ‚ü©

ùïçsV‚áíV‚äÜùïçc : ‚àÄ{V}{c} ‚Üí ùïçs V c ‚Üí (‚àÄ u ‚Üí mem V u ‚Üí ùïç u c)
ùïçsV‚áíV‚äÜùïçc {[]} {c} vs u ()
ùïçsV‚áíV‚äÜùïçc {x ‚à∑ V} {c} ‚ü® ùïçc , ùïçsc ‚ü© .x (here refl) = ùïçc
ùïçsV‚áíV‚äÜùïçc {x ‚à∑ V} {c} ‚ü® ùïçc , ùïçsc ‚ü© u (there u‚ààV) = ùïçsV‚áíV‚äÜùïçc ùïçsc u u‚ààV

{- Relate denotational environments to big-step environments -}
data ùîæ : Env ‚Üí ValEnv ‚Üí Set‚ÇÅ where
  ùîæ-‚àÖ : ‚àÄ {œÅ} ‚Üí ùîæ œÅ ‚àÖ'
  ùîæ-ext : ‚àÄ{Œ≥ : Env}{Œ≥' : ValEnv}{D c} ‚Üí ùîæ Œ≥ Œ≥' ‚Üí (‚àÄ v ‚Üí v ‚àà D ‚Üí ùïç v c)
     ‚Üí ùîæ (D ‚Ä¢ Œ≥) (Œ≥' ,' c)

ùîæ‚áíùïç : ‚àÄ {œÅ : Env}{Œ≥ : ValEnv}{x}{lt : x < length Œ≥}{v}
   ‚Üí ùîæ œÅ Œ≥  ‚Üí  v ‚àà œÅ x  ‚Üí  ùïç v (nth Œ≥ x)
ùîæ‚áíùïç {.(_ ‚Ä¢ _)} {.(_ ‚à∑ _)} {zero} {s‚â§s lt} {v} (ùîæ-ext ùîæœÅŒ≥ D‚äÜV) v‚ààD = D‚äÜV v v‚ààD
ùîæ‚áíùïç {.(_ ‚Ä¢ _)} {.(_ ‚à∑ _)} {suc x} {s‚â§s lt} {v} (ùîæ-ext ùîæœÅŒ≥ D‚äÜV) v‚ààœÅx =
  ùîæ‚áíùïç{lt = lt} ùîæœÅŒ≥ v‚ààœÅx

¬¨ùïç[bogus] : ‚àÄ v ‚Üí ¬¨ ùïç v bogus
¬¨ùïç[bogus] (const k) x = x
¬¨ùïç[bogus] (V ‚Ü¶ w) x = x

‚Ñòpv‚áíùïçvp : ‚àÄ {P}{p}{v} ‚Üí  ‚Ñò P p v  ‚Üí  ùïç v (val-const {P} p)
‚Ñòpv‚áíùïçvp {v = const k} ‚Ñòpv = ‚Ñòpv
‚Ñòpv‚áíùïçvp {v = V ‚Ü¶ w} ‚Ñòpv = ‚Ñòpv
‚Ñòpv‚áíùïçvp {B ‚áí P} {p} {ŒΩ} ‚Ñòpv = tt

{- the main lemma -}
‚ü¶‚üß‚áí‚áì : ‚àÄ{M : Term}{Œ≥}{wfM : WF (length Œ≥) M}{œÅ}{v}
   ‚Üí ùîæ œÅ Œ≥  ‚Üí  v ‚àà ‚ü¶ M ‚üß œÅ
   ‚Üí Œ£[ c ‚àà Val ] Œ≥ ‚ä¢ M ‚áì c  √ó  (‚àÄ u ‚Üí u ‚àà ‚ü¶ M ‚üß œÅ ‚Üí ùïç u c)
‚ü¶‚üß‚áí‚áì {` x}{Œ≥}{WF-var ‚àãx lt}{œÅ}{v} ùîæœÅŒ≥ v‚àà‚ü¶M‚üßœÅ =
    let lt' = subst (Œª ‚ñ° ‚Üí x < ‚ñ°) (ISWIM.ASTMod.len-mk-list (length Œ≥)) lt in
   ‚ü® nth Œ≥ x , ‚ü® ‚áì-var , (Œª v v‚ààœÅx ‚Üí ùîæ‚áíùïç{lt = lt'} ùîæœÅŒ≥ v‚ààœÅx) ‚ü© ‚ü©
‚ü¶‚üß‚áí‚áì {L ¬∑ M}{Œ≥}{WF-op (WF-cons (WF-ast wfL) (WF-cons (WF-ast wfM) WF-nil)) _}{œÅ}
    {w} ùîæœÅŒ≥ w‚ààLMœÅ = G
    where
    Part1 : ‚àÄ{L}{M}{œÅ}{w}{wfL}{wfM}
      ‚Üí ùîæ œÅ Œ≥  ‚Üí  w ‚àà ‚ü¶ L ¬∑ M ‚üß œÅ
      ‚Üí Œ£[ c ‚àà Val ] Œ≥ ‚ä¢ L ¬∑ M ‚áì c √ó ùïç w c
    Part2 : ‚àÄ{c‚ÇÅ c‚ÇÇ}{L M}{Œ≥}{V w}
       ‚Üí Œ≥ ‚ä¢ L ‚áì c‚ÇÅ  ‚Üí  ùïç (V ‚Ü¶ w) c‚ÇÅ
       ‚Üí Œ≥ ‚ä¢ M ‚áì c‚ÇÇ  ‚Üí  ùïçs V c‚ÇÇ
       ‚Üí Œ£[ c ‚àà Val ] Œ≥ ‚ä¢ L ¬∑ M ‚áì c √ó ùïç w c
       
    Part1 {L}{M}{œÅ}{w}{wfL}{wfM} ùîæœÅŒ≥ ‚ü® V , ‚ü® V‚Ü¶w‚àà‚ü¶L‚üßœÅ , ‚ü® V‚äÜ‚ü¶M‚üßœÅ , V‚â¢[] ‚ü© ‚ü© ‚ü© 
        with V
    ... | [] = ‚ä•-elim (V‚â¢[] refl)    
    ... | v ‚à∑ V‚Ä≤
        with ‚ü¶‚üß‚áí‚áì {L}{Œ≥}{wfL}{œÅ}{(v ‚à∑ V‚Ä≤) ‚Ü¶ w} ùîæœÅŒ≥ V‚Ü¶w‚àà‚ü¶L‚üßœÅ
    ... | ‚ü® c‚ÇÅ , ‚ü® L‚áìc‚ÇÅ , ‚ü¶L‚üß‚äÜùïçc‚ÇÅ ‚ü© ‚ü© 
        with ‚ü¶‚üß‚áí‚áì {M}{Œ≥}{wfM}{œÅ}{v} ùîæœÅŒ≥ (V‚äÜ‚ü¶M‚üßœÅ v (here refl))
    ... | ‚ü® c‚ÇÇ , ‚ü® M‚áìc‚ÇÇ , ‚ü¶M‚üß‚äÜùïçc‚ÇÇ ‚ü© ‚ü© =
        Part2 L‚áìc‚ÇÅ ùïçVwc‚ÇÅ M‚áìc‚ÇÇ ùïçsc‚ÇÇ
        where
        ùïçVwc‚ÇÅ : ùïç ((v ‚à∑ V‚Ä≤) ‚Ü¶ w) c‚ÇÅ
        ùïçVwc‚ÇÅ = ‚ü¶L‚üß‚äÜùïçc‚ÇÅ ((v ‚à∑ V‚Ä≤) ‚Ü¶ w) V‚Ü¶w‚àà‚ü¶L‚üßœÅ
        ùïçsc‚ÇÇ : ùïçs (v ‚à∑ V‚Ä≤) c‚ÇÇ
        ùïçsc‚ÇÇ = ‚ü® (‚ü¶M‚üß‚äÜùïçc‚ÇÇ v (V‚äÜ‚ü¶M‚üßœÅ v (here refl))) ,
                 (V‚äÜùïçc‚áíùïçsV (Œª u u‚ààV‚Ä≤ ‚Üí ‚ü¶M‚üß‚äÜùïçc‚ÇÇ u (V‚äÜ‚ü¶M‚üßœÅ u (there u‚ààV‚Ä≤)) )) ‚ü©
    Part2 {val-const {B ‚áí P} f}{c‚ÇÇ}{L}{M}{Œ≥}{V}{w}
        L‚áìc‚ÇÅ ‚ü® k , ‚ü® refl , w‚ààfk ‚ü© ‚ü© M‚áì ‚ü® ùïçkc‚ÇÇ , _ ‚ü© 
           rewrite ùïçkc‚áíc‚â°k {B}{k}{c‚ÇÇ} ùïçkc‚ÇÇ =
       ‚ü® (val-const {P} (f k)) , ‚ü® (‚áì-prim L‚áìc‚ÇÅ M‚áì) , ‚Ñò‚áíùïç {P} w‚ààfk ‚ü© ‚ü©
    Part2 {val-clos N Œ≥‚Ä≤{wfN}}{c‚ÇÇ}{L}{M}{Œ≥}{V}{w} L‚áìc‚ÇÅ ùïçVwc‚ÇÅ M‚áì ùïçsVc‚ÇÇ
       with ùïçVwc‚ÇÅ {c‚ÇÇ} ùïçsVc‚ÇÇ
    ... | ‚ü® c‚ÇÉ , ‚ü® N‚áìc‚ÇÉ , ùïçwc‚ÇÉ ‚ü© ‚ü© =
        ‚ü® c‚ÇÉ , ‚ü® (‚áì-app{wf = ISWIM.ASTMod.WF-rel N wfN} L‚áìc‚ÇÅ M‚áì N‚áìc‚ÇÉ) , ùïçwc‚ÇÉ ‚ü© ‚ü©
          
    G : Œ£[ c ‚àà Val ] Œ≥ ‚ä¢ L ¬∑ M ‚áì c  √ó  (‚àÄ u ‚Üí u ‚àà ‚ü¶ L ¬∑ M ‚üß œÅ ‚Üí ùïç u c)
    G   with Part1{L}{M}{wfL = wfL}{wfM} ùîæœÅŒ≥ w‚ààLMœÅ
    ... | ‚ü® c , ‚ü® LM‚áìc , ùïçwc ‚ü© ‚ü© = ‚ü® c , ‚ü® LM‚áìc , H ‚ü© ‚ü©
        where
        H : ‚àÄ u ‚Üí u ‚àà ‚ü¶ L ¬∑ M ‚üß œÅ ‚Üí ùïç u c
        H u u‚ààLM
            with Part1{L}{M}{wfL = wfL}{wfM} ùîæœÅŒ≥ u‚ààLM
        ... | ‚ü® c‚Ä≤ , ‚ü® LM‚áìc‚Ä≤ , ùïçwc‚Ä≤ ‚ü© ‚ü© rewrite ‚áì-determ LM‚áìc‚Ä≤ LM‚áìc = ùïçwc‚Ä≤
‚ü¶‚üß‚áí‚áì {∆õ N}{Œ≥}{WF-op (WF-cons (WF-bind (WF-ast wfN)) WF-nil) _}{œÅ}{v}
    ùîæœÅŒ≥ v‚àà‚ü¶M‚üßœÅ =
    ‚ü® (val-clos N Œ≥ {wfN}) , ‚ü® ‚áì-lam {wf = wfN} , G ‚ü© ‚ü©
    where
    G : (u : Value) ‚Üí u ‚àà ‚ü¶ ∆õ N ‚üß œÅ ‚Üí ùïç u (val-clos N Œ≥ {wfN})
    G ŒΩ u‚àà∆õN = tt
    G (V ‚Ü¶ w) ‚ü® w‚àà‚ü¶N‚üß[V‚Ä¢œÅ] , V‚â†[] ‚ü© {c} ùïçsVc
        with ‚ü¶‚üß‚áí‚áì {N}{c ‚à∑ Œ≥}{wfN}{mem V ‚Ä¢ œÅ}{w}
                   (ùîæ-ext{c = c} ùîæœÅŒ≥ (ùïçsV‚áíV‚äÜùïçc ùïçsVc)) w‚àà‚ü¶N‚üß[V‚Ä¢œÅ]
    ... | ‚ü® c‚Ä≤ , ‚ü® N‚áìc‚Ä≤ , ‚ü¶N‚üß‚äÜùïçc‚Ä≤ ‚ü© ‚ü© =
          ‚ü® c‚Ä≤ , ‚ü® N‚áìc‚Ä≤ , ‚ü¶N‚üß‚äÜùïçc‚Ä≤ w w‚àà‚ü¶N‚üß[V‚Ä¢œÅ] ‚ü© ‚ü©
‚ü¶‚üß‚áí‚áì {$ P k}{Œ≥}{wfPk}{œÅ}{v} ùîæœÅŒ≥ v‚àà‚ü¶M‚üßœÅ =
    ‚ü® val-const {P} k , ‚ü® ‚áì-lit , (Œª u ‚Ñòpu ‚Üí ‚Ñòpv‚áíùïçvp {P} ‚Ñòpu) ‚ü© ‚ü©

adequacy : ‚àÄ{M V : Term}{wfM : WF 0 M}{œÅ}{NE-œÅ : nonempty-env œÅ}
   ‚Üí TermValue V  ‚Üí  ‚ü¶ M ‚üß œÅ ‚âÉ ‚ü¶ V ‚üß œÅ
    ----------------------------------
   ‚Üí Œ£[ c ‚àà Val ] ‚àÖ' ‚ä¢ M ‚áì c
adequacy{M}{V}{wfM}{œÅ}{NE-œÅ} Vval ‚ü¶M‚üß‚âÉ‚ü¶V‚üß
    with value-nonempty{V}{œÅ} NE-œÅ Vval
... | ‚ü® v , v‚àà‚ü¶V‚üß ‚ü©
    with ‚ü¶‚üß‚áí‚áì {wfM = wfM} ùîæ-‚àÖ (proj‚ÇÇ ‚ü¶M‚üß‚âÉ‚ü¶V‚üß v v‚àà‚ü¶V‚üß)
... | ‚ü® c , ‚ü® M‚áìc , _ ‚ü© ‚ü© =
    ‚ü® c , M‚áìc ‚ü©

{- corollary of adequacy and soundness:
   reduction to a value implies big-step termination -}
reduce‚Üí‚áì : ‚àÄ {M V : Term}{wfM : WF 0 M}
   ‚Üí TermValue V  ‚Üí  M ‚Äî‚Ü† V
    -------------------------
   ‚Üí Œ£[ c ‚àà Val ] ‚àÖ' ‚ä¢ M ‚áì c
reduce‚Üí‚áì {M}{V}{wfM} v M‚Äî‚Ü†N =
   let œÅ = Œª x ‚Üí ‚åà ŒΩ ‚åâ in
   let NE-œÅ = Œª x ‚Üí ‚ü® ŒΩ , refl ‚ü© in
   adequacy {M}{V}{wfM}{œÅ = œÅ}{NE-œÅ} v (soundness{NE-œÅ = NE-œÅ} M‚Äî‚Ü†N)


{- Denotational Equality implies Contextual Equivalence ------------------------}

‚ü¶‚üß-∆õ-cong : ‚àÄ{M N : Term}{œÅ}
   ‚Üí (‚àÄ {œÅ} ‚Üí ‚ü¶ M ‚üß œÅ ‚âÉ ‚ü¶ N ‚üß œÅ)
   ‚Üí ‚ü¶ ∆õ M ‚üß œÅ ‚âÉ ‚ü¶ ∆õ N ‚üß œÅ
‚ü¶‚üß-∆õ-cong {M}{N}{œÅ} M=N = ‚ü® fwd , back ‚ü©
   where
   fwd : ‚ü¶ ∆õ M ‚üß œÅ ‚äÜ ‚ü¶ ∆õ N ‚üß œÅ
   fwd (V ‚Ü¶ w) ‚ü® w‚àà‚ü¶M‚üß , V‚â¢[] ‚ü© = ‚ü® (proj‚ÇÅ M=N w w‚àà‚ü¶M‚üß) , V‚â¢[] ‚ü©
   fwd ŒΩ xx = tt
   back : ‚ü¶ ∆õ N ‚üß œÅ ‚äÜ ‚ü¶ ∆õ M ‚üß œÅ
   back (V ‚Ü¶ w) ‚ü® w‚àà‚ü¶N‚üß , V‚â¢[] ‚ü© = ‚ü® (proj‚ÇÇ M=N w w‚àà‚ü¶N‚üß) , V‚â¢[] ‚ü©
   back ŒΩ xx = tt

compositionality : ‚àÄ{C : Ctx} {M N : Term}{œÅ}
   ‚Üí (‚àÄ {œÅ} ‚Üí ‚ü¶ M ‚üß œÅ ‚âÉ ‚ü¶ N ‚üß œÅ)
    --------------------------------
   ‚Üí ‚ü¶ plug C M ‚üß œÅ ‚âÉ ‚ü¶ plug C N ‚üß œÅ
compositionality{CHole}{M}{N}{œÅ} ‚ü¶M‚üß=‚ü¶N‚üß = ‚ü¶M‚üß=‚ü¶N‚üß
compositionality{COp lam (ccons (CBind (CAst C‚Ä≤)) nil refl)}{M}{N}{œÅ} ‚ü¶M‚üß=‚ü¶N‚üß =
   ‚ü¶‚üß-∆õ-cong{plug C‚Ä≤ M}{plug C‚Ä≤ N} Œª {œÅ} ‚Üí compositionality {C‚Ä≤}{M}{N}{œÅ} ‚ü¶M‚üß=‚ü¶N‚üß
compositionality{COp app (tcons (ast L) (tcons x Cs refl) refl)}{M}{N}{œÅ}
   ‚ü¶M‚üß=‚ü¶N‚üß = ‚ü® (Œª v z ‚Üí z) , (Œª v z ‚Üí z) ‚ü©
compositionality {COp app (tcons (ast L) (ccons (CAst C‚Ä≤) nil refl) refl)}
   {M}{N}{œÅ} ‚ü¶M‚üß=‚ü¶N‚üß =
   ‚ñ™-cong{‚ü¶ L ‚üß œÅ} ‚âÉ-refl (compositionality {C‚Ä≤}{M}{N}{œÅ} ‚ü¶M‚üß=‚ü¶N‚üß)
compositionality{COp app (ccons (CAst C‚Ä≤) (cons (ast M‚Ä≤) nil) refl)}{M}{N}{œÅ}
  ‚ü¶M‚üß=‚ü¶N‚üß =
  ‚ñ™-cong{D‚ÇÇ = ‚ü¶ M‚Ä≤ ‚üß œÅ} (compositionality {C‚Ä≤}{M}{N}{œÅ} ‚ü¶M‚üß=‚ü¶N‚üß) ‚âÉ-refl

denot-equal‚áícontext-equal : ‚àÄ{M N : Term}
  ‚Üí (‚àÄ {œÅ} ‚Üí ‚ü¶ M ‚üß œÅ ‚âÉ ‚ü¶ N ‚üß œÅ)
    ---------------------------
  ‚Üí M ‚âÖ N
denot-equal‚áícontext-equal {M}{N} eq {C}{wfC}{wfM}{wfN} =
  record { to = Œª tm ‚Üí equal‚áíterminates{wfM = wfM}{wfN}{wfC} eq tm ;
           from = Œª tn ‚Üí equal‚áíterminates{wfM = wfN}{wfM}{wfC} (‚âÉ-sym eq) tn }
  where
  equal‚áíterminates : ‚àÄ{M N : Term} {C : Ctx}{wfM : WF (ctx-depth C 0) M}
      {wfN : WF (ctx-depth C 0) N}{wfC : WF-Ctx 0 C}
    ‚Üí (‚àÄ {œÅ} ‚Üí ‚ü¶ M ‚üß œÅ ‚âÉ ‚ü¶ N ‚üß œÅ)  ‚Üí  terminates (plug C M)
    ‚Üí terminates (plug C N)
  equal‚áíterminates {M}{N}{C}{wfM}{wfN}{wfC} M‚âÉN ‚ü® N‚Ä≤ , ‚ü® Nv , CM‚Äî‚Ü†N‚Ä≤ ‚ü© ‚ü© =
     let œÅ = Œª x ‚Üí ‚åà ŒΩ ‚åâ in
     let NE-œÅ = Œª x ‚Üí ‚ü® ŒΩ , refl ‚ü© in
     let CM‚âÉŒªN‚Ä≤ = soundness{œÅ = œÅ}{NE-œÅ} CM‚Äî‚Ü†N‚Ä≤ in
     let CM‚âÉCN = compositionality{C}{M}{N}{œÅ} M‚âÉN in
     let CN‚âÉŒªN‚Ä≤ = ‚âÉ-trans (‚âÉ-sym CM‚âÉCN) CM‚âÉŒªN‚Ä≤ in
     let adq = adequacy{plug C N}{wfM = WF-plug wfC wfN}{œÅ}{NE-œÅ} Nv CN‚âÉŒªN‚Ä≤ in
     ‚áì‚Üí‚Äî‚Ü† {wfM = WF-plug wfC wfN} (proj‚ÇÇ adq)


