open import Lambda
open import LambdaCallByValue
open import Utilities using (_iff_)
open import ValueBCD
open import EvalCallByValue
open Lambda.ASTMod
   using (`_; _‚¶Ö_‚¶Ü; Subst; Ctx; plug;
          exts; cons; bind; nil; rename; ‚ü™_‚ü´; subst-zero; _[_]; rename-id;
          WF; WF-var; WF-op; WF-cons; WF-nil; WF-ast; WF-bind;
          WF-rel; WF-Ctx; WF-plug; ctx-depth; len-mk-list)
open import Values
open import ValueStructAux value_struct
open import OrderingAux value_struct ordering
open import ConsistentAux value_struct ordering consistent
open import ModelCallByValue value_struct ordering consistent ‚Ñ± model_curry
open import LambdaDenot value_struct ordering _‚óè_ ‚Ñ±
open import Compositionality
open DenotAux value_struct ordering _‚óè_ ‚Ñ± consistent model_curry_apply
open import SoundnessCallByValue using (soundness; ‚Ñ∞-‚ä•)

import Relation.Binary.PropositionalEquality as Eq
open Eq using (_‚â°_; _‚â¢_; refl; trans; sym; cong; cong‚ÇÇ; cong-app; subst)
open Eq.‚â°-Reasoning
open import Data.Nat using (‚Ñï; zero; suc; s‚â§s; _<_)
open import Data.List using (List; []; _‚à∑_; length)
open import Data.Product using (_√ó_; Œ£; Œ£-syntax; ‚àÉ; ‚àÉ-syntax; proj‚ÇÅ; proj‚ÇÇ)
  renaming (_,_ to ‚ü®_,_‚ü©)
open import Data.Sum
open import Data.Empty using (‚ä•-elim) renaming (‚ä• to Bot)
open import Data.Unit
open import Relation.Nullary using (¬¨_)
open import Relation.Nullary.Negation using (contradiction)
open import Relation.Nullary using (Dec; yes; no)

module AdequacyCallByValue where

ùïç : Value ‚Üí Clos ‚Üí Set
ùïç ‚ä• (clos N Œ≥ {wf}) = ‚ä§
ùïç (v ‚Ü¶ w) (clos N Œ≥ {wf}) =
    (‚àÄ{c : Clos} ‚Üí ùïç v c ‚Üí Œ£[ c' ‚àà Clos ] (Œ≥ ,' c) ‚ä¢ N ‚áì c'  √ó  ùïç w c')
ùïç (u ‚äî v) (clos N Œ≥ {wf}) = ùïç u (clos N Œ≥ {wf}) √ó ùïç v (clos N Œ≥ {wf})
ùïç _ bogus = Bot


data ùîæ : Env ‚Üí ClosEnv ‚Üí Set where
  ùîæ-‚àÖ : ùîæ `‚àÖ ‚àÖ'
  ùîæ-ext : ‚àÄ{Œ≥ : Env}{Œ≥' : ClosEnv}{v c}
        ‚Üí ùîæ Œ≥ Œ≥' ‚Üí ùïç v c 
        ‚Üí ùîæ (Œ≥ `, v) (Œ≥' ,' c)

ùîæ‚Üíùïç : (Œ≥ : Env) ‚Üí (Œ≥' : ClosEnv)
    ‚Üí ùîæ Œ≥ Œ≥'
    ‚Üí (x : Var) ‚Üí (lt : x < length Œ≥')
    ‚Üí ùïç (Œ≥ x) (nth Œ≥' x)
ùîæ‚Üíùïç .(Œª x‚ÇÅ ‚Üí ‚ä•) .[] ùîæ-‚àÖ x ()
ùîæ‚Üíùïç .(_ `, _) .(_ ‚à∑ _) (ùîæ-ext ùîæŒ≥Œ≥' ùîºvc) zero (s‚â§s lt) = ùîºvc
ùîæ‚Üíùïç Œ≥‚ÇÇ (c ‚à∑ Œ≥') (ùîæ-ext {Œ≥}{Œ≥'}{v}{c} ùîæŒ≥Œ≥' ùîºvc) (suc x) (s‚â§s lt) =
    ùîæ‚Üíùïç Œ≥ Œ≥' ùîæŒ≥Œ≥' x lt

¬¨ùïç[bogus] : ‚àÄ v ‚Üí ¬¨ ùïç v bogus
¬¨ùïç[bogus] ‚ä• ()
¬¨ùïç[bogus] (v ‚Ü¶ v‚ÇÅ) ()
¬¨ùïç[bogus] (v ‚äî v‚ÇÅ) ()

sub-ùïç : ‚àÄ{c : Clos}{v v'} ‚Üí ùïç v c ‚Üí v' ‚äë v ‚Üí ùïç v' c

sub-ùïç {bogus}{v}{v'} ùïç[bogus] ‚äë-‚ä• = ¬¨ùïç[bogus] _ ùïç[bogus]
sub-ùïç {bogus} ùïç[bogus] (‚äë-conj-L x‚ÇÅ x‚ÇÇ) = ¬¨ùïç[bogus] _ ùïç[bogus]
sub-ùïç {bogus} vc (‚äë-trans lt1 lt2) = sub-ùïç (sub-ùïç vc lt2) lt1
sub-ùïç {clos N Œ≥} vc ‚äë-‚ä• = tt
sub-ùïç {clos N Œ≥} vc (‚äë-conj-L lt1 lt2) = ‚ü® (sub-ùïç vc lt1) , sub-ùïç vc lt2 ‚ü©
sub-ùïç {clos N Œ≥} ‚ü® vv1 , vv2 ‚ü© (‚äë-conj-R1 lt) = sub-ùïç vv1 lt
sub-ùïç {clos N Œ≥} ‚ü® vv1 , vv2 ‚ü© (‚äë-conj-R2 lt) = sub-ùïç vv2 lt
sub-ùïç {clos N Œ≥} vc (‚äë-trans {v = v‚ÇÇ} lt1 lt2) = sub-ùïç (sub-ùïç vc lt2) lt1
sub-ùïç {clos N Œ≥} vc (‚äë-fun lt1 lt2) ev1
    with vc (sub-ùïç ev1 lt1)
... | ‚ü® c , ‚ü® Nc , v4 ‚ü© ‚ü© = ‚ü® c , ‚ü® Nc , sub-ùïç v4 lt2 ‚ü© ‚ü©
sub-ùïç {clos N Œ≥} {v ‚Ü¶ w ‚äî v ‚Ü¶ w'} ‚ü® vcw , vcw' ‚ü© ‚äë-dist ev1c {-sf-} 
    with vcw ev1c | vcw' ev1c
... | ‚ü® clos L Œ¥ , ‚ü® L‚áìc‚ÇÇ , ùïçw ‚ü© ‚ü©
    | ‚ü® c‚ÇÉ , ‚ü® L‚áìc‚ÇÉ , ùïçw' ‚ü© ‚ü© rewrite ‚áì-determ L‚áìc‚ÇÉ L‚áìc‚ÇÇ =
      ‚ü® clos L Œ¥ , ‚ü® L‚áìc‚ÇÇ , ‚ü® ùïçw , ùïçw' ‚ü© ‚ü© ‚ü©
... | ‚ü® bogus , ‚ü® L‚áìc‚ÇÇ , ùïçw ‚ü© ‚ü©
    | ‚ü® c‚ÇÉ , ‚ü® L‚áìc‚ÇÉ , ùïçw' ‚ü© ‚ü© = ‚ä•-elim (¬¨ùïç[bogus] _ ùïçw)


ùîº : Value ‚Üí Term ‚Üí ClosEnv ‚Üí Set
ùîº v M Œ≥ = Œ£[ c ‚àà Clos ] Œ≥ ‚ä¢ M ‚áì c √ó ùïç v c

‚Ñ∞‚Üíùîº : {Œ≥ : Env}{Œ≥' : ClosEnv}{M : Term}{wf : WF (length Œ≥') M }{v : Value}
    ‚Üí ùîæ Œ≥ Œ≥' ‚Üí ‚Ñ∞ M Œ≥ v ‚Üí ùîº v M Œ≥'
‚Ñ∞‚Üíùîº {Œ≥} {Œ≥'} {` x}{WF-var ‚àãx lt} {v} ùîæŒ≥Œ≥' ‚Ñ∞MŒ≥v =
   let lt' = subst (Œª X ‚Üí x < X) (len-mk-list (length Œ≥')) lt in
   ‚ü® nth Œ≥' x , ‚ü® ‚áì-var , sub-ùïç (ùîæ‚Üíùïç _ _ ùîæŒ≥Œ≥' x lt') ‚Ñ∞MŒ≥v ‚ü© ‚ü©
‚Ñ∞‚Üíùîº {Œ≥} {Œ≥'} {lam ‚¶Ö cons (bind (ast N)) nil ‚¶Ü}
             {WF-op (WF-cons (WF-bind (WF-ast wfN)) WF-nil) _} {v} ùîæŒ≥Œ≥' ‚Ñ∞MŒ≥v =
   ‚ü® clos N Œ≥' , ‚ü® ‚áì-lam {wf = wfN} , G ‚Ñ∞MŒ≥v ‚ü© ‚ü©
   where
   G : ‚àÄ{v} ‚Üí ‚Ñ± (‚Ñ∞ N) Œ≥ v ‚Üí ùïç v (clos N Œ≥' {wfN})
   G {‚ä•} ‚Ñ±‚Ñ∞NŒ≥v = tt
   G {v ‚Ü¶ w} ‚Ñ±‚Ñ∞NŒ≥v {c} vc =
      ‚Ñ∞‚Üíùîº {M = N} {wfN} {w} (ùîæ-ext ùîæŒ≥Œ≥' vc) ‚Ñ±‚Ñ∞NŒ≥v
   G {v‚ÇÅ ‚äî v‚ÇÇ} ‚ü® ‚Ñ±‚Ñ∞NŒ≥v‚ÇÅ , ‚Ñ±‚Ñ∞NŒ≥v‚ÇÇ ‚ü© = ‚ü® G {v‚ÇÅ} ‚Ñ±‚Ñ∞NŒ≥v‚ÇÅ , G {v‚ÇÇ} ‚Ñ±‚Ñ∞NŒ≥v‚ÇÇ ‚ü©
‚Ñ∞‚Üíùîº {Œ≥} {Œ≥'} {app ‚¶Ö cons (ast L) (cons (ast M) nil) ‚¶Ü}
             {WF-op (WF-cons (WF-ast wfL) (WF-cons (WF-ast wfM) WF-nil)) _}
             {v} ùîæŒ≥Œ≥'
    ‚ü® v‚ÇÅ , ‚ü® wfv , ‚ü® d‚ÇÅ , d‚ÇÇ ‚ü© ‚ü© ‚ü© 
    with ‚Ñ∞‚Üíùîº {M = L} {wfL} ùîæŒ≥Œ≥' d‚ÇÅ 
... | ‚ü® clos L' Œ¥‚ÇÅ  {wfL'} , ‚ü® L‚áìL' , ùïçv‚ÇÅ‚Ü¶v ‚ü© ‚ü©
    with ‚Ñ∞‚Üíùîº {M = M} {wfM} ùîæŒ≥Œ≥' d‚ÇÇ
... | ‚ü® clos M' Œ¥‚ÇÇ , ‚ü® M‚áìM' , ùïçv‚ÇÅ ‚ü© ‚ü© 
    with ùïçv‚ÇÅ‚Ü¶v {clos M' Œ¥‚ÇÇ} ùïçv‚ÇÅ
... | ‚ü® c , ‚ü® L'‚áìc , ùïçv ‚ü© ‚ü© =
    ‚ü® c , ‚ü® (‚áì-app {wf = WF-rel L' wfL'} L‚áìL' M‚áìM' L'‚áìc) , ùïçv ‚ü© ‚ü©
‚Ñ∞‚Üíùîº {Œ≥} {Œ≥'} {app ‚¶Ö cons (ast L) (cons (ast M) nil) ‚¶Ü} {wf} {v} ùîæŒ≥Œ≥'
    ‚ü® v‚ÇÅ , ‚ü® wfv , ‚ü® d‚ÇÅ , d‚ÇÇ ‚ü© ‚ü© ‚ü© 
    | ‚ü® clos L' Œ¥‚ÇÅ , ‚ü® L‚áìL' , ùïçv‚ÇÅ‚Ü¶v ‚ü© ‚ü©
    | ‚ü® bogus , ‚ü® M‚áìM' , ùïçv‚ÇÅ ‚ü© ‚ü© = ‚ä•-elim (¬¨ùïç[bogus] _ ùïçv‚ÇÅ)

adequacy : ‚àÄ{M : Term}{N : Term}{wfM : WF 0 M}
         ‚Üí ‚Ñ∞ M ‚âÉ ‚Ñ∞ (lam ‚¶Ö cons (bind (ast N)) nil ‚¶Ü)
           ----------------------------------------------------------
         ‚Üí Œ£[ N‚Ä≤ ‚àà Term ] Œ£[ Œ≥ ‚àà ClosEnv ] Œ£[ wf ‚àà WF (suc (length Œ≥)) N‚Ä≤ ]
            ‚àÖ' ‚ä¢ M ‚áì clos N‚Ä≤ Œ≥ {wf}
adequacy{M}{N}{wfM} eq 
    with ‚Ñ∞‚Üíùîº {wf = wfM} ùîæ-‚àÖ (proj‚ÇÇ (eq `‚àÖ ‚ä• (Œª x ‚Üí tt) tt)
                  (‚Ñ∞-‚ä• {Œ≥ = Œª _ ‚Üí ‚ä•}{M = lam ‚¶Ö cons (bind (ast N)) nil ‚¶Ü} V-∆õ))
... | ‚ü® clos N‚Ä≤ Œ≥ {wfN‚Ä≤} , ‚ü® M‚áìc , Vc ‚ü© ‚ü© =
    ‚ü® N‚Ä≤ , ‚ü® Œ≥ , ‚ü® WF-rel N‚Ä≤ wfN‚Ä≤ , M‚áìc ‚ü© ‚ü© ‚ü©


reduce‚Üícbv : ‚àÄ {M : Term} {N : Term}{wfM : WF 0 M}
           ‚Üí M ‚Äî‚Ü† lam ‚¶Ö cons (bind (ast N)) nil ‚¶Ü
           ‚Üí Œ£[ N‚Ä≤ ‚àà Term ] Œ£[ Œ¥ ‚àà ClosEnv ] Œ£[ wf ‚àà WF (suc (length Œ¥)) N‚Ä≤ ]
             ‚àÖ' ‚ä¢ M ‚áì clos N‚Ä≤ Œ¥ {wf}
reduce‚Üícbv {M}{N}{wfM} M‚Äî‚Ü†∆õN = adequacy {M}{N}{wfM} (soundness M‚Äî‚Ü†∆õN)


cbv‚Üîreduce : ‚àÄ {M : Term}{wfM : WF 0 M}
           ‚Üí (Œ£[ N ‚àà Term ] (M ‚Äî‚Ü† lam ‚¶Ö cons (bind (ast N)) nil ‚¶Ü))
             iff
             (Œ£[ N‚Ä≤ ‚àà Term ] Œ£[ Œ¥ ‚àà ClosEnv ] Œ£[ wf ‚àà WF (suc (length Œ¥)) N‚Ä≤ ]
               ‚àÖ' ‚ä¢ M ‚áì clos N‚Ä≤ Œ¥ {wf})
cbv‚Üîreduce {M}{wfM} =
    ‚ü® (Œª x ‚Üí reduce‚Üícbv {wfM = wfM} (proj‚ÇÇ x)) ,
      (Œª x ‚Üí cbv‚Üíreduce {wfM = wfM}{wfN‚Ä≤ = proj‚ÇÅ (proj‚ÇÇ (proj‚ÇÇ x))}
              (proj‚ÇÇ (proj‚ÇÇ (proj‚ÇÇ x))) ) ‚ü©

denot-equal-terminates : ‚àÄ{M N : Term} {C : Ctx}{wfM : WF (ctx-depth C) M}
    {wfN : WF (ctx-depth C) N}{wfC : WF-Ctx 0 C}
  ‚Üí ‚Ñ∞ M ‚âÉ ‚Ñ∞ N  ‚Üí  terminates (plug C M)
    -----------------------------------
  ‚Üí terminates (plug C N)
denot-equal-terminates {M}{N}{C}{wfM}{wfN}{wfC} ‚Ñ∞M‚âÉ‚Ñ∞N ‚ü® N‚Ä≤ , CM‚Äî‚Ü†∆õN‚Ä≤ ‚ü© =
  let ‚Ñ∞CM‚âÉ‚Ñ∞∆õN‚Ä≤ = soundness CM‚Äî‚Ü†∆õN‚Ä≤ in
  let ‚Ñ∞CM‚âÉ‚Ñ∞CN = compositionality{C = C}{N = N} ‚Ñ∞M‚âÉ‚Ñ∞N in
  let ‚Ñ∞CN‚âÉ‚Ñ∞∆õN‚Ä≤ = ‚âÉ-trans (‚âÉ-sym ‚Ñ∞CM‚âÉ‚Ñ∞CN) ‚Ñ∞CM‚âÉ‚Ñ∞∆õN‚Ä≤ in
  let adeq = adequacy{N = N‚Ä≤}{wfM = WF-plug wfC wfN} ‚Ñ∞CN‚âÉ‚Ñ∞∆õN‚Ä≤ in
  let wfN‚Ä≤‚Ä≤ = proj‚ÇÅ (proj‚ÇÇ (proj‚ÇÇ adeq)) in
  let CN‚áìN‚Ä≤‚Ä≤ = proj‚ÇÇ (proj‚ÇÇ (proj‚ÇÇ adeq)) in
    cbv‚Üíreduce {wfM = WF-plug wfC wfN}{wfN‚Ä≤ = wfN‚Ä≤‚Ä≤} CN‚áìN‚Ä≤‚Ä≤

denot-equal-contex-equal : ‚àÄ{M N : Term}
  ‚Üí ‚Ñ∞ M ‚âÉ ‚Ñ∞ N
    ---------
  ‚Üí M ‚âÖ N
denot-equal-contex-equal{M}{N} eq {C}{wfC}{wfM}{wfN} =
   ‚ü® (Œª tm ‚Üí denot-equal-terminates{M = M}{wfM = wfM}{wfN}{wfC} eq tm) ,
     (Œª tn ‚Üí denot-equal-terminates{M = N}{wfM = wfN}{wfM}{wfC} (‚âÉ-sym eq) tn) ‚ü©
