open import Data.Empty using (‚ä•-elim) renaming (‚ä• to False)
open import Data.List using (List ; _‚à∑_ ; []; _++_; length)
open import Data.List.Properties using (++-conicalÀ°)
open import Data.List.Membership.Propositional renaming (_‚àà_ to _‚ãµ_)
open import Data.List.Membership.Propositional.Properties
  using (‚àà-++‚Å∫À°; ‚àà-++‚Å∫ ≥)
open import Data.List.Relation.Unary.Any using (here; there) 
open import Data.Nat using (‚Ñï; zero; suc; _‚âü_; _<_; s‚â§s)
open import Data.Product using (_√ó_; Œ£; Œ£-syntax; proj‚ÇÅ; proj‚ÇÇ)
    renaming (_,_ to ‚ü®_,_‚ü©)
open import Data.Sum using (_‚äé_; inj‚ÇÅ; inj‚ÇÇ)
open import Data.Unit using (tt) renaming (‚ä§ to True)
open import Level renaming (zero to lzero; suc to lsuc)
open import Relation.Binary.PropositionalEquality
    using (_‚â°_; _‚â¢_; refl; sym; subst)
open import Relation.Nullary using (¬¨_; Dec; yes; no)

open import Primitives
open import PValueCBV
open import ScopedTuple hiding (ùí´)
open import SetsAsPredicates
open import Sig
open import Syntax
open import Utilities using (extensionality)

module PValueCBVProperties (Op : Set) (sig : Op ‚Üí List Sig) where

open import Fold2 Op sig
open Syntax.OpSig Op sig
open import WellScoped Op sig using (WF-plug) 

rel-args : ‚àÄ{‚Ñì}{T : Set ‚Ñì}
   ‚Üí (‚àÄ b ‚Üí ArgTy T b ‚Üí ArgTy T b ‚Üí Set‚ÇÅ)
   ‚Üí ‚àÄ bs ‚Üí Tuple bs (ArgTy T)
   ‚Üí Tuple bs (ArgTy T) ‚Üí Set‚ÇÅ
rel-args R [] xs ys = Lift (lsuc lzero) True
rel-args R (b ‚à∑ bs) ‚ü® x , xs ‚ü© ‚ü® y , ys ‚ü© = (R b x y) √ó (rel-args R bs xs ys)

‚äÜ-arg : ‚àÄ b ‚Üí ArgTy (ùí´ Value) b ‚Üí ArgTy (ùí´ Value) b ‚Üí Set‚ÇÅ
‚äÜ-arg ‚ñ† x y = Lift (lsuc lzero) (x ‚äÜ y)
‚äÜ-arg (ŒΩ b) f g = ‚àÄ X ‚Üí ‚äÜ-arg b (f X) (g X)
‚äÜ-arg (‚àÅ b) x y = ‚äÜ-arg b x y

‚äÜ-args = rel-args ‚äÜ-arg

record Semantics : Set‚ÇÅ where
  field interp-op  : (op : Op) ‚Üí Tuple (sig op) (ArgTy (ùí´ Value)) ‚Üí ùí´ Value
  
  ‚ü¶_‚üß_ : ABT ‚Üí Env ‚Üí ùí´ Value
  ‚ü¶ M ‚üß œÅ = fold interp-op ‚àÖ œÅ M

  ‚ü¶_‚üß‚Çê_ : ‚àÄ{b} ‚Üí Arg b ‚Üí Env  ‚Üí ArgTy (ùí´ Value) b
  ‚ü¶ arg ‚üß‚Çê œÅ = fold-arg interp-op ‚àÖ œÅ arg

  ‚ü¶_‚üß‚Çä_ : ‚àÄ{bs} ‚Üí Args bs ‚Üí Env  ‚Üí Tuple bs (ArgTy (ùí´ Value))
  ‚ü¶ args ‚üß‚Çä œÅ = fold-args interp-op ‚àÖ œÅ args

  field mono-op : ‚àÄ{op}{xs}{ys} ‚Üí ‚äÜ-args (sig op) xs ys ‚Üí interp-op op xs ‚äÜ interp-op op ys
  
open Semantics {{...}}

{- Monotonic ------------------------------------------------------------------}

‚ü¶‚üß-mono : ‚àÄ{{_ : Semantics}} {œÅ œÅ‚Ä≤} (M : ABT)
  ‚Üí  (‚àÄ x ‚Üí œÅ x ‚äÜ œÅ‚Ä≤ x)  ‚Üí  ‚ü¶ M ‚üß œÅ ‚äÜ ‚ü¶ M ‚üß œÅ‚Ä≤
‚ü¶‚üß-mono-arg : ‚àÄ{{_ : Semantics}} {b}{œÅ œÅ‚Ä≤} (arg : Arg b)
  ‚Üí  (‚àÄ x ‚Üí œÅ x ‚äÜ œÅ‚Ä≤ x)  ‚Üí  ‚äÜ-arg b (‚ü¶ arg ‚üß‚Çê œÅ) (‚ü¶ arg ‚üß‚Çê œÅ‚Ä≤)
‚ü¶‚üß-mono-args : ‚àÄ{{_ : Semantics}} {bs}{œÅ œÅ‚Ä≤} (args : Args bs)
  ‚Üí  (‚àÄ x ‚Üí œÅ x ‚äÜ œÅ‚Ä≤ x)  ‚Üí  ‚äÜ-args bs (‚ü¶ args ‚üß‚Çä œÅ) (‚ü¶ args ‚üß‚Çä œÅ‚Ä≤)
  
‚ü¶‚üß-mono {œÅ}{œÅ‚Ä≤} (` x) œÅ<œÅ‚Ä≤ = œÅ<œÅ‚Ä≤ x
‚ü¶‚üß-mono {œÅ}{œÅ‚Ä≤} (op ‚¶Ö args ‚¶Ü) œÅ<œÅ‚Ä≤ = mono-op (‚ü¶‚üß-mono-args  args œÅ<œÅ‚Ä≤)

‚ü¶‚üß-mono-arg {‚ñ†} (ast M) œÅ<œÅ‚Ä≤ = lift (‚ü¶‚üß-mono M œÅ<œÅ‚Ä≤)
‚ü¶‚üß-mono-arg {ŒΩ b}{œÅ}{œÅ‚Ä≤} (bind arg) œÅ<œÅ‚Ä≤ X =
    ‚ü¶‚üß-mono-arg {b}{X ‚Ä¢ œÅ}{X ‚Ä¢ œÅ‚Ä≤} arg (env-ext œÅ<œÅ‚Ä≤)
‚ü¶‚üß-mono-arg {‚àÅ b} (clear arg) œÅ<œÅ‚Ä≤ =
    ‚ü¶‚üß-mono-arg {b}{Œª x ‚Üí ‚àÖ}{Œª x ‚Üí ‚àÖ} arg Œª x d z ‚Üí z

‚ü¶‚üß-mono-args {bs = []} nil œÅ<œÅ‚Ä≤ = lift tt
‚ü¶‚üß-mono-args {bs = b ‚à∑ bs} (cons arg args) œÅ<œÅ‚Ä≤ =
  ‚ü® ‚ü¶‚üß-mono-arg arg œÅ<œÅ‚Ä≤ , ‚ü¶‚üß-mono-args args œÅ<œÅ‚Ä≤ ‚ü©
