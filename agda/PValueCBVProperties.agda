{-# OPTIONS --allow-unsolved-metas #-}

open import Data.Empty using (‚ä•-elim) renaming (‚ä• to False)
open import Data.List using (List ; _‚à∑_ ; []; _++_; length)
open import Data.List.Properties using (++-conicalÀ°)
open import Data.List.Membership.Propositional renaming (_‚àà_ to _‚ãµ_)
open import Data.List.Membership.Propositional.Properties
  using (‚àà-++‚Å∫À°; ‚àà-++‚Å∫ ≥)
open import Data.List.Relation.Unary.Any using (here; there) 
open import Data.Nat using (‚Ñï; zero; suc; _‚âü_; _<_; s‚â§s)
open import Data.Product using (_√ó_; Œ£; Œ£-syntax; proj‚ÇÅ; proj‚ÇÇ)
    renaming (_,_ to ‚ü®_,_‚ü©)
open import Data.Sum using (_‚äé_; inj‚ÇÅ; inj‚ÇÇ)
open import Data.Unit using (tt) renaming (‚ä§ to True)
open import Level renaming (zero to lzero; suc to lsuc)
open import Relation.Binary.PropositionalEquality
    using (_‚â°_; _‚â¢_; refl; sym; subst)
open import Relation.Nullary using (¬¨_; Dec; yes; no)

open import Primitives
open import PValueCBV
open import ScopedTuple hiding (ùí´)
open import SetsAsPredicates
open import Sig
open import Syntax hiding (‚åà_‚åâ)
open import Utilities using (extensionality)

module PValueCBVProperties (Op : Set) (sig : Op ‚Üí List Sig) where

open import Fold2 Op sig
open Syntax.OpSig Op sig
open import WellScoped Op sig using (WF-plug) 

{- environments whose codomain are finite nonempty sets -}
fin-env : Env ‚Üí Set
fin-env œÅ = ‚àÄ x ‚Üí Œ£[ E ‚àà List Value ] œÅ x ‚âÉ mem E √ó E ‚â¢ []

infix 6 _‚äî‚Çë_
_‚äî‚Çë_ : Env ‚Üí Env ‚Üí Env
(œÅ‚ÇÅ ‚äî‚Çë œÅ‚ÇÇ) x v = œÅ‚ÇÅ x v ‚äé œÅ‚ÇÇ x v

join-fin-env : ‚àÄ{œÅ‚ÇÅ œÅ‚ÇÇ}  ‚Üí fin-env œÅ‚ÇÅ  ‚Üí  fin-env œÅ‚ÇÇ  ‚Üí  fin-env (œÅ‚ÇÅ ‚äî‚Çë œÅ‚ÇÇ)
join-fin-env {œÅ‚ÇÅ}{œÅ‚ÇÇ} f1 f2 x
    with f1 x
... | ‚ü® E1 , ‚ü® œÅ‚ÇÅ=E1 , NE-E1 ‚ü© ‚ü©
    with f2 x
... | ‚ü® E2 , ‚ü® œÅ‚ÇÇ=E2 , NE-E2 ‚ü© ‚ü© =
    ‚ü® (E1 ++ E2) , ‚ü® ‚ü® G , (H {E1} Œª d z ‚Üí z) ‚ü© ,
      (Œª E12=[] ‚Üí NE-E1 (++-conicalÀ° E1 E2 E12=[])) ‚ü© ‚ü©
    where
    G : (v : Value) ‚Üí œÅ‚ÇÅ x v ‚äé œÅ‚ÇÇ x v ‚Üí mem (E1 ++ E2) v
    G v (inj‚ÇÅ œÅ1x) = ‚àà-++‚Å∫À° ((proj‚ÇÅ œÅ‚ÇÅ=E1) v œÅ1x)
    G v (inj‚ÇÇ œÅ2x) = ‚àà-++‚Å∫ ≥ E1 ((proj‚ÇÅ œÅ‚ÇÇ=E2) v œÅ2x)

    H : ‚àÄ{E} ‚Üí mem E ‚äÜ mem E1 ‚Üí mem (E ++ E2) ‚äÜ (Œª v ‚Üí œÅ‚ÇÅ x v ‚äé œÅ‚ÇÇ x v)
    H {[]} E<E1 v v‚ààE++E2 = inj‚ÇÇ ((proj‚ÇÇ œÅ‚ÇÇ=E2) v v‚ààE++E2)
    H {x ‚à∑ E} E<E1 .x (here refl) = inj‚ÇÅ ((proj‚ÇÇ œÅ‚ÇÅ=E1) x (E<E1 x (here refl)))
    H {x ‚à∑ E} E<E1 v (there v‚ààE++E2) =
       H (Œª v z ‚Üí E<E1 v (there z)) v v‚ààE++E2

join-lub : ‚àÄ{œÅ œÅ‚ÇÅ œÅ‚ÇÇ} ‚Üí œÅ‚ÇÅ ‚äÜ‚Çë œÅ ‚Üí œÅ‚ÇÇ ‚äÜ‚Çë œÅ ‚Üí œÅ‚ÇÅ ‚äî‚Çë œÅ‚ÇÇ ‚äÜ‚Çë œÅ
join-lub {œÅ} {œÅ‚ÇÅ} {œÅ‚ÇÇ} œÅ‚ÇÅ‚äÜœÅ œÅ‚ÇÇ‚äÜœÅ x v (inj‚ÇÅ v‚ààœÅ‚ÇÅx) = œÅ‚ÇÅ‚äÜœÅ x v v‚ààœÅ‚ÇÅx
join-lub {œÅ} {œÅ‚ÇÅ} {œÅ‚ÇÇ} œÅ‚ÇÅ‚äÜœÅ œÅ‚ÇÇ‚äÜœÅ x v (inj‚ÇÇ v‚ààœÅ‚ÇÇx) = œÅ‚ÇÇ‚äÜœÅ x v v‚ààœÅ‚ÇÇx

join-‚äÜ-left : ‚àÄ{œÅ‚ÇÅ œÅ‚ÇÇ} ‚Üí œÅ‚ÇÅ ‚äÜ‚Çë œÅ‚ÇÅ ‚äî‚Çë œÅ‚ÇÇ
join-‚äÜ-left {œÅ‚ÇÅ}{œÅ‚ÇÇ} = Œª x d z ‚Üí inj‚ÇÅ z

join-‚äÜ-right : ‚àÄ{œÅ‚ÇÅ œÅ‚ÇÇ} ‚Üí œÅ‚ÇÇ ‚äÜ‚Çë œÅ‚ÇÅ ‚äî‚Çë œÅ‚ÇÇ
join-‚äÜ-right {œÅ‚ÇÅ}{œÅ‚ÇÇ} = Œª x d z ‚Üí inj‚ÇÇ z



rel-args : ‚àÄ{‚Ñì}{T : Set ‚Ñì}
   ‚Üí (‚àÄ b ‚Üí ArgTy T b ‚Üí ArgTy T b ‚Üí Set‚ÇÅ)
   ‚Üí ‚àÄ bs ‚Üí Tuple bs (ArgTy T)
   ‚Üí Tuple bs (ArgTy T) ‚Üí Set‚ÇÅ
rel-args R [] xs ys = Lift (lsuc lzero) True
rel-args R (b ‚à∑ bs) ‚ü® x , xs ‚ü© ‚ü® y , ys ‚ü© = (R b x y) √ó (rel-args R bs xs ys)

‚äÜ-arg : ‚àÄ b ‚Üí ArgTy (ùí´ Value) b ‚Üí ArgTy (ùí´ Value) b ‚Üí Set‚ÇÅ
‚äÜ-arg ‚ñ† x y = Lift (lsuc lzero) (x ‚äÜ y)
‚äÜ-arg (ŒΩ b) f g = ‚àÄ X ‚Üí ‚äÜ-arg b (f X) (g X)
‚äÜ-arg (‚àÅ b) x y = ‚äÜ-arg b x y

‚äÜ-args = rel-args ‚äÜ-arg

pred-args : (‚àÄ b ‚Üí Arg b ‚Üí Set‚ÇÅ) ‚Üí ‚àÄ bs ‚Üí Args bs ‚Üí Set‚ÇÅ
pred-args P [] args = Lift (lsuc lzero) True
pred-args P (b ‚à∑ bs) (cons arg args) = P b arg √ó pred-args P bs args

continuous-‚àà : (Env ‚Üí ùí´ Value) ‚Üí Env ‚Üí Value ‚Üí Set‚ÇÅ
continuous-‚àà D œÅ v = v ‚àà D œÅ ‚Üí Œ£[ œÅ‚Ä≤ ‚àà Env ] fin-env œÅ‚Ä≤ √ó œÅ‚Ä≤ ‚äÜ‚Çë œÅ  √ó v ‚àà D œÅ‚Ä≤
     
record Semantics : Set‚ÇÅ where
  field interp-op  : (op : Op) ‚Üí Tuple (sig op) (ArgTy (ùí´ Value)) ‚Üí ùí´ Value
  
  ‚ü¶_‚üß : ABT ‚Üí Env ‚Üí ùí´ Value
  ‚ü¶ M ‚üß œÅ = fold interp-op ‚àÖ œÅ M

  ‚ü¶_‚üß‚Çê : ‚àÄ{b} ‚Üí Arg b ‚Üí Env  ‚Üí ArgTy (ùí´ Value) b
  ‚ü¶ arg ‚üß‚Çê œÅ = fold-arg interp-op ‚àÖ œÅ arg

  ‚ü¶_‚üß‚Çä : ‚àÄ{bs} ‚Üí Args bs ‚Üí Env  ‚Üí Tuple bs (ArgTy (ùí´ Value))
  ‚ü¶ args ‚üß‚Çä œÅ = fold-args interp-op ‚àÖ œÅ args

  field mono-op : ‚àÄ{op}{xs}{ys} ‚Üí ‚äÜ-args (sig op) xs ys ‚Üí interp-op op xs ‚äÜ interp-op op ys

  Cont-Env-Arg : ‚àÄ {{_ : Semantics}} (œÅ : Env) (NE-œÅ : nonempty-env œÅ)
    ‚Üí ‚àÄ b ‚Üí (arg : Arg b)  ‚Üí Set‚ÇÅ
  Cont-Env-Arg œÅ NE-œÅ ‚ñ† (ast M) = ‚àÄ v ‚Üí continuous-‚àà ‚ü¶ M ‚üß œÅ v
  Cont-Env-Arg œÅ NE-œÅ (ŒΩ b) (bind arg) =
    ‚àÄ V ‚Üí (ne : V ‚â¢ [])
    ‚Üí Cont-Env-Arg (mem V ‚Ä¢ œÅ)
          (extend-nonempty-env NE-œÅ (E‚â¢[]‚áínonempty-mem ne)) b arg
  Cont-Env-Arg œÅ NE-œÅ (‚àÅ b) (clear arg) = Lift (lsuc lzero) True

open Semantics {{...}}

record ContinuousSemantics : Set‚ÇÅ where
  field {{Sem}} : Semantics
  field continuous-op : ‚àÄ{op}{œÅ}{NE-œÅ}{v}{args} ‚Üí v ‚àà ‚ü¶ op ‚¶Ö args ‚¶Ü ‚üß œÅ ‚Üí pred-args (Cont-Env-Arg œÅ NE-œÅ) (sig op) args  ‚Üí   Œ£[ œÅ‚Ä≤ ‚àà Env ] fin-env œÅ‚Ä≤ √ó œÅ‚Ä≤ ‚äÜ‚Çë œÅ √ó v ‚àà (‚ü¶ op ‚¶Ö args ‚¶Ü ‚üß œÅ‚Ä≤)

open ContinuousSemantics {{...}}

{- Monotone -------------------------------------------------------------------}

monotone-env : (Env ‚Üí ùí´ Value) ‚Üí Set‚ÇÅ
monotone-env D = ‚àÄ {œÅ œÅ‚Ä≤} ‚Üí (‚àÄ x ‚Üí œÅ x ‚äÜ œÅ‚Ä≤ x)  ‚Üí  D œÅ ‚äÜ D œÅ‚Ä≤
  
‚ü¶‚üß-monotone : ‚àÄ{{_ : Semantics}} {œÅ œÅ‚Ä≤} (M : ABT)
  ‚Üí  œÅ ‚äÜ‚Çë œÅ‚Ä≤ ‚Üí  ‚ü¶ M ‚üß œÅ ‚äÜ ‚ü¶ M ‚üß œÅ‚Ä≤
‚ü¶‚üß-monotone-arg : ‚àÄ{{_ : Semantics}} {b}{œÅ œÅ‚Ä≤} (arg : Arg b)
  ‚Üí  œÅ ‚äÜ‚Çë œÅ‚Ä≤ ‚Üí  ‚äÜ-arg b (‚ü¶ arg ‚üß‚Çê œÅ) (‚ü¶ arg ‚üß‚Çê œÅ‚Ä≤)
‚ü¶‚üß-monotone-args : ‚àÄ{{_ : Semantics}} {bs}{œÅ œÅ‚Ä≤} (args : Args bs)
  ‚Üí  œÅ ‚äÜ‚Çë œÅ‚Ä≤  ‚Üí  ‚äÜ-args bs (‚ü¶ args ‚üß‚Çä œÅ) (‚ü¶ args ‚üß‚Çä œÅ‚Ä≤)
  
‚ü¶‚üß-monotone {œÅ}{œÅ‚Ä≤} (` x) œÅ<œÅ‚Ä≤ = œÅ<œÅ‚Ä≤ x
‚ü¶‚üß-monotone {œÅ}{œÅ‚Ä≤} (op ‚¶Ö args ‚¶Ü) œÅ<œÅ‚Ä≤ = mono-op (‚ü¶‚üß-monotone-args  args œÅ<œÅ‚Ä≤)

‚ü¶‚üß-monotone-arg {‚ñ†} (ast M) œÅ<œÅ‚Ä≤ = lift (‚ü¶‚üß-monotone M œÅ<œÅ‚Ä≤)
‚ü¶‚üß-monotone-arg {ŒΩ b}{œÅ}{œÅ‚Ä≤} (bind arg) œÅ<œÅ‚Ä≤ X =
    ‚ü¶‚üß-monotone-arg {b}{X ‚Ä¢ œÅ}{X ‚Ä¢ œÅ‚Ä≤} arg (env-ext œÅ<œÅ‚Ä≤)
‚ü¶‚üß-monotone-arg {‚àÅ b} (clear arg) œÅ<œÅ‚Ä≤ =
    ‚ü¶‚üß-monotone-arg {b}{Œª x ‚Üí ‚àÖ}{Œª x ‚Üí ‚àÖ} arg Œª x d z ‚Üí z

‚ü¶‚üß-monotone-args {bs = []} nil œÅ<œÅ‚Ä≤ = lift tt
‚ü¶‚üß-monotone-args {bs = b ‚à∑ bs} (cons arg args) œÅ<œÅ‚Ä≤ =
  ‚ü® ‚ü¶‚üß-monotone-arg arg œÅ<œÅ‚Ä≤ , ‚ü¶‚üß-monotone-args args œÅ<œÅ‚Ä≤ ‚ü©

{- Continuous -----------------------------------------------------------------}

{- creates an environment that maps each variable x to
   a singleton set of some element in œÅ x.  -}
initial-fin-env : (œÅ : Env) ‚Üí (NE-œÅ : nonempty-env œÅ) ‚Üí Env
initial-fin-env œÅ NE-œÅ x
    with NE-œÅ x
... | ‚ü® v , v‚ààœÅx ‚ü© = ‚åà v ‚åâ

initial-fin : (œÅ : Env) ‚Üí (NE-œÅ : nonempty-env œÅ)
   ‚Üí fin-env (initial-fin-env œÅ NE-œÅ)
initial-fin œÅ NE-œÅ x
    with NE-œÅ x
... | ‚ü® v , v‚ààœÅx ‚ü© =
      ‚ü® v ‚à∑ [] ,
      ‚ü® ‚ü® (Œª {w refl ‚Üí (here refl)}) , (Œª {w (here refl) ‚Üí refl}) ‚ü© , (Œª ()) ‚ü© ‚ü©

initial-fin-‚äÜ : (œÅ : Env) ‚Üí (NE-œÅ : nonempty-env œÅ)
  ‚Üí initial-fin-env œÅ NE-œÅ ‚äÜ‚Çë œÅ
initial-fin-‚äÜ œÅ NE-œÅ x v v‚ààinitial
    with NE-œÅ x
... | ‚ü® w , w‚ààœÅx ‚ü© rewrite v‚ààinitial = w‚ààœÅx

{- single-env maps x to D and any other variable y to something in œÅ y. -}
single-env : Var ‚Üí ùí´ Value ‚Üí (œÅ : Env) ‚Üí (NE-œÅ : nonempty-env œÅ) ‚Üí Env
single-env x D œÅ NE-œÅ y
    with x ‚âü y
... | yes refl = D
... | no neq
    with NE-œÅ y
... | ‚ü® v , v‚ààœÅy ‚ü© = ‚åà v ‚åâ    

single-fin : ‚àÄ{v}{x}{œÅ}{NE-œÅ} ‚Üí fin-env (single-env x ‚åà v ‚åâ œÅ NE-œÅ)
single-fin {v}{x}{œÅ}{NE-œÅ} y
    with x ‚âü y
... | yes refl =
    ‚ü® v ‚à∑ [] ,
    ‚ü® ‚ü® (Œª { v‚ÇÅ refl ‚Üí (here refl)}) , (Œª{ v‚ÇÅ (here refl) ‚Üí refl}) ‚ü© , (Œª ()) ‚ü© ‚ü©
... | no neq
    with NE-œÅ y
... | ‚ü® w , w‚ààœÅy ‚ü© =
    ‚ü® w ‚à∑ [] ,
    ‚ü® ‚ü® (Œª { v‚ÇÅ refl ‚Üí here refl}) , (Œª { v‚ÇÅ (here refl) ‚Üí refl}) ‚ü© , (Œª ()) ‚ü© ‚ü©

single-‚äÜ : ‚àÄ{œÅ x v}{NE-œÅ : nonempty-env œÅ}
  ‚Üí  v ‚àà œÅ x  ‚Üí  single-env x ‚åà v ‚åâ œÅ NE-œÅ ‚äÜ‚Çë œÅ
single-‚äÜ {œÅ}{x}{v}{NE-œÅ} v‚ààœÅx y w sing 
    with x ‚âü y
... | yes refl rewrite sing = v‚ààœÅx
... | no neq
    with NE-œÅ y
... | ‚ü® u , u‚ààœÅy ‚ü© rewrite sing = u‚ààœÅy

v‚ààsingle[xv]x : ‚àÄ{v}{x}{œÅ}{NE-œÅ} ‚Üí v ‚àà single-env x ‚åà v ‚åâ œÅ NE-œÅ x
v‚ààsingle[xv]x {v}{x}
    with x ‚âü x
... | yes refl = refl
... | no neq = ‚ä•-elim (neq refl)

continuous-‚äÜ : (Env ‚Üí ùí´ Value) ‚Üí Env ‚Üí Set‚ÇÅ
continuous-‚äÜ E œÅ = ‚àÄ V ‚Üí mem V ‚äÜ E œÅ
                     ‚Üí (‚àÄ v ‚Üí v ‚àà mem V ‚Üí continuous-‚àà E œÅ v)
                     ‚Üí Œ£[ œÅ‚Ä≤ ‚àà Env ] fin-env œÅ‚Ä≤ √ó œÅ‚Ä≤ ‚äÜ‚Çë œÅ  √ó mem V ‚äÜ E œÅ‚Ä≤

‚ñ™-continuous : ‚àÄ{D E : Env ‚Üí ùí´ Value}{œÅ}{NE-œÅ : nonempty-env œÅ}{w}
  ‚Üí w ‚àà (D œÅ) ‚ñ™ (E œÅ)
  ‚Üí (‚àÄ v ‚Üí continuous-‚àà D œÅ v) ‚Üí (‚àÄ v ‚Üí continuous-‚àà E œÅ v)
  ‚Üí monotone-env D ‚Üí monotone-env E ‚Üí continuous-‚äÜ E œÅ
  ‚Üí Œ£[ œÅ‚ÇÉ ‚àà Env ] fin-env œÅ‚ÇÉ √ó œÅ‚ÇÉ ‚äÜ‚Çë œÅ √ó w ‚àà (D œÅ‚ÇÉ) ‚ñ™ (E œÅ‚ÇÉ)
‚ñ™-continuous {D}{E}{œÅ}{NE-œÅ}{w} ‚ü® V , ‚ü® V‚Ü¶w‚ààDœÅ , ‚ü® V‚äÜEœÅ , V‚â¢[] ‚ü© ‚ü© ‚ü©
    IH-D IH-E mD mE cE
    with IH-D (V ‚Ü¶ w) V‚Ü¶w‚ààDœÅ 
... | ‚ü® œÅ‚ÇÅ , ‚ü® fœÅ‚ÇÅ , ‚ü® œÅ‚ÇÅ‚äÜœÅ , V‚Ü¶w‚ààDœÅ‚ÇÅ ‚ü© ‚ü© ‚ü©
    with (cE V V‚äÜEœÅ (Œª v v‚ààV ‚Üí IH-E v))
... | ‚ü® œÅ‚ÇÇ , ‚ü® fœÅ‚ÇÇ , ‚ü® œÅ‚ÇÇ‚äÜœÅ , V‚äÜEœÅ‚ÇÇ ‚ü© ‚ü© ‚ü© =
   ‚ü® œÅ‚ÇÉ , ‚ü® join-fin-env fœÅ‚ÇÅ fœÅ‚ÇÇ , ‚ü® join-lub œÅ‚ÇÅ‚äÜœÅ œÅ‚ÇÇ‚äÜœÅ , w‚ààD‚ñ™EœÅ‚ÇÉ ‚ü© ‚ü© ‚ü© 
    where
    œÅ‚ÇÉ = œÅ‚ÇÅ ‚äî‚Çë œÅ‚ÇÇ
    œÅ‚ÇÅ‚äÜœÅ‚ÇÉ = Œª x v z ‚Üí inj‚ÇÅ z
    V‚Ü¶w‚ààDœÅ‚ÇÉ : V ‚Ü¶ w ‚àà D œÅ‚ÇÉ
    V‚Ü¶w‚ààDœÅ‚ÇÉ = mD œÅ‚ÇÅ‚äÜœÅ‚ÇÉ (V ‚Ü¶ w) V‚Ü¶w‚ààDœÅ‚ÇÅ
    œÅ‚ÇÇ‚äÜœÅ‚ÇÑ = Œª x v z ‚Üí inj‚ÇÇ z
    V‚äÜEœÅ‚ÇÉ : mem V ‚äÜ E œÅ‚ÇÉ
    V‚äÜEœÅ‚ÇÉ v v‚ààV = mE œÅ‚ÇÇ‚äÜœÅ‚ÇÑ v (V‚äÜEœÅ‚ÇÇ v v‚ààV)
    w‚ààD‚ñ™EœÅ‚ÇÉ : w ‚àà (D œÅ‚ÇÉ) ‚ñ™ (E œÅ‚ÇÉ)
    w‚ààD‚ñ™EœÅ‚ÇÉ = ‚ü® V , ‚ü® V‚Ü¶w‚ààDœÅ‚ÇÉ , ‚ü® V‚äÜEœÅ‚ÇÉ , V‚â¢[] ‚ü© ‚ü© ‚ü©

Œõ-continuous : ‚àÄ{E : Env  ‚Üí ùí´ Value}{œÅ}{NE-œÅ}{v}
  ‚Üí v ‚àà Œõ (Œª D ‚Üí E (D ‚Ä¢ œÅ))
  ‚Üí (‚àÄ V ‚Üí V ‚â¢ [] ‚Üí (v : Value)
     ‚Üí continuous-‚àà E (mem V ‚Ä¢ œÅ) v)
  ‚Üí monotone-env E
  ‚Üí Œ£[ œÅ‚Ä≤ ‚àà Env ] fin-env œÅ‚Ä≤ √ó œÅ‚Ä≤ ‚äÜ‚Çë œÅ √ó v ‚àà Œõ (Œª D ‚Üí E (D ‚Ä¢ œÅ‚Ä≤))
Œõ-continuous {E}{œÅ}{NE-œÅ}{V ‚Ü¶ w} ‚ü® w‚ààEV‚Ä¢œÅ , V‚â¢[] ‚ü© IH mE
    with IH V V‚â¢[] w w‚ààEV‚Ä¢œÅ
... | ‚ü® œÅ‚Ä≤ , ‚ü® fœÅ‚Ä≤ , ‚ü® œÅ‚Ä≤‚äÜV‚Ä¢œÅ , w‚ààEœÅ‚Ä≤ ‚ü© ‚ü© ‚ü© =
    ‚ü® (Œª x ‚Üí œÅ‚Ä≤ (suc x)) , ‚ü® (Œª x ‚Üí fœÅ‚Ä≤ (suc x)) , ‚ü® (Œª x ‚Üí œÅ‚Ä≤‚äÜV‚Ä¢œÅ (suc x)) ,
    ‚ü® mE{œÅ‚Ä≤}{mem V ‚Ä¢ (Œª x ‚Üí œÅ‚Ä≤ (suc x))} G w w‚ààEœÅ‚Ä≤ , V‚â¢[] ‚ü© ‚ü© ‚ü© ‚ü©
    where G : (x : Var) ‚Üí œÅ‚Ä≤ x ‚äÜ (mem V ‚Ä¢ (Œª x‚ÇÅ ‚Üí œÅ‚Ä≤ (suc x‚ÇÅ))) x
          G zero v v‚ààœÅ‚Ä≤x = œÅ‚Ä≤‚äÜV‚Ä¢œÅ 0 v v‚ààœÅ‚Ä≤x
          G (suc x) v v‚ààœÅ‚Ä≤x = v‚ààœÅ‚Ä≤x
Œõ-continuous {E}{œÅ}{NE-œÅ}{ŒΩ} v‚ààŒõ IH mE =
  ‚ü® initial-fin-env œÅ NE-œÅ , ‚ü® initial-fin œÅ NE-œÅ , ‚ü® initial-fin-‚äÜ œÅ NE-œÅ ,
      tt ‚ü© ‚ü© ‚ü©

‚ü¶‚üß-continuous-‚äÜ : ‚àÄ{{_ : Semantics}}{œÅ}{NE-œÅ : nonempty-env œÅ}
    (M : ABT) ‚Üí continuous-‚äÜ ‚ü¶ M ‚üß œÅ
‚ü¶‚üß-continuous-‚äÜ {œÅ = œÅ} {NE-œÅ} M [] V‚äÜ‚ü¶M‚üßœÅ v‚ààV‚áícont =
  ‚ü® initial-fin-env œÅ NE-œÅ , ‚ü® initial-fin œÅ NE-œÅ , ‚ü® initial-fin-‚äÜ œÅ NE-œÅ ,
    (Œª d ()) ‚ü© ‚ü© ‚ü©
‚ü¶‚üß-continuous-‚äÜ {œÅ = œÅ} {NE-œÅ} M (v ‚à∑ E) v‚à∑E‚äÜ‚ü¶M‚üßœÅ v‚ààV‚áícont
    with ‚ü¶‚üß-continuous-‚äÜ {œÅ = œÅ}{NE-œÅ} M E (Œª d z ‚Üí v‚à∑E‚äÜ‚ü¶M‚üßœÅ d (there z))
                (Œª w w‚ààE w‚ààMœÅ ‚Üí v‚ààV‚áícont w (there w‚ààE) w‚ààMœÅ)
... | ‚ü® œÅ‚ÇÅ , ‚ü® fœÅ‚ÇÅ , ‚ü® œÅ‚ÇÅ‚äÜœÅ , E‚äÜ‚ü¶M‚üßœÅ‚ÇÅ ‚ü© ‚ü© ‚ü©
    with v‚ààV‚áícont v (here refl) (v‚à∑E‚äÜ‚ü¶M‚üßœÅ v (here refl))
... | ‚ü® œÅ‚ÇÇ , ‚ü® fœÅ‚ÇÇ , ‚ü® œÅ‚ÇÇ‚äÜœÅ , v‚àà‚ü¶M‚üßœÅ‚ÇÇ ‚ü© ‚ü© ‚ü© =    
    ‚ü® œÅ‚ÇÉ , ‚ü® (join-fin-env fœÅ‚ÇÅ fœÅ‚ÇÇ) , ‚ü® (join-lub œÅ‚ÇÅ‚äÜœÅ œÅ‚ÇÇ‚äÜœÅ) ,
    G ‚ü© ‚ü© ‚ü©
    where
    œÅ‚ÇÉ = œÅ‚ÇÅ ‚äî‚Çë œÅ‚ÇÇ
    G : (d : Value) ‚Üí mem (v ‚à∑ E) d ‚Üí d ‚àà ‚ü¶ M ‚üß œÅ‚ÇÉ
    G d (here refl) = ‚ü¶‚üß-monotone {œÅ‚ÇÇ}{œÅ‚ÇÉ} M join-‚äÜ-right v v‚àà‚ü¶M‚üßœÅ‚ÇÇ
    G d (there m) = ‚ü¶‚üß-monotone {œÅ‚ÇÅ}{œÅ‚ÇÉ} M join-‚äÜ-left d (E‚äÜ‚ü¶M‚üßœÅ‚ÇÅ d m)

{- the main lemma -}
‚ü¶‚üß-continuous-env : ‚àÄ{{_ : ContinuousSemantics}}{œÅ}{NE-œÅ : nonempty-env œÅ}
    (M : ABT)
  ‚Üí ‚àÄ v ‚Üí continuous-‚àà ‚ü¶ M ‚üß œÅ v
‚ü¶‚üß-cont-env-arg : ‚àÄ{{_ : ContinuousSemantics}}
    {œÅ}{NE-œÅ : nonempty-env œÅ} {b}(arg : Arg b)
  ‚Üí Cont-Env-Arg œÅ NE-œÅ b arg 
‚ü¶‚üß-cont-env-args : ‚àÄ{{_ : ContinuousSemantics}}
    {œÅ}{NE-œÅ : nonempty-env œÅ}{bs} (args : Args bs)
  ‚Üí pred-args (Cont-Env-Arg œÅ NE-œÅ) bs args

‚ü¶‚üß-continuous-env {œÅ}{NE-œÅ} (` x) v v‚àà‚ü¶M‚üßœÅ =
   ‚ü® (single-env x ‚åà v ‚åâ œÅ NE-œÅ) , ‚ü® (single-fin {v}{x}) , ‚ü® (single-‚äÜ v‚àà‚ü¶M‚üßœÅ) ,
     (v‚ààsingle[xv]x {v}{x}) ‚ü© ‚ü© ‚ü©

‚ü¶‚üß-continuous-env {œÅ}{NE-œÅ} (op ‚¶Ö args ‚¶Ü) v v‚àà‚ü¶M‚üßœÅ =
    continuous-op{NE-œÅ = NE-œÅ} v‚àà‚ü¶M‚üßœÅ (‚ü¶‚üß-cont-env-args {œÅ}{NE-œÅ} args)
‚ü¶‚üß-cont-env-arg {œÅ} {NE-œÅ} {‚ñ†} (ast M) v v‚àà‚ü¶M‚üßœÅ =
    ‚ü¶‚üß-continuous-env {œÅ}{NE-œÅ = NE-œÅ} M v v‚àà‚ü¶M‚üßœÅ
‚ü¶‚üß-cont-env-arg {œÅ} {NE-œÅ} {ŒΩ b} (bind arg) V V‚â¢[] =
   let NE-V‚Ä¢œÅ = (extend-nonempty-env NE-œÅ (E‚â¢[]‚áínonempty-mem V‚â¢[])) in
   ‚ü¶‚üß-cont-env-arg {mem V ‚Ä¢ œÅ}{NE-V‚Ä¢œÅ} {b} arg
‚ü¶‚üß-cont-env-arg {œÅ} {NE-œÅ} {‚àÅ b} (clear arg) = lift tt

‚ü¶‚üß-cont-env-args {œÅ} {NE-œÅ} {[]} nil = lift tt
‚ü¶‚üß-cont-env-args {œÅ} {NE-œÅ} {b ‚à∑ bs} (cons arg args) =
    ‚ü® ‚ü¶‚üß-cont-env-arg {œÅ}{NE-œÅ}{b} arg ,
      ‚ü¶‚üß-cont-env-args {œÅ} {NE-œÅ} {bs} args ‚ü©



