{-# OPTIONS --allow-unsolved-metas #-}

module NewDOpCurried where

{-

  This is an adaptation of the call-by-name models P(œâ) of Scott
  (1976) and D‚Çê of Engeler (1981) to call-by-value.

-}

open import Primitives
open import Utilities using (extensionality)
open import SetsAsPredicates
open import Var
open import Substitution using (_‚Ä¢_)
open import ScopedTuple hiding (ùí´)
open import Syntax using (Sig; ext; ŒΩ; ‚ñ†; Var; _‚Ä¢_; ‚Üë; id; _‚®ü_) public
open import Sig
open import NewResultsCurried

open import Data.Empty using (‚ä•-elim) renaming (‚ä• to False)
open import Data.List using (List ; _‚à∑_ ; []; _++_; length; replicate)
open import Data.List.Relation.Unary.Any using (Any; here; there)
open import Data.List.Relation.Unary.All 
  using (All; []; _‚à∑_; head; tail; lookup; tabulate; all?)
  renaming (map to allmap)
open import Data.List.Relation.Binary.Pointwise using (Pointwise; []; _‚à∑_)
open import Data.List.Properties using (++-conicalÀ°)
open import Data.List.Membership.Propositional renaming (_‚àà_ to _‚ãµ_)
open import Data.List.Membership.Propositional.Properties
  using (‚àà-++‚Å∫À°; ‚àà-++‚Å∫ ≥)
open import Data.Nat using (‚Ñï; zero; suc; _‚âü_; _<_; z‚â§n; s‚â§s; _+_)
open import Data.Nat.Properties
open import Data.Product using (_√ó_; Œ£; Œ£-syntax; proj‚ÇÅ; proj‚ÇÇ)
    renaming (_,_ to ‚ü®_,_‚ü©)
open import Data.Sum using (_‚äé_; inj‚ÇÅ; inj‚ÇÇ; [_,_])
open import Data.Unit using (tt) renaming (‚ä§ to True)
open import Data.Unit.Polymorphic using (‚ä§) renaming (tt to ptt)
open import Relation.Binary.PropositionalEquality
    using (_‚â°_; _‚â¢_; refl; sym; trans; subst)
open import Level using (Level; Lift; lift; lower)
    renaming (zero to lzero; suc to lsuc)
open import Relation.Nullary using (¬¨_; Dec; yes; no)




{- Products (flat tuples) -----------------------------------------------------}
{- Thought: just do this with full tuples with flat tuples as a special case -}

Œ† : ‚àÄ {‚Ñì} ‚Üí ‚Ñï ‚Üí Set ‚Ñì ‚Üí Set ‚Ñì
Œ† n T = Tuple (replicate n ‚ñ†) (Result T)

Œ†-map : ‚àÄ {‚Ñì‚ÇÅ ‚Ñì‚ÇÇ} {A : Set ‚Ñì‚ÇÅ} {B : Set ‚Ñì‚ÇÇ} {n}
  ‚Üí (f : A ‚Üí B) ‚Üí Œ† n A ‚Üí Œ† n B
Œ†-map {n = zero} f (lift lower) = lift tt
Œ†-map {n = suc n} f ‚ü® fst , snd ‚ü© = ‚ü® f fst , Œ†-map f snd ‚ü©

toŒ† : ‚àÄ {‚Ñì} {A : Set ‚Ñì} (xs : List A) ‚Üí Œ† (length xs) A
toŒ† [] = lift tt
toŒ† (x ‚à∑ xs) = ‚ü® x , toŒ† xs ‚ü©

toList : ‚àÄ {‚Ñì} {A : Set ‚Ñì} {n} ‚Üí Œ† n A ‚Üí List A
toList {n = zero} _ = []
toList {n = suc n} ‚ü® x , xs ‚ü© = x ‚à∑ toList xs

all-Œ† : ‚àÄ{‚Ñì}{‚Ñì'}{n}{T : Set ‚Ñì} ‚Üí (T ‚Üí Set ‚Ñì') ‚Üí Œ† n T ‚Üí Set ‚Ñì'
all-Œ† {n = zero} P (lift tt) = ‚ä§
all-Œ† {n = suc n} P ‚ü® x , xs ‚ü© = P x  √ó  all-Œ† P xs

rel-Œ† : ‚àÄ{‚Ñì}{n}{T : Set ‚Ñì} ‚Üí (T ‚Üí T ‚Üí Set) ‚Üí Œ† n T ‚Üí Œ† n T ‚Üí Set
rel-Œ† {n = zero} R (lift tt) (lift tt) = True
rel-Œ† {n = suc n} R ‚ü® x , xs ‚ü© ‚ü® y , ys ‚ü© = R x y  √ó  rel-Œ† R xs ys

NE-Œ† : ‚àÄ {n}{T} ‚Üí Œ† n (ùí´ T) ‚Üí Set
NE-Œ† {n}{T} = all-Œ† {n = n}{T = ùí´ T} nonempty

Œ†-append : ‚àÄ{‚Ñì}{A : Set ‚Ñì}{n}{m} ‚Üí Œ† n A ‚Üí Œ† m A ‚Üí Œ† (n + m) A
Œ†-append {n = zero} {m} Ds Es = Es
Œ†-append {n = suc n} {m} ‚ü® D , Ds ‚ü© Es = ‚ü® D , (Œ†-append Ds Es) ‚ü©

rel-Œ†-refl : ‚àÄ{‚Ñì}{n}{T : Set ‚Ñì}{R : T ‚Üí T ‚Üí Set}{Ds : Œ† n T}
   ‚Üí (‚àÄ {x} ‚Üí R x x) ‚Üí rel-Œ† R Ds Ds
rel-Œ†-refl {n = zero} {T} {R} {Ds} R-refl = tt
rel-Œ†-refl {n = suc n} {T} {R} {‚ü® D , Ds ‚ü©} R-refl =
    ‚ü® R-refl , (rel-Œ†-refl R-refl) ‚ü©

rel-Œ†-sym : ‚àÄ{‚Ñì}{n}{T : Set ‚Ñì}{R : T ‚Üí T ‚Üí Set}{Ds Es : Œ† n T}
   ‚Üí (‚àÄ {x y} ‚Üí R x y ‚Üí R y x) ‚Üí rel-Œ† R Ds Es ‚Üí rel-Œ† R Es Ds
rel-Œ†-sym {n = zero} {T} {R} {lift tt} {lift tt} R-sym tt = tt
rel-Œ†-sym {n = suc n} {T} {R} {‚ü® D , Ds ‚ü©} {‚ü® E , Es ‚ü©} R-sym ‚ü® RDE , R[Ds,Es] ‚ü© =
    ‚ü® (R-sym RDE) , (rel-Œ†-sym R-sym R[Ds,Es]) ‚ü©

rel-Œ†-‚áí : ‚àÄ{‚Ñì}{n}{T : Set ‚Ñì}{xs ys : Œ† n T}{R R‚Ä≤ : T ‚Üí T ‚Üí Set}
   ‚Üí (‚àÄ x y ‚Üí R x y ‚Üí R‚Ä≤ x y) ‚Üí rel-Œ† R xs ys ‚Üí rel-Œ† R‚Ä≤ xs ys
rel-Œ†-‚áí {n = zero} R‚áíR‚Ä≤ tt = tt
rel-Œ†-‚áí {n = suc n}{T}{‚ü® x , xs ‚ü©}{‚ü® y , ys ‚ü©} R‚áíR‚Ä≤ ‚ü® Rxy , R[xs,ys] ‚ü© =
    ‚ü® R‚áíR‚Ä≤ x y Rxy , rel-Œ†-‚áí R‚áíR‚Ä≤ R[xs,ys] ‚ü©

_‚´É_ : ‚àÄ{A : Set}{n} ‚Üí Œ† n (ùí´ A) ‚Üí Œ† n (ùí´ A) ‚Üí Set
_‚´É_ {A}{n} = rel-Œ† {n = n}{T = ùí´ A} _‚äÜ_

_‚©≠_ : ‚àÄ{A : Set}{n} ‚Üí Œ† n (ùí´ A) ‚Üí Œ† n (ùí´ A) ‚Üí Set
_‚©≠_ {A}{n} = rel-Œ† {n = n}{T = ùí´ A} _‚âÉ_

‚©≠-refl = Œª {A}{n}{Ds} ‚Üí rel-Œ†-refl {n = n}{T = ùí´ A}{R = _‚âÉ_}{Ds} ‚âÉ-refl

‚©≠-sym = Œª {A}{n}{Ds}{Es} ‚Üí rel-Œ†-sym {n = n}{T = ùí´ A}{R = _‚âÉ_}{Ds}{Es} ‚âÉ-sym 

‚©≠‚áí‚äÜ : ‚àÄ{A}{n}{Ds Es : Œ† n (ùí´ A)} ‚Üí Ds ‚©≠ Es ‚Üí Ds ‚´É Es  √ó  Es ‚´É Ds
‚©≠‚áí‚äÜ {n}{Ds}{Es} Ds=Es =
    ‚ü® rel-Œ†-‚áí (Œª x y ‚Üí proj‚ÇÅ) Ds=Es , rel-Œ†-‚áí (Œª x y ‚Üí proj‚ÇÅ) (‚©≠-sym Ds=Es) ‚ü©


curry-rel : ‚àÄ {‚Ñì} {A : Set ‚Ñì} n R (ùíª ‚Ñä : Œ† n A ‚Üí A)
  ‚Üí (‚àÄ (Ds Es : Œ† n A) ‚Üí rel-Œ† R Ds Es ‚Üí R (ùíª Ds) (‚Ñä Es)) 
  ‚Üí fun-rel-pres R (replicate n ‚ñ†) ‚ñ† (curryFun ùíª) (curryFun ‚Ñä)
curry-rel zero R ùíª ‚Ñä H = lift (H (lift tt) (lift tt) tt)
curry-rel (suc n) R ùíª ‚Ñä H D E (lift D~E) = 
  curry-rel n R (Œª z ‚Üí ùíª ‚ü® D , z ‚ü©) (Œª z ‚Üí ‚Ñä ‚ü® E , z ‚ü©) 
            (Œª Ds Es z ‚Üí H ‚ü® D , Ds ‚ü© ‚ü® E , Es ‚ü© ‚ü® D~E , z ‚ü©)

uncurry-rel : ‚àÄ {‚Ñì}{A : Set ‚Ñì} n R (ùíª ‚Ñä : DenotOp A (replicate n ‚ñ†))
  ‚Üí fun-rel-pres R (replicate n ‚ñ†) ‚ñ† ùíª ‚Ñä
  ‚Üí (‚àÄ (Ds Es : Œ† n A) ‚Üí rel-Œ† R Ds Es ‚Üí R ((uncurryFun ùíª) Ds) ((uncurryFun ‚Ñä) Es))
uncurry-rel zero R ùíª ‚Ñä H D E _ = lower H
uncurry-rel (suc n) R ùíª ‚Ñä H ‚ü® D , Ds ‚ü© ‚ü® E , Es ‚ü© ‚ü® D~E , Ds~Es ‚ü© = 
   uncurry-rel n R (ùíª D) (‚Ñä E) (H D E (lift D~E)) Ds Es Ds~Es


{- Denotational Values --------------------------------------------------------}

data Value : Set where
  const : {B : Base} ‚Üí base-rep B ‚Üí Value  {- A primitive constant of type B. -}
  _‚ä¢_‚Ü¶_ : List Value ‚Üí List Value ‚Üí Value ‚Üí Value
      {- An entry in a function's graph. -}
  ŒΩ : Value      {- The empty function -}
  œâ : Value      {- An error value, to serve as a default value in Envs and
                    to differentiate from converging -}
  ‚¶Ö_,_‚¶Ü : Value ‚Üí Value ‚Üí Value            {- Pairs -}
  ‚à•_‚à• : List Value ‚Üí Value                 {- Tuples -}
  left : List Value ‚Üí Value                {- Sums -}
  right : List Value ‚Üí Value               {- Sums -}


{- Consistency ----------------------------------------------------------------}

infix 5 _~_
infix 5 _‚âà_

_‚âà_ : List Value ‚Üí List Value ‚Üí Set
_~_ : Value ‚Üí Value ‚Üí Set
const {B} x ~ const {B‚ÇÅ} x‚ÇÅ with base-eq? B B‚ÇÅ
... | yes refl = x ‚â° x‚ÇÅ
... | no neq = False
const x ~ (x‚ÇÅ ‚ä¢ x‚ÇÇ ‚Ü¶ v) = False
const x ~ ŒΩ = False
const x ~ œâ = False  
const x ~ ‚¶Ö v , v‚ÇÅ ‚¶Ü = False
const x ~ ‚à• x‚ÇÅ ‚à• = False
const x ~ left x‚ÇÅ = False
const x ~ right x‚ÇÅ = False
(x ‚ä¢ x‚ÇÅ ‚Ü¶ u) ~ const x‚ÇÇ = False
(us ‚ä¢ v ‚Ü¶ w) ~ (us‚ÇÅ ‚ä¢ v‚ÇÅ ‚Ü¶ w‚ÇÅ) = (¬¨ v ‚âà v‚ÇÅ) ‚äé ( v ‚âà v‚ÇÅ √ó w¬†~ w‚ÇÅ )
(x ‚ä¢ x‚ÇÅ ‚Ü¶ u) ~ ŒΩ = True
(x ‚ä¢ x‚ÇÅ ‚Ü¶ u) ~ œâ = False
(x ‚ä¢ x‚ÇÅ ‚Ü¶ u) ~ ‚¶Ö v , v‚ÇÅ ‚¶Ü = False
(x ‚ä¢ x‚ÇÅ ‚Ü¶ u) ~ ‚à• x‚ÇÇ ‚à• = False
(x ‚ä¢ x‚ÇÅ ‚Ü¶ u) ~ left x‚ÇÇ = False
(x ‚ä¢ x‚ÇÅ ‚Ü¶ u) ~ right x‚ÇÇ = False
ŒΩ ~ const x = False
ŒΩ ~ (x ‚ä¢ x‚ÇÅ ‚Ü¶ v) = True
ŒΩ ~ ŒΩ = True
ŒΩ ~ œâ = False
ŒΩ ~ ‚¶Ö v , v‚ÇÅ ‚¶Ü = False
ŒΩ ~ ‚à• x ‚à• = False
ŒΩ ~ left x = False
ŒΩ ~ right x = False
œâ ~ const x = False
œâ ~ (x ‚ä¢ x‚ÇÅ ‚Ü¶ v) = False
œâ ~ ŒΩ = False
œâ ~ œâ = True {- starting with œâ related with just itself -}
œâ ~ ‚¶Ö v , v‚ÇÅ ‚¶Ü = False
œâ ~ ‚à• x ‚à• = False
œâ ~ left x = False
œâ ~ right x = False
‚¶Ö u , u‚ÇÅ ‚¶Ü ~ const x = False
‚¶Ö u , u‚ÇÅ ‚¶Ü ~ (x ‚ä¢ x‚ÇÅ ‚Ü¶ v) = False
‚¶Ö u , u‚ÇÅ ‚¶Ü ~ ŒΩ = False
‚¶Ö u , u‚ÇÅ ‚¶Ü ~ œâ = False
‚¶Ö u , u‚ÇÅ ‚¶Ü ~ ‚¶Ö v , v‚ÇÅ ‚¶Ü = u ~ v √ó u‚ÇÅ ~ v‚ÇÅ
‚¶Ö u , u‚ÇÅ ‚¶Ü ~ ‚à• x ‚à• = False
‚¶Ö u , u‚ÇÅ ‚¶Ü ~ left x = False
‚¶Ö u , u‚ÇÅ ‚¶Ü ~ right x = False
‚à• x ‚à• ~ const x‚ÇÅ = False
‚à• x ‚à• ~ (x‚ÇÅ ‚ä¢ x‚ÇÇ ‚Ü¶ v) = False
‚à• x ‚à• ~ ŒΩ = False
‚à• x ‚à• ~ œâ = False
‚à• x ‚à• ~ ‚¶Ö v , v‚ÇÅ ‚¶Ü = False
‚à• [] ‚à• ~ ‚à• [] ‚à• = True
‚à• [] ‚à• ~ ‚à• x ‚à∑ x‚ÇÅ ‚à• = False
‚à• x ‚à∑ x‚ÇÇ ‚à• ~ ‚à• [] ‚à• = False
‚à• x ‚à∑ xs ‚à• ~ ‚à• x‚ÇÅ ‚à∑ xs‚ÇÅ ‚à• = x ~ x‚ÇÅ √ó ‚à• xs ‚à• ~ ‚à• xs‚ÇÅ ‚à•
‚à• x ‚à• ~ left x‚ÇÅ = False
‚à• x ‚à• ~ right x‚ÇÅ = False
left x ~ const x‚ÇÅ = False
left x ~ (x‚ÇÅ ‚ä¢ x‚ÇÇ ‚Ü¶ v) = False
left x ~ ŒΩ = False
left x ~ œâ = False
left x ~ ‚¶Ö v , v‚ÇÅ ‚¶Ü = False
left x ~ ‚à• x‚ÇÅ ‚à• = False
left x ~ left x‚ÇÅ = x ‚âà x‚ÇÅ
left x ~ right x‚ÇÅ = False
right x ~ const x‚ÇÅ = False
right x ~ (x‚ÇÅ ‚ä¢ x‚ÇÇ ‚Ü¶ v) = False
right x ~ ŒΩ = False
right x ~ œâ = False
right x ~ ‚¶Ö v , v‚ÇÅ ‚¶Ü = False
right x ~ ‚à• x‚ÇÅ ‚à• = False
right x ~ left x‚ÇÅ = False
right x ~ right x‚ÇÅ = x ‚âà x‚ÇÅ

[] ‚âà vs = True 
(u ‚à∑ us) ‚âà vs = All (u ~_) vs √ó us ‚âà vs

‚âà[] : ‚àÄ V ‚Üí V ‚âà []
‚âà[] [] = tt
‚âà[] (x ‚à∑ V) = ‚ü® All.[] , ‚âà[] V ‚ü©

‚âàhead : ‚àÄ U v V ‚Üí U ‚âà (v ‚à∑ V) ‚Üí All (_~ v) U
‚âàhead [] v V U~vV = []
‚âàhead (x ‚à∑ U) v V ‚ü® x~v ‚à∑ x~V , snd ‚ü© = x~v ‚à∑ ‚âàhead U v V snd

‚âàtail : ‚àÄ U v V ‚Üí U ‚âà (v ‚à∑ V) ‚Üí U ‚âà V
‚âàtail [] v V U~vV = tt
‚âàtail (x ‚à∑ U) v V ‚ü® x~v ‚à∑ x~V , snd ‚ü© = 
  ‚ü® x~V , ‚âàtail U v V snd ‚ü©


‚âà-sym : ‚àÄ U V ‚Üí U ‚âà V ‚Üí V ‚âà U
~-sym-All : ‚àÄ u V ‚Üí All (_~ u) V ‚Üí All (_~_ u) V
~-sym : ‚àÄ u v ‚Üí u ~ v ‚Üí v ~ u
~-sym (const {B} x) (const {B‚ÇÅ} x‚ÇÅ) u~v 
  with base-eq? B B‚ÇÅ | u~v
... | yes refl | refl = u~v
... | no neq | ()
~-sym (fvs ‚ä¢ V ‚Ü¶ w) (fvs' ‚ä¢ V' ‚Ü¶ w') (inj‚ÇÅ ¬¨V~V') = 
  inj‚ÇÅ Œª z ‚Üí ¬¨V~V' (‚âà-sym V' V z)
~-sym (fvs ‚ä¢ V ‚Ü¶ w) (fvs' ‚ä¢ V' ‚Ü¶ w') (inj‚ÇÇ ‚ü® V~V' , w~w' ‚ü©) = 
  inj‚ÇÇ ‚ü® ‚âà-sym V V' V~V' , ~-sym w w' w~w' ‚ü©
~-sym (x ‚ä¢ x‚ÇÅ ‚Ü¶ u) ŒΩ u~v = tt
~-sym ŒΩ (x ‚ä¢ x‚ÇÅ ‚Ü¶ v) u~v = tt
~-sym ŒΩ ŒΩ u~v = tt
~-sym œâ œâ u~v = tt
~-sym ‚¶Ö u , u‚ÇÅ ‚¶Ü ‚¶Ö v , v‚ÇÅ ‚¶Ü ‚ü® fst , snd ‚ü© = 
  ‚ü® ~-sym u v fst , ~-sym u‚ÇÅ v‚ÇÅ snd ‚ü©
~-sym ‚à• [] ‚à• ‚à• [] ‚à• u~v = tt
~-sym ‚à• x ‚à∑ x‚ÇÇ ‚à• ‚à• x‚ÇÅ ‚à∑ x‚ÇÉ ‚à• ‚ü® fst , rst ‚ü© = 
  ‚ü® ~-sym x x‚ÇÅ fst , ~-sym ‚à• x‚ÇÇ ‚à• ‚à• x‚ÇÉ ‚à• rst ‚ü©
~-sym (left x) (left x‚ÇÅ) u~v = ‚âà-sym x x‚ÇÅ u~v
~-sym (right x) (right x‚ÇÅ) u~v = ‚âà-sym x x‚ÇÅ u~v

~-sym-All u [] [] = []
~-sym-All u (x ‚à∑ xs) (px ‚à∑ V~u) = 
  ~-sym x u px ‚à∑ ~-sym-All u xs V~u

‚âà-sym U [] U‚âàV = tt
‚âà-sym U (x ‚à∑ V) U‚âàV = 
  ‚ü® ~-sym-All x U (‚âàhead U x V U‚âàV) 
  , ‚âà-sym U V (‚âàtail U x V U‚âàV) ‚ü©

_√ódec_ : ‚àÄ {A B : Set} ‚Üí Dec A ‚Üí Dec B ‚Üí Dec (A √ó B)
(yes a) √ódec (yes b) = yes ‚ü® a , b ‚ü©
(yes a) √ódec (no b) = no (Œª z ‚Üí b (proj‚ÇÇ z))
(no a) √ódec decb = no (Œª z ‚Üí a (proj‚ÇÅ z))

_‚âà?_ : (U V : List Value) ‚Üí Dec (U ‚âà V)
_~>?_ : (u : Value) (V : List Value) ‚Üí Dec (All (u ~_) V)
_~?_ : (u v : Value) ‚Üí Dec (u ~ v)
const {B} x ~? const {B'} x‚ÇÅ with base-eq? B B'
... | no neq = no (Œª z ‚Üí z)
... | yes refl = base-rep-eq? x x‚ÇÅ
const x ~? (x‚ÇÅ ‚ä¢ x‚ÇÇ ‚Ü¶ v) = no (Œª z ‚Üí z)
const x ~? ŒΩ = no (Œª z ‚Üí z)
const x ~? œâ = no (Œª z ‚Üí z)
const x ~? ‚¶Ö v , v‚ÇÅ ‚¶Ü = no (Œª z ‚Üí z)
const x ~? ‚à• x‚ÇÅ ‚à• = no (Œª z ‚Üí z)
const x ~? left x‚ÇÅ = no (Œª z ‚Üí z)
const x ~? right x‚ÇÅ = no (Œª z ‚Üí z)
(x ‚ä¢ x‚ÇÅ ‚Ü¶ u) ~? const x‚ÇÇ = no (Œª z ‚Üí z)
(fvs ‚ä¢ V ‚Ü¶ w) ~? (fvs' ‚ä¢ V' ‚Ü¶ w') with V ‚âà? V'
... | no ¬¨V~V' = yes (inj‚ÇÅ ¬¨V~V')
... | yes V~V' with w ~? w'
... | no ¬¨w~w' = no (Œª z ‚Üí [ (Œª x ‚Üí x V~V') 
                           , (Œª x ‚Üí ¬¨w~w' (proj‚ÇÇ x)) ] z )
... | yes w~w' = yes (inj‚ÇÇ ‚ü® V~V' , w~w' ‚ü©)
(x ‚ä¢ x‚ÇÅ ‚Ü¶ u) ~? ŒΩ = yes tt
(x ‚ä¢ x‚ÇÅ ‚Ü¶ u) ~? œâ = no (Œª z ‚Üí z)
(x ‚ä¢ x‚ÇÅ ‚Ü¶ u) ~? ‚¶Ö v , v‚ÇÅ ‚¶Ü = no (Œª z ‚Üí z)
(x ‚ä¢ x‚ÇÅ ‚Ü¶ u) ~? ‚à• x‚ÇÇ ‚à• = no (Œª z ‚Üí z)
(x ‚ä¢ x‚ÇÅ ‚Ü¶ u) ~? left x‚ÇÇ = no (Œª z ‚Üí z)
(x ‚ä¢ x‚ÇÅ ‚Ü¶ u) ~? right x‚ÇÇ = no (Œª z ‚Üí z)
ŒΩ ~? const x = no (Œª z ‚Üí z)
ŒΩ ~? (x ‚ä¢ x‚ÇÅ ‚Ü¶ v) = yes tt
ŒΩ ~? ŒΩ = yes tt
ŒΩ ~? œâ = no (Œª z ‚Üí z)
ŒΩ ~? ‚¶Ö v , v‚ÇÅ ‚¶Ü = no (Œª z ‚Üí z)
ŒΩ ~? ‚à• x ‚à• = no (Œª z ‚Üí z)
ŒΩ ~? left x = no (Œª z ‚Üí z)
ŒΩ ~? right x = no (Œª z ‚Üí z)
œâ ~? const x = no (Œª z ‚Üí z)
œâ ~? (x ‚ä¢ x‚ÇÅ ‚Ü¶ v) = no (Œª z ‚Üí z)
œâ ~? ŒΩ = no (Œª z ‚Üí z)
œâ ~? œâ = yes tt
œâ ~? ‚¶Ö v , v‚ÇÅ ‚¶Ü = no (Œª z ‚Üí z)
œâ ~? ‚à• x ‚à• = no (Œª z ‚Üí z)
œâ ~? left x = no (Œª z ‚Üí z)
œâ ~? right x = no (Œª z ‚Üí z)
‚¶Ö u , u‚ÇÅ ‚¶Ü ~? const x = no (Œª z ‚Üí z)
‚¶Ö u , u‚ÇÅ ‚¶Ü ~? (x ‚ä¢ x‚ÇÅ ‚Ü¶ v) = no (Œª z ‚Üí z)
‚¶Ö u , u‚ÇÅ ‚¶Ü ~? ŒΩ = no (Œª z ‚Üí z)
‚¶Ö u , u‚ÇÅ ‚¶Ü ~? œâ = no (Œª z ‚Üí z)
‚¶Ö u , u‚ÇÅ ‚¶Ü ~? ‚¶Ö v , v‚ÇÅ ‚¶Ü = (u ~? v) √ódec (u‚ÇÅ ~? v‚ÇÅ)
‚¶Ö u , u‚ÇÅ ‚¶Ü ~? ‚à• x ‚à• = no (Œª z ‚Üí z)
‚¶Ö u , u‚ÇÅ ‚¶Ü ~? left x = no (Œª z ‚Üí z)
‚¶Ö u , u‚ÇÅ ‚¶Ü ~? right x = no (Œª z ‚Üí z)
‚à• x ‚à• ~? const x‚ÇÅ = no (Œª z ‚Üí z)
‚à• x ‚à• ~? (x‚ÇÅ ‚ä¢ x‚ÇÇ ‚Ü¶ v) = no (Œª z ‚Üí z)
‚à• x ‚à• ~? ŒΩ = no (Œª z ‚Üí z)
‚à• x ‚à• ~? œâ = no (Œª z ‚Üí z)
‚à• x ‚à• ~? ‚¶Ö v , v‚ÇÅ ‚¶Ü = no (Œª z ‚Üí z)
‚à• [] ‚à• ~? ‚à• [] ‚à• = yes tt
‚à• [] ‚à• ~? ‚à• x ‚à∑ x‚ÇÅ ‚à• = no (Œª z ‚Üí z)
‚à• x ‚à∑ x‚ÇÇ ‚à• ~? ‚à• [] ‚à• = no (Œª z ‚Üí z)
‚à• x ‚à∑ x‚ÇÇ ‚à• ~? ‚à• x‚ÇÅ ‚à∑ x‚ÇÉ ‚à• = (x ~? x‚ÇÅ) √ódec (‚à• x‚ÇÇ ‚à• ~? ‚à• x‚ÇÉ ‚à•)
‚à• x ‚à• ~? left x‚ÇÅ = no (Œª z ‚Üí z)
‚à• x ‚à• ~? right x‚ÇÅ = no (Œª z ‚Üí z)
left x ~? const x‚ÇÅ = no (Œª z ‚Üí z)
left x ~? (x‚ÇÅ ‚ä¢ x‚ÇÇ ‚Ü¶ v) = no (Œª z ‚Üí z)
left x ~? ŒΩ = no (Œª z ‚Üí z)
left x ~? œâ = no (Œª z ‚Üí z)
left x ~? ‚¶Ö v , v‚ÇÅ ‚¶Ü = no (Œª z ‚Üí z)
left x ~? ‚à• x‚ÇÅ ‚à• = no (Œª z ‚Üí z)
left x ~? left x‚ÇÅ = x ‚âà? x‚ÇÅ
left x ~? right x‚ÇÅ = no (Œª z ‚Üí z)
right x ~? const x‚ÇÅ = no (Œª z ‚Üí z)
right x ~? (x‚ÇÅ ‚ä¢ x‚ÇÇ ‚Ü¶ v) = no (Œª z ‚Üí z)
right x ~? ŒΩ = no (Œª z ‚Üí z)
right x ~? œâ = no (Œª z ‚Üí z)
right x ~? ‚¶Ö v , v‚ÇÅ ‚¶Ü = no (Œª z ‚Üí z)
right x ~? ‚à• x‚ÇÅ ‚à• = no (Œª z ‚Üí z)
right x ~? left x‚ÇÅ = no (Œª z ‚Üí z)
right x ~? right x‚ÇÅ = x ‚âà? x‚ÇÅ

u ~>? [] = yes All.[]
u ~>? (x ‚à∑ V) with u ~? x
... | no ¬¨u~x = no (Œª z ‚Üí ¬¨u~x (head z))
... | yes u~x with u ~>? V 
... | no ¬¨u~V = no Œª z ‚Üí ¬¨u~V (tail z)
... | yes U~V = yes (u~x All.‚à∑ U~V)

[] ‚âà? V = yes tt
(x ‚à∑ U) ‚âà? V with x ~>? V
... | no ¬¨x~V = no (Œª z ‚Üí ¬¨x~V (proj‚ÇÅ z))
... | yes x~V with U ‚âà? V
... | no ¬¨U~V = no (Œª z ‚Üí ¬¨U~V (proj‚ÇÇ z))
... | yes U~V = yes ‚ü® x~V , U~V ‚ü©



‚âà‚áíEvery : ‚àÄ A B ‚Üí A ‚âà B ‚Üí Every _~_ (mem A) (mem B)
‚âà‚áíEvery (x ‚à∑ A) B ‚ü® x~B , A~B ‚ü© a b (here refl) b‚ààB = 
  lookup x~B b‚ààB
‚âà‚áíEvery (x ‚à∑ A) B ‚ü® x~B , A~B ‚ü© a b (there a‚ààA) b‚ààB = 
  ‚âà‚áíEvery A B A~B a b a‚ààA b‚ààB

Every‚áí‚âà : ‚àÄ A B ‚Üí Every _~_ (mem A) (mem B) ‚Üí A ‚âà B
Every‚áí‚âà [] B A~B = tt
Every‚áí‚âà (x ‚à∑ A) B A~B = 
  ‚ü® tabulate (Œª {b} b‚ààB ‚Üí A~B x b (here refl) b‚ààB) 
  , Every‚áí‚âà A B (Œª a b a‚ààA b‚ààB ‚Üí A~B a b (there a‚ààA) b‚ààB) ‚ü©

{- Denotational Operators -----------------------------------------------------}

{-
_‚ãÜ_  Œõ  cons  car  cdr  ‚Ñí  ‚Ñõ  ùíû  (proj i)  (ùíØ' n)  (ùíØ n)  Œõ'  Œõ‚Ä≤
-}

infix 10 _‚ãÜ_  {- \st -}
_‚ãÜ_ : DenotOp (ùí´ Value) (‚ñ† ‚à∑ ‚ñ† ‚à∑ [])
D‚ÇÅ ‚ãÜ D‚ÇÇ = Œª w ‚Üí Œ£[ V ‚àà List Value ] Œ£[ fvs ‚àà List Value ] (fvs ‚ä¢ V ‚Ü¶ w ‚àà D‚ÇÅ)
                  √ó  (mem V ‚äÜ D‚ÇÇ)  √ó  V ‚â¢ []

‚Ñ¨ : (B : Base) ‚Üí base-rep B ‚Üí DenotOp (ùí´ Value) []
‚Ñ¨ B k (const {B‚Ä≤} k‚Ä≤)
    with base-eq? B B‚Ä≤
... | yes refl = k ‚â° k‚Ä≤
... | no neq = False
‚Ñ¨ B k _ = False

ùìÖ : (P : Prim) ‚Üí rep P ‚Üí DenotOp (ùí´ Value) []
ùìÖ (base B) k v = ‚Ñ¨ B k v
ùìÖ (B ‚áí P) f (const k) = False
ùìÖ (B ‚áí P) f (fvs ‚ä¢ V ‚Ü¶ w) =
   Œ£[ k ‚àà base-rep B ] V ‚â° (const {B} k) ‚à∑ []  √ó  w ‚àà ùìÖ P (f k)
ùìÖ (B ‚áí P) f ŒΩ = True
ùìÖ (B ‚áí P) f œâ = False
ùìÖ (B ‚áí P) k ‚¶Ö u , v ‚¶Ü = False
ùìÖ (B ‚áí P) k ‚à• vs ‚à• = False
ùìÖ (B ‚áí P) k (left V) = False
ùìÖ (B ‚áí P) k (right V) = False


‚ü™_,_‚ü´ : DenotOp (ùí´ Value) (‚ñ† ‚à∑ ‚ñ† ‚à∑ [])
‚ü™ D‚ÇÅ , D‚ÇÇ ‚ü´ ‚¶Ö u , v ‚¶Ü = u ‚àà D‚ÇÅ √ó v ‚àà D‚ÇÇ
‚ü™ D‚ÇÅ , D‚ÇÇ ‚ü´ _ = False

car : DenotOp (ùí´ Value) (‚ñ† ‚à∑ [])
car D u = Œ£[ v ‚àà Value ] ‚¶Ö u , v ‚¶Ü ‚àà D

cdr : DenotOp (ùí´ Value) (‚ñ† ‚à∑ [])
cdr D v = Œ£[ u ‚àà Value ] ‚¶Ö u , v ‚¶Ü ‚àà D

ùíØ-cons : DenotOp (ùí´ Value) (‚ñ† ‚à∑ ‚ñ† ‚à∑ [])
ùíØ-cons D ùíØDs ‚à• d ‚à∑ ds ‚à• = d ‚àà D √ó ‚à• ds ‚à• ‚àà ùíØDs
ùíØ-cons D ùíØDs d = False

ùíØ : ‚àÄ n ‚Üí DenotOp (ùí´ Value) (replicate n ‚ñ†)
ùíØ n = Dfold ‚ñ† ‚ñ† n ùíØ-cons ‚åà ‚à• [] ‚à• ‚åâ

{-
ùíØ : ‚àÄ n ‚Üí DenotOp (ùí´ Value) (replicate n ‚ñ†)
ùíØ zero ‚à• [] ‚à• = True
ùíØ zero d = False
ùíØ (suc n) D = DComp-n-1 (replicate n ‚ñ†) ‚ñ† ‚ñ† (ùíØ n) (ùíØ-cons D)
-}

ùíú-cons : DenotOp (ùí´ Value) (‚ñ† ‚à∑ ‚ñ† ‚à∑ [])
ùíú-cons D F ((fv ‚à∑ fvs) ‚ä¢ V ‚Ü¶ w) = fv ‚àà D √ó fvs ‚ä¢ V ‚Ü¶ w ‚àà F
ùíú-cons D F d = False

{-
ùíú : ‚àÄ (n : ‚Ñï) ‚Üí DenotOp (ùí´ Value) (‚ñ† ‚à∑ replicate n ‚ñ†)
ùíú zero F = F
ùíú (suc n) F D = DComp-n-1 (replicate n ‚ñ†) ‚ñ† ‚ñ† (ùíú n F) (ùíú-cons D)
-}

ùíú : ‚àÄ n ‚Üí DenotOp (ùí´ Value) (‚ñ† ‚à∑ replicate n ‚ñ†)
ùíú n F = Dfold ‚ñ† ‚ñ† n ùíú-cons F

nth : List Value ‚Üí ‚Ñï ‚Üí Value
nth [] i = œâ
nth (v ‚à∑ vs) 0 = v
nth (v ‚à∑ vs) (suc i) = nth vs i

proj : ‚Ñï ‚Üí DenotOp (ùí´ Value) (‚ñ† ‚à∑ [])
proj i D u = Œ£[ vs ‚àà List Value ]
    i < length vs  √ó  ‚à• vs ‚à• ‚àà D  √ó  u ‚â° nth vs i

‚Ñí : DenotOp (ùí´ Value) (‚ñ† ‚à∑ [])
‚Ñí D (left V) = V ‚â¢ []  √ó  mem V ‚äÜ D
‚Ñí D _ = False

‚Ñõ : DenotOp (ùí´ Value) (‚ñ† ‚à∑ [])
‚Ñõ D (right V) = V ‚â¢ []  √ó  mem V ‚äÜ D
‚Ñõ D _ = False

ùíû : DenotOp (ùí´ Value) (‚ñ† ‚à∑ ‚ñ† ‚à∑ ‚ñ† ‚à∑ [])
ùíû D E F w = (Œ£[ V ‚àà List Value ] Œ£[ fvs ‚àà List Value ]
                 left V ‚àà D  √ó  fvs ‚ä¢ V ‚Ü¶ w ‚àà E)
          ‚äé (Œ£[ V ‚àà List Value ] Œ£[ fvs ‚àà List Value ]
                 right V ‚àà D  √ó  fvs ‚ä¢ V ‚Ü¶ w ‚àà F)

ùíû-new : DenotOp (ùí´ Value) (‚ñ† ‚à∑ ŒΩ ‚ñ† ‚à∑ ŒΩ ‚ñ† ‚à∑ [])
ùíû-new D E F w = Œ£[ V ‚àà List Value ] left V ‚àà D √ó w ‚àà E (mem V) 
          ‚äé (Œ£[ V ‚àà List Value ] right V ‚àà D √ó w ‚àà F (mem V))

Œõ : DenotOp (ùí´ Value) (ŒΩ ‚ñ† ‚à∑ [])
Œõ f (const k) = False
Œõ f ([] ‚ä¢ V ‚Ü¶ w) = w ‚àà f (mem V)  √ó  V ‚â¢ []
Œõ f ((b ‚à∑ bs) ‚ä¢ V ‚Ü¶ w) = False
Œõ f ŒΩ = True
Œõ f œâ = False
Œõ f ‚¶Ö u , v ‚¶Ü = False
Œõ f ‚à• vs ‚à• = False
Œõ f (left V) = False
Œõ f (right V) = False



{-

Œõ' : ‚àÄ (n : ‚Ñï) ‚Üí (ùí´ Value ‚Üí ùí´ Value) ‚Üí Œ† n (ùí´ Value)
               ‚Üí ùí´ Value
Œõ' n ‚ü¶fvs‚üß f (const k) = False
Œõ' n ‚ü¶fvs‚üß f (fvs ‚ä¢ V ‚Ü¶ w) = w ‚àà f (mem V) √ó V ‚â¢ [] √ó Œ£[ n‚â° ‚àà n ‚â° length fvs ]
                            rel-Œ† (_‚äÜ_) (Œ†-map mem (toŒ† fvs)) 
                                        (subst (Œª z ‚Üí Œ† z (ùí´ Value)) n‚â° ‚ü¶fvs‚üß)
Œõ' n ‚ü¶fvs‚üß f ŒΩ = True
Œõ' n ‚ü¶fvs‚üß f œâ = False
Œõ' n ‚ü¶fvs‚üß f ‚¶Ö v , v‚ÇÅ ‚¶Ü = False
Œõ' n ‚ü¶fvs‚üß f ‚à• x ‚à• = False
Œõ' n ‚ü¶fvs‚üß f (left x) = False
Œõ' n ‚ü¶fvs‚üß f (right x) = False

Œõ‚Ä≤ : ‚àÄ (n : ‚Ñï) ‚Üí DenotOp (ùí´ Value) (ŒΩ ‚ñ† ‚à∑ replicate n ‚ñ†)
Œõ‚Ä≤ n f = curryFun (Œõ' n f)

-}

{- Monotonicity and congruence of operators --------------------------------------------------}

‚ãÜ-mono : monotone (‚ñ† ‚à∑ ‚ñ† ‚à∑ []) ‚ñ† _‚ãÜ_
‚ãÜ-mono D D' (lift D‚äÜ) E E' (lift E‚äÜ) = lift G
  where
  G : D ‚ãÜ E ‚äÜ D' ‚ãÜ E'
  G d ‚ü® V , ‚ü® fvs , ‚ü® wv‚ààD , ‚ü® V<E , Vne ‚ü© ‚ü© ‚ü© ‚ü© =
     ‚ü® V , ‚ü® fvs , ‚ü® D‚äÜ (fvs ‚ä¢ V ‚Ü¶ d) wv‚ààD , ‚ü® (Œª d z ‚Üí E‚äÜ d (V<E d z)) , Vne ‚ü© ‚ü© ‚ü© ‚ü©

‚ãÜ-cong : congruent (‚ñ† ‚à∑ ‚ñ† ‚à∑ []) ‚ñ† _‚ãÜ_
‚ãÜ-cong D D' (lift ‚ü® D<D' , D'<D ‚ü©) E E' (lift ‚ü® E<E' , E'<E ‚ü©) = lift G
  where
  G : D ‚ãÜ E ‚âÉ D' ‚ãÜ E'
  G = ‚ü® lower (‚ãÜ-mono D D' (lift D<D') E E' (lift E<E')) 
      , lower (‚ãÜ-mono D' D (lift D'<D) E' E (lift E'<E)) ‚ü©

Œõ-mono : monotone (ŒΩ ‚ñ† ‚à∑ []) ‚ñ† Œõ
Œõ-mono¬†F F' F‚äÜ = lift G
  where 
  G : Œõ F ‚äÜ Œõ F'
  G ([] ‚ä¢ V ‚Ü¶ w) ‚ü® w‚ààF‚ÇÅX , V‚â¢[] ‚ü© = 
    ‚ü® lower (F‚äÜ (mem V) (mem V) (Œª d z ‚Üí z)) w w‚ààF‚ÇÅX , V‚â¢[] ‚ü©
  G ŒΩ v‚àà = tt

Œõ-ext-‚äÜ : ‚àÄ{F‚ÇÅ F‚ÇÇ : (ùí´ Value) ‚Üí (ùí´ Value)}
  ‚Üí (‚àÄ {X} ‚Üí F‚ÇÅ X ‚äÜ F‚ÇÇ X)
  ‚Üí Œõ F‚ÇÅ ‚äÜ Œõ F‚ÇÇ
Œõ-ext-‚äÜ {F‚ÇÅ} {F‚ÇÇ} F‚ÇÅ‚äÜF‚ÇÇ ([] ‚ä¢ V ‚Ü¶ w) ‚ü® w‚ààF‚ÇÅX , V‚â¢[] ‚ü© =
    ‚ü® F‚ÇÅ‚äÜF‚ÇÇ w w‚ààF‚ÇÅX , V‚â¢[] ‚ü©
Œõ-ext-‚äÜ {F‚ÇÅ} {F‚ÇÇ} F‚ÇÅ‚äÜF‚ÇÇ ŒΩ v‚àà = tt

Œõ-ext : ‚àÄ{F‚ÇÅ F‚ÇÇ : (ùí´ Value) ‚Üí (ùí´ Value)}
  ‚Üí (‚àÄ {X} ‚Üí F‚ÇÅ X ‚âÉ F‚ÇÇ X)
  ‚Üí Œõ F‚ÇÅ ‚âÉ Œõ F‚ÇÇ
Œõ-ext {F‚ÇÅ}{F‚ÇÇ} F‚ÇÅ‚âÉF‚ÇÇ = ‚ü® Œõ-ext-‚äÜ (proj‚ÇÅ F‚ÇÅ‚âÉF‚ÇÇ) , Œõ-ext-‚äÜ (proj‚ÇÇ F‚ÇÅ‚âÉF‚ÇÇ) ‚ü©

Œõ-cong : congruent (ŒΩ ‚ñ† ‚à∑ []) ‚ñ† Œõ
Œõ-cong F F' F‚âÉ = lift ‚ü® G1 , G2 ‚ü©
  where
  G1 : Œõ F ‚äÜ Œõ F'
  G1 ([] ‚ä¢ V ‚Ü¶ w) ‚ü® w‚ààFV , Vne ‚ü© = ‚ü® proj‚ÇÅ (lower
     (F‚âÉ (mem V) (mem V)
          ‚ü® (Œª x x‚ÇÅ ‚Üí x‚ÇÅ) , (Œª x x‚ÇÅ ‚Üí x‚ÇÅ) ‚ü©))
             w w‚ààFV , Vne ‚ü©
  G1 ŒΩ tt = tt
  G2 : Œõ F' ‚äÜ Œõ F
  G2 ([] ‚ä¢ V ‚Ü¶ w) ‚ü® w‚ààF'V , Vne ‚ü© = ‚ü®  proj‚ÇÇ (lower 
     (F‚âÉ (mem V) (mem V) 
         ‚ü® (Œª x x‚ÇÅ ‚Üí x‚ÇÅ) , (Œª x x‚ÇÅ ‚Üí x‚ÇÅ) ‚ü©)) 
         w w‚ààF'V  , Vne  ‚ü©
  G2 ŒΩ tt = tt

cons-mono : monotone (‚ñ† ‚à∑ ‚ñ† ‚à∑ []) ‚ñ† ‚ü™_,_‚ü´
cons-mono D D' (lift D‚äÜ) E E' (lift E‚äÜ) = lift G
  where
  G : ‚ü™ D , E ‚ü´ ‚äÜ ‚ü™ D' , E' ‚ü´
  G ‚¶Ö u , v ‚¶Ü ‚ü® u‚ààD , v‚ààE ‚ü© = ‚ü® D‚äÜ u u‚ààD , E‚äÜ v v‚ààE ‚ü©

cons-cong : congruent (‚ñ† ‚à∑ ‚ñ† ‚à∑ []) ‚ñ† ‚ü™_,_‚ü´
cons-cong D D' (lift ‚ü® D<D' , D'<D ‚ü©) E E' (lift ‚ü® E<E' , E'<E ‚ü©) = lift G
  where
  G : ‚ü™ D , E ‚ü´ ‚âÉ ‚ü™ D' , E' ‚ü´
  G = ‚ü® lower (cons-mono D D' (lift D<D') E E' (lift E<E')) 
      , lower (cons-mono D' D (lift D'<D) E' E (lift E'<E)) ‚ü©

car-mono : monotone (‚ñ† ‚à∑ []) ‚ñ† car
car-mono D D' (lift D‚äÜ) = lift G
  where
  G : car D ‚äÜ car D'
  G u ‚ü® v , uv‚ààD ‚ü© = ‚ü® v , D‚äÜ ‚¶Ö u , v ‚¶Ü uv‚ààD ‚ü©

car-cong : congruent (‚ñ† ‚à∑ []) ‚ñ† car
car-cong D D' (lift ‚ü® D<D' , D'<D ‚ü©) = lift G
  where
  G : car D ‚âÉ car D'
  G = ‚ü® lower (car-mono D D' (lift D<D')) 
      , lower (car-mono D' D (lift D'<D)) ‚ü©

cdr-mono : monotone (‚ñ† ‚à∑ []) ‚ñ† cdr
cdr-mono D D' (lift D‚äÜ) = lift G
  where
  G : cdr D ‚äÜ cdr D'
  G v ‚ü® u , uv‚ààD ‚ü© = ‚ü® u , D‚äÜ ‚¶Ö u , v ‚¶Ü uv‚ààD ‚ü©

cdr-cong : congruent (‚ñ† ‚à∑ []) ‚ñ† cdr
cdr-cong D D' (lift ‚ü® D<D' , D'<D ‚ü©) = lift G
  where
  G : cdr D ‚âÉ cdr D'
  G = ‚ü® lower (cdr-mono D D' (lift D<D')) 
      , lower (cdr-mono D' D (lift D'<D)) ‚ü©


‚Ñí-mono : monotone (‚ñ† ‚à∑ []) ‚ñ† ‚Ñí
‚Ñí-mono D D' (lift D‚äÜ) = lift G
  where
  G : ‚Ñí D ‚äÜ ‚Ñí D'
  G (left V) ‚ü® Vne , V‚àà ‚ü© = ‚ü® Vne , (Œª d z ‚Üí D‚äÜ d (V‚àà d z)) ‚ü©

‚Ñí-cong : congruent (‚ñ† ‚à∑ []) ‚ñ† ‚Ñí
‚Ñí-cong D D' (lift ‚ü® D<D' , D'<D ‚ü©) = lift G
  where
  G : ‚Ñí D ‚âÉ ‚Ñí D'
  G = ‚ü® lower (‚Ñí-mono D D' (lift D<D')) 
      , lower (‚Ñí-mono D' D (lift D'<D)) ‚ü©

‚Ñõ-mono : monotone (‚ñ† ‚à∑ []) ‚ñ† ‚Ñõ
‚Ñõ-mono D D' (lift D‚äÜ) = lift G
  where
  G : ‚Ñõ D ‚äÜ ‚Ñõ D'
  G (right V) ‚ü® Vne , V‚àà ‚ü© = ‚ü® Vne , (Œª d z ‚Üí D‚äÜ d (V‚àà d z)) ‚ü©

‚Ñõ-cong : congruent (‚ñ† ‚à∑ []) ‚ñ† ‚Ñõ
‚Ñõ-cong D D' (lift ‚ü® D<D' , D'<D ‚ü©) = lift G
  where
  G : ‚Ñõ D ‚âÉ ‚Ñõ D'
  G = ‚ü® lower (‚Ñõ-mono D D' (lift D<D')) 
      , lower (‚Ñõ-mono D' D (lift D'<D)) ‚ü©

ùíû-mono : monotone (‚ñ† ‚à∑ ‚ñ† ‚à∑ ‚ñ† ‚à∑ []) ‚ñ† ùíû
ùíû-mono D D' (lift D‚äÜ) FL FL' (lift FL‚äÜ) FR FR' (lift FR‚äÜ) = lift G
  where
  G : ùíû D FL FR ‚äÜ ùíû D' FL' FR'
  G d (inj‚ÇÅ ‚ü® V , ‚ü® fvs , ‚ü® inlV‚àà , v‚àà ‚ü© ‚ü© ‚ü©) = 
    inj‚ÇÅ ‚ü® V , ‚ü® fvs , ‚ü® D‚äÜ (left V) inlV‚àà , FL‚äÜ (fvs ‚ä¢ V ‚Ü¶ d) v‚àà ‚ü© ‚ü© ‚ü©
  G d (inj‚ÇÇ ‚ü® V , ‚ü® fvs , ‚ü® inrV‚àà , v‚àà ‚ü© ‚ü© ‚ü©) = 
    inj‚ÇÇ ‚ü® V , ‚ü® fvs , ‚ü® D‚äÜ (right V) inrV‚àà , FR‚äÜ (fvs ‚ä¢ V ‚Ü¶ d) v‚àà ‚ü© ‚ü© ‚ü©

ùíû-new-mono : monotone (‚ñ† ‚à∑ ŒΩ ‚ñ† ‚à∑ ŒΩ ‚ñ† ‚à∑ []) ‚ñ† ùíû-new
ùíû-new-mono D D' (lift D‚äÜ) FL FL' FL‚äÜ FR FR' FR‚äÜ = lift G
  where 
  G : ùíû-new D FL FR ‚äÜ ùíû-new D' FL' FR'
  G d (inj‚ÇÅ ‚ü® V , ‚ü® V‚àà , d‚àà ‚ü© ‚ü©) = 
    inj‚ÇÅ ‚ü® V , ‚ü® D‚äÜ (left V) V‚àà 
         , lower (FL‚äÜ (mem V) (mem V) (Œª d z ‚Üí z)) d d‚àà ‚ü© ‚ü©
  G d (inj‚ÇÇ ‚ü® V , ‚ü® V‚àà , d‚àà ‚ü© ‚ü©) = 
    inj‚ÇÇ ‚ü® V , ‚ü® D‚äÜ (right V) V‚àà 
         , lower (FR‚äÜ (mem V) (mem V) (Œª d z ‚Üí z)) d d‚àà ‚ü© ‚ü©

ùíû-cong : congruent (‚ñ† ‚à∑ ‚ñ† ‚à∑ ‚ñ† ‚à∑ []) ‚ñ† ùíû
ùíû-cong D D' (lift ‚ü® D<D' , D'<D ‚ü©) FL FL' (lift ‚ü® FL<FL' , FL'<FL ‚ü©)
                                  FR FR' (lift ‚ü® FR<FR' , FR'<FR ‚ü©) = lift G
  where
  G : ùíû D FL FR ‚âÉ ùíû D' FL' FR'
  G = ‚ü® lower (ùíû-mono D D' (lift D<D') FL FL' (lift FL<FL') FR FR' (lift FR<FR')) 
      , lower (ùíû-mono D' D (lift D'<D) FL' FL (lift FL'<FL) FR' FR (lift FR'<FR)) ‚ü©

proj-mono : ‚àÄ i ‚Üí monotone (‚ñ† ‚à∑ []) ‚ñ† (proj i)
proj-mono i D D' (lift D‚äÜ) = lift G
  where
  G : proj i D ‚äÜ proj i D'
  G d ‚ü® vs , ‚ü® i< , ‚ü® vs‚àà , refl ‚ü© ‚ü© ‚ü© = ‚ü® vs , ‚ü® i< , ‚ü® D‚äÜ ‚à• vs ‚à• vs‚àà , refl ‚ü© ‚ü© ‚ü©

proj-cong : ‚àÄ i ‚Üí congruent (‚ñ† ‚à∑ []) ‚ñ† (proj i)
proj-cong i D D' (lift ‚ü® D<D' , D'<D ‚ü©) = lift G
  where
  G : proj i D ‚âÉ proj i D'
  G = ‚ü® lower (proj-mono i D D' (lift D<D')) 
      , lower (proj-mono i D' D (lift D'<D)) ‚ü©

ùíØ-cons-mono : monotone (‚ñ† ‚à∑ ‚ñ† ‚à∑ []) ‚ñ† ùíØ-cons
ùíØ-cons-mono D D' (lift D‚äÜ) E E' (lift E‚äÜ) = lift G
  where
  G : ùíØ-cons D E ‚äÜ ùíØ-cons D' E'
  G ‚à• d ‚à∑ ds ‚à• ‚ü® d‚àà , ds‚àà ‚ü© = ‚ü® D‚äÜ d d‚àà , E‚äÜ ‚à• ds ‚à• ds‚àà ‚ü©

ùíØ-mono : ‚àÄ n ‚Üí monotone (replicate n ‚ñ†) ‚ñ† (ùíØ n)
ùíØ-mono n = Dfold-pres _‚äÜ_ ‚ñ† ‚ñ† n ùíØ-cons ùíØ-cons ‚åà ‚à• [] ‚à• ‚åâ ‚åà ‚à• [] ‚à• ‚åâ  
           ùíØ-cons-mono (lift (Œª d z ‚Üí z))

{-
ùíØ-mono : ‚àÄ n ‚Üí monotone (replicate n ‚ñ†) ‚ñ† (ùíØ n)
ùíØ-mono zero = lift (Œª d z ‚Üí z)
ùíØ-mono (suc n) D D' (lift D‚äÜ) = 
  DComp-n-1-pres _‚äÜ_ (replicate n ‚ñ†) ‚ñ† ‚ñ† (ùíØ n) (ùíØ n) (ùíØ-cons D) (ùíØ-cons D') 
                 (ùíØ-mono n) (ùíØ-cons-mono D D' (lift D‚äÜ))
-}

ùíú-cons-mono : monotone (‚ñ† ‚à∑ ‚ñ† ‚à∑ []) ‚ñ† ùíú-cons
ùíú-cons-mono D D' (lift D‚äÜ) E E' (lift E‚äÜ) = lift G
  where
  G : ùíú-cons D E ‚äÜ ùíú-cons D' E'
  G ((fv ‚à∑ fvs) ‚ä¢ V ‚Ü¶ w) ‚ü® fv‚àà , d‚àà ‚ü© = 
    ‚ü® D‚äÜ fv fv‚àà , E‚äÜ (fvs ‚ä¢ V ‚Ü¶ w) d‚àà ‚ü©

ùíú-mono : ‚àÄ n ‚Üí monotone (‚ñ† ‚à∑ replicate n ‚ñ†) ‚ñ† (ùíú n)
ùíú-mono n F F' (lift F‚äÜ) = Dfold-pres _‚äÜ_ ‚ñ† ‚ñ† n ùíú-cons ùíú-cons F F' 
  ùíú-cons-mono (lift F‚äÜ)

{-
ùíú-mono : ‚àÄ n ‚Üí monotone (‚ñ† ‚à∑ replicate n ‚ñ†) ‚ñ† (ùíú n)
ùíú-mono zero F F' F‚äÜ = F‚äÜ
ùíú-mono (suc n) F F' (lift F‚äÜ) D D' (lift D‚äÜ) = 
  DComp-n-1-pres _‚äÜ_ (replicate n ‚ñ†) ‚ñ† ‚ñ† (ùíú n F) (ùíú n F') (ùíú-cons D) (ùíú-cons D') 
    (ùíú-mono n F F' (lift F‚äÜ)) (ùíú-cons-mono D D' (lift D‚äÜ))
-}


{-

ùíØ'-mono : ‚àÄ{n}(Ds Es : Œ† n (ùí´ Value)) ‚Üí Ds ‚´É Es ‚Üí ùíØ' n Ds ‚äÜ ùíØ' n Es
ùíØ'-mono {zero} _ _ Ds‚äÜEs v v‚àà = v‚àà
ùíØ'-mono {suc n} ‚ü® D , Ds ‚ü© ‚ü® E , Es ‚ü© ‚ü® D‚äÜE , Ds‚äÜEs ‚ü© ‚à• v ‚à∑ vs ‚à•
    ‚ü® v‚ààD , vs‚ààùíØDs ‚ü© = ‚ü® (D‚äÜE v v‚ààD) , (ùíØ'-mono Ds Es Ds‚äÜEs ‚à• vs ‚à• vs‚ààùíØDs) ‚ü©

ùíØ-mono : ‚àÄ n ‚Üí monotone (replicate n ‚ñ†) ‚ñ† (ùíØ n)
ùíØ-mono n = curry-rel n _‚äÜ_ (ùíØ' n) (ùíØ' n) (ùíØ'-mono {n})

ùíØ'-cong : ‚àÄ {n} (Ds Es : Œ† n (ùí´ Value)) ‚Üí Ds ‚©≠ Es ‚Üí ùíØ' n Ds ‚âÉ ùíØ' n Es
ùíØ'-cong {n} Ds Es Ds=Es with ‚©≠‚áí‚äÜ Ds=Es
... | ‚ü® Ds‚äÜEs , Es‚äÜDs ‚ü© =    
  ‚ü® ùíØ'-mono Ds Es Ds‚äÜEs , ùíØ'-mono Es Ds Es‚äÜDs ‚ü©

ùíØ-cong : ‚àÄ n ‚Üí congruent (replicate n ‚ñ†) ‚ñ† (ùíØ n)
ùíØ-cong n = curry-rel n _‚âÉ_ (ùíØ' n) (ùíØ' n) (ùíØ'-cong {n})

Œõ'-mono : ‚àÄ n F G ‚Üí result-rel-pres _‚äÜ_ (ŒΩ ‚ñ†) F G ‚Üí ‚àÄ (Ds Es : Œ† n (ùí´ Value)) 
                  ‚Üí rel-Œ† _‚äÜ_ Ds Es ‚Üí Œõ' n Ds F ‚äÜ Œõ' n Es G
Œõ'-mono n F G F‚äÜ Ds Es Ds‚äÜ ŒΩ d‚àà = d‚àà
Œõ'-mono n F G F‚äÜ Ds Es Ds‚äÜ (fvs ‚ä¢ V ‚Ü¶ w) ‚ü® w‚àà , ‚ü® Vne , ‚ü® refl , fvs‚äÜDs ‚ü© ‚ü© ‚ü© = 
      ‚ü® lower (F‚äÜ (mem V) (mem V) (Œª x z ‚Üí z)) w w‚àà 
      , ‚ü® Vne , ‚ü® refl , helper fvs Ds Es Ds‚äÜ fvs‚äÜDs ‚ü© ‚ü© ‚ü©
  where
  helper : ‚àÄ fvs (Ds Es : Œ† (length fvs) (ùí´ Value))
      ‚Üí rel-Œ† _‚äÜ_ Ds Es
      ‚Üí rel-Œ† _‚äÜ_ (Œ†-map mem (toŒ† fvs)) Ds
      ‚Üí rel-Œ† _‚äÜ_ (Œ†-map mem (toŒ† fvs)) Es
  helper [] Ds Es Ds‚äÜEs fvs‚äÜDs = tt
  helper (fv ‚à∑ fvs) ‚ü® D , Ds ‚ü© ‚ü® E , Es ‚ü© ‚ü® D‚äÜE , Ds‚äÜEs ‚ü© ‚ü® fv‚äÜD , fvs‚äÜDs ‚ü© = 
    ‚ü® (Œª d z ‚Üí D‚äÜE d (fv‚äÜD d z)) , helper fvs Ds Es Ds‚äÜEs fvs‚äÜDs ‚ü©

Œõ‚Ä≤-mono : ‚àÄ n ‚Üí monotone (ŒΩ ‚ñ† ‚à∑ replicate n ‚ñ†) ‚ñ† (Œõ‚Ä≤ n)
Œõ‚Ä≤-mono n F G F‚äÜ = curry-rel n _‚äÜ_ (Œª z ‚Üí Œõ' n z F) (Œª z ‚Üí Œõ' n z G) (Œõ'-mono n F G F‚äÜ)

-}



{- Consistency ----------------------------------------------------------------}

‚ãÜ-consis : fun-consistent _~_ (‚ñ† ‚à∑ ‚ñ† ‚à∑ []) ‚ñ† _‚ãÜ_
‚ãÜ-consis D D' (lift D~) E E' (lift E~) = lift G
  where
  G : Every _~_ (D ‚ãÜ E) (D' ‚ãÜ E')
  G u v ‚ü® V , ‚ü® fvs , ‚ü® wv‚ààD , ‚ü® V<E , Vne ‚ü© ‚ü© ‚ü© ‚ü© 
        ‚ü® V' , ‚ü® fvs' , ‚ü® wv‚ààD' , ‚ü® V<E' , Vne' ‚ü© ‚ü© ‚ü© ‚ü© 
        with D~ (fvs ‚ä¢ V ‚Ü¶ u) (fvs' ‚ä¢ V' ‚Ü¶ v) wv‚ààD wv‚ààD'
  ... | inj‚ÇÅ x = ‚ä•-elim (x (Every‚áí‚âà V V' (Every-‚äÜ E~ V<E V<E')))
  ... | inj‚ÇÇ y = proj‚ÇÇ y

Œõ-consis : fun-consistent _~_ (ŒΩ ‚ñ† ‚à∑ []) ‚ñ† Œõ
Œõ-consis F F' F~ = lift G
  where
  G : Every _~_ (Œõ F) (Œõ F')
  G ŒΩ (x ‚ä¢ x‚ÇÅ ‚Ü¶ v) tt _ = tt
  G ŒΩ ŒΩ tt _ = tt
  G ([] ‚ä¢ V ‚Ü¶ w) ŒΩ ‚ü® w‚ààF‚ÇÅX , V‚â¢[] ‚ü© tt = tt
  G ([] ‚ä¢ V ‚Ü¶ w) ([] ‚ä¢ V' ‚Ü¶ w') 
    ‚ü® w‚ààF‚ÇÅX , V‚â¢[] ‚ü© ‚ü® w‚ààF‚ÇÅX' , V‚â¢[]' ‚ü© with V ‚âà? V'
  ... | yes V‚âàV' = 
    inj‚ÇÇ ‚ü® V‚âàV' , lower (F~ (mem V) (mem V') (‚âà‚áíEvery V V' V‚âàV')) w w' w‚ààF‚ÇÅX w‚ààF‚ÇÅX' ‚ü©
  ... | no ¬¨V‚âàV' = inj‚ÇÅ ¬¨V‚âàV'

cons-consis : fun-consistent _~_ (‚ñ† ‚à∑ ‚ñ† ‚à∑ []) ‚ñ† ‚ü™_,_‚ü´
cons-consis D D' (lift D~) E E' (lift E~) = lift G
  where
  G : Every _~_ ‚ü™ D , E ‚ü´  ‚ü™ D' , E' ‚ü´
  G ‚¶Ö u , v ‚¶Ü ‚¶Ö u' , v' ‚¶Ü ‚ü® u‚ààD , v‚ààD ‚ü© ‚ü® u'‚ààD' , v'‚ààD' ‚ü©
    = ‚ü® D~ u u' u‚ààD u'‚ààD' , E~ v v' v‚ààD v'‚ààD' ‚ü©

car-consis : fun-consistent _~_ (‚ñ† ‚à∑ []) ‚ñ† car
car-consis D D' (lift D~) = lift G
  where
  G : Every _~_ (car D) (car D')
  G u u' ‚ü® v , uv‚ààD ‚ü© ‚ü® v' , u'v'‚ààD' ‚ü© 
    with D~ ‚¶Ö u , v ‚¶Ü ‚¶Ö u' , v' ‚¶Ü uv‚ààD u'v'‚ààD'
  ... | ‚ü® u~ , v~ ‚ü© = u~

cdr-consis : fun-consistent _~_ (‚ñ† ‚à∑ []) ‚ñ† cdr
cdr-consis D D' (lift D~) = lift G
  where
  G : Every _~_ (cdr D) (cdr D')
  G v v' ‚ü® u , uv‚ààD ‚ü© ‚ü® u' , u'v'‚ààD' ‚ü© 
    with D~ ‚¶Ö u , v ‚¶Ü ‚¶Ö u' , v' ‚¶Ü uv‚ààD u'v'‚ààD'
  ... | ‚ü® u~ , v~ ‚ü© = v~

‚Ñí-consis : fun-consistent _~_ (‚ñ† ‚à∑ []) ‚ñ† ‚Ñí
‚Ñí-consis D D' (lift D~) = lift G
  where
  G : Every _~_ (‚Ñí D) (‚Ñí D')
  G (left U) (left V) ‚ü® Une , U‚àà ‚ü© ‚ü® Vne , V‚àà ‚ü© 
    = Every‚áí‚âà U V (Every-‚äÜ  D~ U‚àà V‚àà)

‚Ñõ-consis : fun-consistent _~_ (‚ñ† ‚à∑ []) ‚ñ†¬†‚Ñõ
‚Ñõ-consis D D' (lift D~) = lift G
  where
  G : Every _~_ (‚Ñõ D) (‚Ñõ D')
  G (right U) (right V) ‚ü® Une , U‚àà ‚ü© ‚ü® Vne , V‚àà ‚ü© 
    = Every‚áí‚âà U V (Every-‚äÜ  D~ U‚àà V‚àà)

ùíû-consis : fun-consistent _~_ (‚ñ† ‚à∑ ‚ñ† ‚à∑ ‚ñ† ‚à∑ []) ‚ñ† ùíû
ùíû-consis D D' (lift D~) FL FL' (lift FL~) FR FR' (lift FR~) = lift G
  where
  G : Every _~_ (ùíû D FL FR) (ùíû D' FL' FR')
  G u v (inj‚ÇÅ ‚ü® V , ‚ü® fvs , ‚ü® inlV‚àà , v‚àà ‚ü© ‚ü© ‚ü©)
        (inj‚ÇÅ ‚ü® V' , ‚ü® fvs' , ‚ü® inlV‚àà' , v‚àà' ‚ü© ‚ü© ‚ü©) 
    with FL~ (fvs ‚ä¢ V ‚Ü¶ u) (fvs' ‚ä¢ V' ‚Ü¶ v) v‚àà v‚àà'
  ... | inj‚ÇÇ y = proj‚ÇÇ y
  ... | inj‚ÇÅ x with D~ (left V) (left V') inlV‚àà inlV‚àà' 
  ... | q = ‚ä•-elim (x q)
  G u v (inj‚ÇÅ ‚ü® V , ‚ü® fvs , ‚ü® inlV‚àà , u‚àà ‚ü© ‚ü© ‚ü©) 
        (inj‚ÇÇ ‚ü® V' , ‚ü® fvs' , ‚ü® inrV‚àà' , v‚àà ‚ü© ‚ü© ‚ü©) = 
        ‚ä•-elim (D~ (left V) (right V') inlV‚àà inrV‚àà')
  G u v (inj‚ÇÇ ‚ü® V , ‚ü® fvs , ‚ü® inrV‚àà , u‚àà ‚ü© ‚ü© ‚ü©) 
        (inj‚ÇÅ ‚ü® V' , ‚ü® fvs' , ‚ü® inlV‚àà' , v‚àà ‚ü© ‚ü© ‚ü©) = 
        ‚ä•-elim (D~ (right V) (left V') inrV‚àà inlV‚àà')
  G u v (inj‚ÇÇ ‚ü® V , ‚ü® fvs , ‚ü® inrV‚àà , u‚àà ‚ü© ‚ü© ‚ü©) 
        (inj‚ÇÇ ‚ü® V' , ‚ü® fvs' , ‚ü® inrV‚àà' , v‚àà ‚ü© ‚ü© ‚ü©) 
    with FR~ (fvs ‚ä¢ V ‚Ü¶ u) (fvs' ‚ä¢ V' ‚Ü¶ v) u‚àà v‚àà 
  ... | inj‚ÇÇ y = proj‚ÇÇ y
  ... | inj‚ÇÅ x with D~ (right V) (right V') inrV‚àà inrV‚àà'
  ... | q = ‚ä•-elim (x q)


ùíû-new-consis : fun-consistent _~_ (‚ñ† ‚à∑ ŒΩ ‚ñ† ‚à∑ ŒΩ ‚ñ† ‚à∑ []) ‚ñ† ùíû-new
ùíû-new-consis D D' (lift D~) FL FL' FL~ FR FR' FR~ = lift G
  where 
  G : Every _~_ (ùíû-new D FL FR) (ùíû-new D' FL' FR')
  G u v (inj‚ÇÅ ‚ü® V , ‚ü® V‚àà , u‚àà ‚ü© ‚ü©) (inj‚ÇÅ ‚ü® V' , ‚ü® V‚àà' , v‚àà ‚ü© ‚ü©)
   with D~ (left V) (left V') V‚àà V‚àà'
  ... | V‚âàV' with FL~ (mem V) (mem V') (‚âà‚áíEvery V V' V‚âàV')
  ... | lift FL-V~ = FL-V~ u v u‚àà v‚àà
  G u v (inj‚ÇÅ ‚ü® V , ‚ü® V‚àà , u‚àà ‚ü© ‚ü©) (inj‚ÇÇ ‚ü® V' , ‚ü® V‚àà' , v‚àà ‚ü© ‚ü©) = 
    ‚ä•-elim (D~ (left V) (right V') V‚àà V‚àà')
  G u v (inj‚ÇÇ ‚ü® V , ‚ü® V‚àà , u‚àà ‚ü© ‚ü©) (inj‚ÇÅ ‚ü® V' , ‚ü® V‚àà' , v‚àà ‚ü© ‚ü©) = 
    ‚ä•-elim (D~ (right V) (left V') V‚àà V‚àà')
  G u v (inj‚ÇÇ ‚ü® V , ‚ü® V‚àà , u‚àà ‚ü© ‚ü©) (inj‚ÇÇ ‚ü® V' , ‚ü® V‚àà' , v‚àà ‚ü© ‚ü©) 
   with D~ (right V) (right V') V‚àà V‚àà' 
  ... | V‚âàV' with FR~ (mem V) (mem V') (‚âà‚áíEvery V V' V‚âàV')
  ... | lift FR-V~ = FR-V~ u v u‚àà v‚àà

nth-~ : ‚àÄ i us vs ‚Üí ‚à• us ‚à• ~ ‚à• vs ‚à• ‚Üí 
    i < length us ‚Üí i < length vs ‚Üí 
    nth us i ~ nth vs i
nth-~ zero (x ‚à∑ us) (x‚ÇÅ ‚à∑ vs) us~vs i<us i<vs = proj‚ÇÅ us~vs
nth-~ (suc i) (x ‚à∑ us) (x‚ÇÅ ‚à∑ vs) ‚ü® fst , snd ‚ü© i<us i<vs = 
  nth-~ i us vs snd (‚â§-pred i<us) (‚â§-pred i<vs)

proj-consis : ‚àÄ i ‚Üí fun-consistent _~_ (‚ñ† ‚à∑ []) ‚ñ† (proj i)
proj-consis i D D' (lift D~) = lift G
  where
  G : Every _~_ (proj i D) (proj i D')
  G u v ‚ü® us , ‚ü® i< , ‚ü® us‚àà , refl ‚ü© ‚ü© ‚ü© 
       ‚ü® vs , ‚ü® i<' , ‚ü® vs‚àà , refl ‚ü© ‚ü© ‚ü© 
    with D~ ‚à• us ‚à• ‚à• vs ‚à• us‚àà vs‚àà 
  ... | q = nth-~ i us vs q i< i<'

ùìÖ-consis : ‚àÄ P f ‚Üí fun-consistent _~_ [] ‚ñ† (ùìÖ P f)
ùìÖ-consis P f = lift (G P f)
  where
  G : ‚àÄ P f ‚Üí Every _~_ (ùìÖ P f) (ùìÖ P f)
  G (base x) f (const {B} k) (const {B'} k') u‚àà v‚àà with base-eq? x B | base-eq? x B'
  ... | yes refl | yes refl with base-eq? x x
  ... | yes refl = trans (sym u‚àà) v‚àà
  ... | no neq = ‚ä•-elim (neq refl)
  G (x ‚áí P) f (x‚ÇÅ ‚ä¢ .(const k ‚à∑ []) ‚Ü¶ u) (x‚ÇÉ ‚ä¢ .(const k' ‚à∑ []) ‚Ü¶ v) 
    ‚ü® k , ‚ü® refl , u‚àà ‚ü© ‚ü© ‚ü® k' , ‚ü® refl , v‚àà ‚ü© ‚ü© with base-eq? x x | base-rep-eq? k k' 
  ... | no neq | q = ‚ä•-elim (neq refl )
  ... | yes refl | no neq = inj‚ÇÅ (Œª z ‚Üí H (head (proj‚ÇÅ z)))
    where
    H : const k ~ const k' ‚Üí False
    H z with base-eq? x x | z
    ... | no neq | q = ‚ä•-elim (neq refl)
    ... | yes refl | q = neq q
  ... | yes refl | yes refl = inj‚ÇÇ ‚ü® ‚ü® H ‚à∑ [] , tt ‚ü© , G P (f k) u v u‚àà v‚àà ‚ü©
    where
    H : const k ~ const k
    H with base-eq? x x
    ... | no neq = ‚ä•-elim (neq refl)
    ... | yes refl = refl
  G (x ‚áí P) f (x‚ÇÅ ‚ä¢ x‚ÇÇ ‚Ü¶ u) ŒΩ u‚àà v‚àà = tt
  G (x ‚áí P) f ŒΩ (x‚ÇÅ ‚ä¢ x‚ÇÇ ‚Ü¶ v) u‚àà v‚àà = tt
  G (x ‚áí P) f ŒΩ ŒΩ u‚àà v‚àà = tt


ùíØ-cons-consis : fun-consistent _~_ (‚ñ† ‚à∑ ‚ñ† ‚à∑ []) ‚ñ† ùíØ-cons
ùíØ-cons-consis D D' (lift D~) E E' (lift E~) = lift G
  where
  G : Every _~_ (ùíØ-cons D E) (ùíØ-cons D' E')
  G ‚à• u ‚à∑ us ‚à• ‚à• v ‚à∑ vs ‚à• ‚ü® u‚àà , us‚àà ‚ü© ‚ü® v‚àà , vs‚àà ‚ü© = ‚ü® D~ u v u‚àà v‚àà , E~ ‚à• us ‚à• ‚à• vs ‚à• us‚àà vs‚àà ‚ü©


ùíØ-consis : ‚àÄ n ‚Üí fun-consistent _~_ (replicate n ‚ñ†) ‚ñ† (ùíØ n)
ùíØ-consis n = Dfold-pres (Every _~_) ‚ñ† ‚ñ† n ùíØ-cons ùíØ-cons ‚åà ‚à• [] ‚à• ‚åâ ‚åà ‚à• [] ‚à• ‚åâ  
           ùíØ-cons-consis (lift G)
  where
  G : (x x‚ÇÅ : Value) (x‚ÇÇ : x ‚â° ‚à• [] ‚à•) (x‚ÇÉ : x‚ÇÅ ‚â° ‚à• [] ‚à•) ‚Üí x ~ x‚ÇÅ 
  G .(‚à• [] ‚à•) .(‚à• [] ‚à•) refl refl = tt


ùíú-cons-consis : fun-consistent _~_ (‚ñ† ‚à∑ ‚ñ† ‚à∑ []) ‚ñ† ùíú-cons
ùíú-cons-consis D D' (lift D~) E E' (lift E~) = lift G
  where
  G : Every _~_ (ùíú-cons D E) (ùíú-cons D' E')
  G ((fv ‚à∑ fvs) ‚ä¢ V ‚Ü¶ w) ((fv' ‚à∑ fvs') ‚ä¢ V' ‚Ü¶ w') ‚ü® fvs‚äÜ , u‚àà ‚ü© ‚ü® fvs'‚äÜ , v‚àà ‚ü©
     = E~ (fvs ‚ä¢ V ‚Ü¶ w) (fvs' ‚ä¢ V' ‚Ü¶ w') u‚àà v‚àà

ùíú-consis : ‚àÄ n ‚Üí fun-consistent _~_ (‚ñ† ‚à∑ replicate n ‚ñ†) ‚ñ† (ùíú n)
ùíú-consis n F F' F~ = Dfold-pres (Every _~_) ‚ñ† ‚ñ† n ùíú-cons ùíú-cons F F' 
¬†       ùíú-cons-consis F~


{-
ùíú-cons-mono : monotone (‚ñ† ‚à∑ ‚ñ† ‚à∑ []) ‚ñ† ùíú-cons
ùíú-cons-mono D D' (lift D‚äÜ) E E' (lift E‚äÜ) = lift G
  where
  G : ùíú-cons D E ‚äÜ ùíú-cons D' E'
  G ((fv ‚à∑ fvs) ‚ä¢ V ‚Ü¶ w) ‚ü® fv‚àà , d‚àà ‚ü© = 
    ‚ü® (Œª d z ‚Üí D‚äÜ d (fv‚àà d z)) , E‚äÜ (fvs ‚ä¢ V ‚Ü¶ w) d‚àà ‚ü©

ùíú-mono : ‚àÄ n ‚Üí monotone (‚ñ† ‚à∑ replicate n ‚ñ†) ‚ñ† (ùíú n)
ùíú-mono zero F F' F‚äÜ = F‚äÜ
ùíú-mono (suc n) F F' (lift F‚äÜ) D D' (lift D‚äÜ) = 
  DComp-n-1-pres _‚äÜ_ (replicate n ‚ñ†) ‚ñ† ‚ñ† (ùíú n F) (ùíú n F') (ùíú-cons D) (ùíú-cons D') 
    (ùíú-mono n F F' (lift F‚äÜ)) (ùíú-cons-mono D D' (lift D‚äÜ))
-}



{- Environments ---------------------------------------------------------------}

Env : Set‚ÇÅ
Env = Var ‚Üí ùí´ Value

nonempty-env : Env ‚Üí Set
nonempty-env œÅ = ‚àÄ x ‚Üí nonempty (œÅ x)

infix 5 _‚äÜ‚Çë_
_‚äÜ‚Çë_ : Env ‚Üí Env ‚Üí Set
œÅ‚ÇÅ ‚äÜ‚Çë œÅ‚ÇÇ = ‚àÄ x ‚Üí œÅ‚ÇÅ x ‚äÜ œÅ‚ÇÇ x

‚äÜ‚Çë-trans : ‚àÄ{œÅ‚ÇÅ œÅ‚ÇÇ œÅ‚ÇÉ} ‚Üí œÅ‚ÇÅ ‚äÜ‚Çë œÅ‚ÇÇ ‚Üí œÅ‚ÇÇ ‚äÜ‚Çë œÅ‚ÇÉ ‚Üí œÅ‚ÇÅ ‚äÜ‚Çë œÅ‚ÇÉ
‚äÜ‚Çë-trans {œÅ‚ÇÅ}{œÅ‚ÇÇ}{œÅ‚ÇÉ} r12 r23 x = Œª d z ‚Üí r23 x d (r12 x d z)

extend-nonempty-env : ‚àÄ{œÅ}{X}
   ‚Üí nonempty-env œÅ  ‚Üí  nonempty X  ‚Üí  nonempty-env (X ‚Ä¢ œÅ)
extend-nonempty-env {œÅ} {X} NE-œÅ NE-X zero = NE-X
extend-nonempty-env {œÅ} {X} NE-œÅ V‚â¢[] (suc x) = NE-œÅ x

env-ext : ‚àÄ{œÅ œÅ‚Ä≤}{X} ‚Üí œÅ ‚äÜ‚Çë œÅ‚Ä≤ ‚Üí (x : Var) ‚Üí (X ‚Ä¢ œÅ) x ‚äÜ (X ‚Ä¢ œÅ‚Ä≤) x
env-ext œÅ<œÅ‚Ä≤ zero d d‚àà = d‚àà
env-ext œÅ<œÅ‚Ä≤ (suc x) = œÅ<œÅ‚Ä≤ x

{- environments whose codomain are finite nonempty sets -}
finite-env : Env ‚Üí Set
finite-env œÅ = ‚àÄ x ‚Üí Œ£[ E ‚àà List Value ] œÅ x ‚âÉ mem E √ó E ‚â¢ []

infix 6 _‚äî‚Çë_
_‚äî‚Çë_ : Env ‚Üí Env ‚Üí Env
(œÅ‚ÇÅ ‚äî‚Çë œÅ‚ÇÇ) x v = œÅ‚ÇÅ x v ‚äé œÅ‚ÇÇ x v

join-finite-env : ‚àÄ{œÅ‚ÇÅ œÅ‚ÇÇ}  ‚Üí finite-env œÅ‚ÇÅ  ‚Üí  finite-env œÅ‚ÇÇ
   ‚Üí finite-env (œÅ‚ÇÅ ‚äî‚Çë œÅ‚ÇÇ)
join-finite-env {œÅ‚ÇÅ}{œÅ‚ÇÇ} f1 f2 x
    with f1 x
... | ‚ü® E1 , ‚ü® œÅ‚ÇÅ=E1 , NE-E1 ‚ü© ‚ü©
    with f2 x
... | ‚ü® E2 , ‚ü® œÅ‚ÇÇ=E2 , NE-E2 ‚ü© ‚ü© =
    ‚ü® (E1 ++ E2) , ‚ü® ‚ü® G , (H {E1} Œª d z ‚Üí z) ‚ü© ,
      (Œª E12=[] ‚Üí NE-E1 (++-conicalÀ° E1 E2 E12=[])) ‚ü© ‚ü©
    where
    G : (v : Value) ‚Üí œÅ‚ÇÅ x v ‚äé œÅ‚ÇÇ x v ‚Üí mem (E1 ++ E2) v
    G v (inj‚ÇÅ œÅ1x) = ‚àà-++‚Å∫À° ((proj‚ÇÅ œÅ‚ÇÅ=E1) v œÅ1x)
    G v (inj‚ÇÇ œÅ2x) = ‚àà-++‚Å∫ ≥ E1 ((proj‚ÇÅ œÅ‚ÇÇ=E2) v œÅ2x)

    H : ‚àÄ{E} ‚Üí mem E ‚äÜ mem E1 ‚Üí mem (E ++ E2) ‚äÜ (Œª v ‚Üí œÅ‚ÇÅ x v ‚äé œÅ‚ÇÇ x v)
    H {[]} E<E1 v v‚ààE++E2 = inj‚ÇÇ ((proj‚ÇÇ œÅ‚ÇÇ=E2) v v‚ààE++E2)
    H {x ‚à∑ E} E<E1 .x (here refl) = inj‚ÇÅ ((proj‚ÇÇ œÅ‚ÇÅ=E1) x (E<E1 x (here refl)))
    H {x ‚à∑ E} E<E1 v (there v‚ààE++E2) =
       H (Œª v z ‚Üí E<E1 v (there z)) v v‚ààE++E2

join-lub : ‚àÄ{œÅ œÅ‚ÇÅ œÅ‚ÇÇ} ‚Üí œÅ‚ÇÅ ‚äÜ‚Çë œÅ ‚Üí œÅ‚ÇÇ ‚äÜ‚Çë œÅ ‚Üí œÅ‚ÇÅ ‚äî‚Çë œÅ‚ÇÇ ‚äÜ‚Çë œÅ
join-lub {œÅ} {œÅ‚ÇÅ} {œÅ‚ÇÇ} œÅ‚ÇÅ‚äÜœÅ œÅ‚ÇÇ‚äÜœÅ x v (inj‚ÇÅ v‚ààœÅ‚ÇÅx) = œÅ‚ÇÅ‚äÜœÅ x v v‚ààœÅ‚ÇÅx
join-lub {œÅ} {œÅ‚ÇÅ} {œÅ‚ÇÇ} œÅ‚ÇÅ‚äÜœÅ œÅ‚ÇÇ‚äÜœÅ x v (inj‚ÇÇ v‚ààœÅ‚ÇÇx) = œÅ‚ÇÇ‚äÜœÅ x v v‚ààœÅ‚ÇÇx

join-‚äÜ-left : ‚àÄ{œÅ‚ÇÅ œÅ‚ÇÇ} ‚Üí œÅ‚ÇÅ ‚äÜ‚Çë œÅ‚ÇÅ ‚äî‚Çë œÅ‚ÇÇ
join-‚äÜ-left {œÅ‚ÇÅ}{œÅ‚ÇÇ} = Œª x d z ‚Üí inj‚ÇÅ z

join-‚äÜ-right : ‚àÄ{œÅ‚ÇÅ œÅ‚ÇÇ} ‚Üí œÅ‚ÇÇ ‚äÜ‚Çë œÅ‚ÇÅ ‚äî‚Çë œÅ‚ÇÇ
join-‚äÜ-right {œÅ‚ÇÅ}{œÅ‚ÇÇ} = Œª x d z ‚Üí inj‚ÇÇ z

monotone-env : (Env ‚Üí ùí´ Value) ‚Üí Set‚ÇÅ
monotone-env D = ‚àÄ {œÅ œÅ‚Ä≤} ‚Üí (‚àÄ x ‚Üí œÅ x ‚äÜ œÅ‚Ä≤ x)  ‚Üí  D œÅ ‚äÜ D œÅ‚Ä≤


{- Continuity -----------------------------------------------------------------}

{- Bear in mind that Continuity is a property related to environments.
   That is, it involves some  evaluation function  
   
   continuity is the property that whenever a value is in a denotation,
   then there exists a finite environment for which that value is still in the denotation.
   -}






{-

-}

{- More Equations -------------------------------------------------------------}

{-

-}


{- 



{- Basic Properties of Denotational Operators ---------------------------------}

k‚àà‚Ñòk : ‚àÄ{B}{k} ‚Üí const {B} k ‚àà ‚Ñò (base B) k
k‚àà‚Ñòk {B}{k}
    with base-eq? B B
... | yes refl = refl
... | no neq = neq refl

k‚Ä≤‚àà‚Ñòk‚áíP‚â°B : ‚àÄ{P B}{k}{k‚Ä≤} ‚Üí const {B} k‚Ä≤ ‚àà ‚Ñò P k ‚Üí P ‚â° base B
k‚Ä≤‚àà‚Ñòk‚áíP‚â°B {base B‚Ä≤} {B} {k} {k‚Ä≤} k‚Ä≤‚àà‚Ñòk
    with base-eq? B‚Ä≤ B
... | yes refl = refl
... | no neq = ‚ä•-elim k‚Ä≤‚àà‚Ñòk

k‚Ä≤‚àà‚Ñòk‚áík‚Ä≤‚â°k : ‚àÄ{B}{k}{k‚Ä≤} ‚Üí const {B} k‚Ä≤ ‚àà ‚Ñò (base B) k ‚Üí k‚Ä≤ ‚â° k
k‚Ä≤‚àà‚Ñòk‚áík‚Ä≤‚â°k {B}{k}{k‚Ä≤} m
    with base-eq? B B
... | yes refl = sym m
... | no neq = ‚ä•-elim m

v‚àà‚Ñ¨k‚áív‚â°k : ‚àÄ{v}{B}{k} ‚Üí v ‚àà ‚Ñ¨ B k ‚Üí v ‚â° const {B} k
v‚àà‚Ñ¨k‚áív‚â°k {const {B‚Ä≤} k‚Ä≤} {B} {k} v‚àà
    with base-eq? B B‚Ä≤
... | yes refl rewrite v‚àà = refl
... | no neq = ‚ä•-elim v‚àà

v‚àà‚Ñòk‚áív‚â°k : ‚àÄ{v}{B}{k} ‚Üí v ‚àà ‚Ñò (base B) k ‚Üí v ‚â° const {B} k
v‚àà‚Ñòk‚áív‚â°k {const {B‚Ä≤} k‚Ä≤} {B} {k} v‚àà = v‚àà‚Ñ¨k‚áív‚â°k v‚àà 

v‚ààùíØ‚áív‚â°‚à•vs‚à• : ‚àÄ{n}{Ds}{v}
  ‚Üí v ‚àà ùíØ n Ds
  ‚Üí Œ£[ vs ‚àà List Value ] v ‚â° ‚à• vs ‚à•
v‚ààùíØ‚áív‚â°‚à•vs‚à• {zero} {Ds} {‚à• x ‚à•} v‚àà = ‚ü® x , refl ‚ü©
v‚ààùíØ‚áív‚â°‚à•vs‚à• {suc n} {Ds} {‚à• x ‚à•} v‚àà = ‚ü® x , refl ‚ü©

NE-Œ†‚áíùíØ : ‚àÄ{n}{Ds : Œ† n (ùí´ Value)}
   ‚Üí NE-Œ† Ds
   ‚Üí Œ£[ vs ‚àà List Value ] ùíØ n Ds ‚à• vs ‚à•
NE-Œ†‚áíùíØ {zero} {ptt} NE-Ds = ‚ü® [] , tt ‚ü©
NE-Œ†‚áíùíØ {suc n} {‚ü® D , Ds ‚ü©} ‚ü® ‚ü® v , v‚ààD ‚ü© , NE-Ds ‚ü©
    with NE-Œ†‚áíùíØ {n} {Ds} NE-Ds
... | ‚ü® vs , vs‚äÜ ‚ü© = ‚ü® v ‚à∑ vs , ‚ü® v‚ààD , vs‚äÜ ‚ü© ‚ü©

NE-Œ†‚áíNE-ùíØ : ‚àÄ{n}{Ds : Œ† n (ùí´ Value)}
   ‚Üí NE-Œ† Ds
   ‚Üí nonempty (ùíØ n Ds)
NE-Œ†‚áíNE-ùíØ{n}{Ds} NE-Ds
    with NE-Œ†‚áíùíØ NE-Ds
... | ‚ü® vs , vs‚ààùíØDs ‚ü© = ‚ü® ‚à• vs ‚à• , vs‚ààùíØDs ‚ü©



{- Abstraction followed by Application is the identity ------------------------}

continuous : (F : ùí´ Value ‚Üí ùí´ Value) ‚Üí Set‚ÇÅ
continuous F = ‚àÄ X E ‚Üí mem E ‚äÜ F X ‚Üí nonempty X
    ‚Üí Œ£[ D ‚àà List Value ] mem D ‚äÜ X  √ó  mem E ‚äÜ F (mem D)  √ó  D ‚â¢ []

monotone : (F : ùí´ Value ‚Üí ùí´ Value) ‚Üí Set‚ÇÅ
monotone F = ‚àÄ D‚ÇÅ D‚ÇÇ ‚Üí D‚ÇÅ ‚äÜ D‚ÇÇ ‚Üí F D‚ÇÅ ‚äÜ F D‚ÇÇ

Œõ-‚ñ™-id : ‚àÄ {F : ùí´ Value ‚Üí ùí´ Value}{X : ùí´ Value}
  ‚Üí continuous F ‚Üí monotone F ‚Üí nonempty X
  ‚Üí (Œõ F) ‚ñ™ X ‚âÉ F X
Œõ-‚ñ™-id {F}{X} Fcont Fmono NE-X = ‚ü® (Œõ-‚ñ™-‚äÜ Fmono) , (‚äÜ-Œõ-‚ñ™ Fcont NE-X) ‚ü©
  where
  Œõ-‚ñ™-‚äÜ : ‚àÄ {F : ùí´ Value ‚Üí ùí´ Value}{X : ùí´ Value}
    ‚Üí monotone F  ‚Üí  (Œõ F) ‚ñ™ X ‚äÜ F X
  Œõ-‚ñ™-‚äÜ {F} {X} Fmono w ‚ü® V , ‚ü® fvs , ‚ü® ‚ü® w‚ààFV , _ ‚ü© , ‚ü® V<X , V‚â¢[] ‚ü© ‚ü© ‚ü© ‚ü© =
      Fmono (mem V) X V<X w w‚ààFV

  ‚äÜ-Œõ-‚ñ™ : ‚àÄ {F : ùí´ Value ‚Üí ùí´ Value}{X : ùí´ Value}
    ‚Üí continuous F  ‚Üí nonempty X ‚Üí  F X ‚äÜ (Œõ F) ‚ñ™ X
  ‚äÜ-Œõ-‚ñ™ {F}{X} Fcont NE-X w w‚ààFX 
      with Fcont X (w ‚à∑ []) (Œª { d (here refl) ‚Üí w‚ààFX }) NE-X
  ... | ‚ü® D , ‚ü® D<X , ‚ü® w‚ààFD , NE-D ‚ü© ‚ü© ‚ü© = {!!}
  {-
        ‚ü® D , ‚ü® [] , ‚ü® ‚ü® w‚ààFD w (here refl) , NE-D ‚ü© , ‚ü® D<X , NE-D ‚ü© ‚ü© ‚ü© ‚ü©
  -}
  
{- Primitive Abstraction followed by Application is the identity --------------}

‚Ñò-‚ñ™-‚âÉ : ‚àÄ{B}{P}{f}{k}  ‚Üí  (‚Ñò (B ‚áí P) f) ‚ñ™ (‚Ñò (base B) k) ‚âÉ ‚Ñò P (f k)
‚Ñò-‚ñ™-‚âÉ {B}{P}{f}{k} = ‚ü® fwd , back ‚ü©
  where
  fwd : ‚Ñò (B ‚áí P) f ‚ñ™ ‚Ñò (base B) k ‚äÜ ‚Ñò P (f k)
  fwd w ‚ü® V , ‚ü® fvs , ‚ü® ‚ü® k‚Ä≤ , ‚ü® refl , w‚ààfk‚Ä≤ ‚ü© ‚ü© , ‚ü® k‚Ä≤‚ààpk , _ ‚ü© ‚ü© ‚ü© ‚ü©
      with k‚Ä≤‚ààpk (const k‚Ä≤) (here refl)
  ... | pkk‚Ä≤ rewrite k‚Ä≤‚àà‚Ñòk‚áík‚Ä≤‚â°k pkk‚Ä≤ = w‚ààfk‚Ä≤
  back : ‚Ñò P (f k) ‚äÜ ‚Ñò (B ‚áí P) f ‚ñ™ ‚Ñò (base B) k
  back w w‚ààfk = ‚ü® (const k ‚à∑ []) , ‚ü® [] , ‚ü® ‚ü® k , ‚ü® refl , w‚ààfk ‚ü© ‚ü© ,
                ‚ü® (Œª {d (here refl) ‚Üí k‚àà‚Ñòk}) , (Œª ()) ‚ü© ‚ü© ‚ü© ‚ü©

{- Cons is a Congruence  ------------------------------------------------------}



Œ†-append-‚äÜ : ‚àÄ{n}{m}{Ds Ds‚Ä≤ : Œ† n (ùí´ Value)}{Es Es‚Ä≤ : Œ† m (ùí´ Value)}
   ‚Üí Ds ‚´É Ds‚Ä≤ ‚Üí Es ‚´É Es‚Ä≤
   ‚Üí Œ†-append Ds Es ‚´É Œ†-append Ds‚Ä≤ Es‚Ä≤
Œ†-append-‚äÜ {zero} {m} {Ds} {Ds‚Ä≤} {Es} {Es‚Ä≤} Ds‚äÜDs‚Ä≤ Es‚äÜEs‚Ä≤ = Es‚äÜEs‚Ä≤
Œ†-append-‚äÜ {suc n} {m} {‚ü® D , Ds ‚ü©} {‚ü® D‚Ä≤ , Ds‚Ä≤ ‚ü©} {Es} {Es‚Ä≤} ‚ü® D‚äÜD‚Ä≤ , Ds‚äÜDs‚Ä≤ ‚ü©
    Es‚äÜEs‚Ä≤ = ‚ü® D‚äÜD‚Ä≤ , Œ†-append-‚äÜ Ds‚äÜDs‚Ä≤ Es‚äÜEs‚Ä≤ ‚ü©

Œ†-append-‚©≠ : ‚àÄ{n}{m}{Ds Ds‚Ä≤ : Œ† n (ùí´ Value)}{Es Es‚Ä≤ : Œ† m (ùí´ Value)}
   ‚Üí Ds ‚©≠ Ds‚Ä≤ ‚Üí Es ‚©≠ Es‚Ä≤
   ‚Üí Œ†-append Ds Es ‚©≠ Œ†-append Ds‚Ä≤ Es‚Ä≤
Œ†-append-‚©≠ {zero} {m} {Ds} {Ds‚Ä≤} Ds=Ds‚Ä≤ Es=Es‚Ä≤ = Es=Es‚Ä≤
Œ†-append-‚©≠ {suc n} {m} {‚ü® D , Ds ‚ü©} {‚ü® D‚Ä≤ , Ds‚Ä≤ ‚ü©} ‚ü® D=D‚Ä≤ , Ds=Ds‚Ä≤ ‚ü© Es=Es‚Ä≤ =
    ‚ü® D=D‚Ä≤ , Œ†-append-‚©≠ Ds=Ds‚Ä≤ Es=Es‚Ä≤ ‚ü©

{- Cons and Car  --------------------------------------------------------------}

car-of-cons-‚äÜ : ‚àÄ{D‚ÇÅ D‚ÇÇ : ùí´ Value}
  ‚Üí car („Äò D‚ÇÅ , D‚ÇÇ „Äô) ‚äÜ D‚ÇÅ
car-of-cons-‚äÜ {D‚ÇÅ} {D‚ÇÇ} u ‚ü® v , ‚ü® u‚ààD‚ÇÅ , v‚ààD‚ÇÇ ‚ü© ‚ü© = u‚ààD‚ÇÅ

car-of-cons : ‚àÄ{D‚ÇÅ D‚ÇÇ : ùí´ Value}
  ‚Üí nonempty D‚ÇÇ
  ‚Üí car („Äò D‚ÇÅ , D‚ÇÇ „Äô) ‚âÉ D‚ÇÅ
car-of-cons {D‚ÇÅ}{D‚ÇÇ} ‚ü® v , v‚ààD‚ÇÇ ‚ü© =
    ‚ü® car-of-cons-‚äÜ , (Œª u u‚ààD‚ÇÅ ‚Üí ‚ü® v , ‚ü® u‚ààD‚ÇÅ , v‚ààD‚ÇÇ ‚ü© ‚ü©) ‚ü©

cdr-of-cons-‚äÜ : ‚àÄ{D‚ÇÅ D‚ÇÇ : ùí´ Value}
  ‚Üí cdr „Äò D‚ÇÅ , D‚ÇÇ „Äô ‚äÜ D‚ÇÇ
cdr-of-cons-‚äÜ {D‚ÇÅ} {D‚ÇÇ} v ‚ü® u , ‚ü® u‚ààD‚ÇÅ , v‚ààD‚ÇÇ ‚ü© ‚ü© = v‚ààD‚ÇÇ

cdr-of-cons : ‚àÄ{D‚ÇÅ D‚ÇÇ : ùí´ Value}
  ‚Üí nonempty D‚ÇÅ
  ‚Üí cdr „Äò D‚ÇÅ , D‚ÇÇ „Äô ‚âÉ D‚ÇÇ
cdr-of-cons {D‚ÇÅ}{D‚ÇÇ} ‚ü® u , u‚ààD‚ÇÅ ‚ü© =
    ‚ü® cdr-of-cons-‚äÜ , (Œª v v‚ààD‚ÇÇ ‚Üí ‚ü® u , ‚ü® u‚ààD‚ÇÅ , v‚ààD‚ÇÇ ‚ü© ‚ü©) ‚ü©

{- Project from a Tuple -------------------------------------------------------}

ùíØ-nth-0 : ‚àÄ{n}{D}{Ds}
   ‚Üí NE-Œ† Ds
   ‚Üí proj (ùíØ (suc n) ‚ü® D , Ds ‚ü©) 0 ‚âÉ D
ùíØ-nth-0 {n}{D}{Ds} NE-Ds = ‚ü® G , H ‚ü©
  where
  G : proj (ùíØ (suc n) ‚ü® D , Ds ‚ü©) 0 ‚äÜ D
  G .v ‚ü® v ‚à∑ vs , ‚ü® lt , ‚ü® ‚ü® v‚ààD , ‚à•vs‚à•‚ààùíØDs ‚ü© , refl ‚ü© ‚ü© ‚ü© = v‚ààD

  H : D ‚äÜ proj (ùíØ (suc n) ‚ü® D , Ds ‚ü©) 0
  H v v‚ààD
      with NE-Œ†‚áíùíØ NE-Ds
  ... | ‚ü® vs , vs‚äÜ ‚ü© = ‚ü® (v ‚à∑ vs) , ‚ü® s‚â§s z‚â§n , ‚ü® ‚ü® v‚ààD , vs‚äÜ ‚ü© , refl ‚ü© ‚ü© ‚ü©

ùíØ-nth-suc : ‚àÄ{i}{n}{D}{Ds}
   ‚Üí nonempty D ‚Üí NE-Œ† Ds
   ‚Üí proj (ùíØ (suc n) ‚ü® D , Ds ‚ü©) (suc i)
   ‚âÉ proj (ùíØ n Ds) i
ùíØ-nth-suc {i}{n}{D}{Ds} ‚ü® u , u‚ààD ‚ü© NE-Ds = ‚ü® G , H ‚ü©
  where
  G : proj (ùíØ (suc n) ‚ü® D , Ds ‚ü©) (suc i) ‚äÜ proj (ùíØ n Ds) i
  G u ‚ü® v ‚à∑ vs , ‚ü® s‚â§s lt , ‚ü® ‚ü® v‚ààD , ‚à•vs‚à•‚ààùíØDs ‚ü© , refl ‚ü© ‚ü© ‚ü© =
      ‚ü® vs , ‚ü® lt , ‚ü® ‚à•vs‚à•‚ààùíØDs , refl ‚ü© ‚ü© ‚ü©
  H : proj (ùíØ n Ds) i ‚äÜ proj (ùíØ (suc n) ‚ü® D , Ds ‚ü©) (suc i)
  H v ‚ü® vs , ‚ü® lt , ‚ü® vs‚äÜDs , eq ‚ü© ‚ü© ‚ü© =
    ‚ü® (u ‚à∑ vs) , ‚ü® s‚â§s lt , ‚ü® ‚ü® u‚ààD , vs‚äÜDs ‚ü© , eq ‚ü© ‚ü© ‚ü©

{- Case, Left, and Right ------------------------------------------------------}



‚Ñí-ùíû : ‚àÄ{D : ùí´ Value}{F G : ùí´ Value ‚Üí ùí´ Value}
   ‚Üí continuous F ‚Üí monotone F ‚Üí nonempty D
   ‚Üí ùíû (‚Ñí D) (Œõ F) (Œõ G) ‚âÉ F D
‚Ñí-ùíû {D}{F}{G} Fcont Fmono NE-D = ‚ü® fwd , back ‚ü©
  where
  fwd : ùíû (‚Ñí D) (Œõ F) (Œõ G) ‚äÜ F D
  fwd v (inj‚ÇÅ ‚ü® V , ‚ü® fvs , ‚ü® ‚ü® _ , V‚äÜD ‚ü© , ‚ü® v‚ààF[V] , V‚â¢[] ‚ü© ‚ü© ‚ü© ‚ü©) =
      Fmono (mem V) D V‚äÜD v v‚ààF[V]

  back : F D ‚äÜ ùíû (‚Ñí D) (Œõ F) (Œõ G)
  back v v‚ààF[D]
      with Fcont D (v ‚à∑ []) (Œª{d (here refl) ‚Üí v‚ààF[D]}) NE-D
  ... | ‚ü® E , ‚ü® E‚äÜD , ‚ü® v‚ààFE , NE-E ‚ü© ‚ü© ‚ü© = {!!}
  {-
      inj‚ÇÅ ‚ü® E , ‚ü® [] , ‚ü® ‚ü® NE-E , E‚äÜD ‚ü© , ‚ü® v‚ààFE v (here refl) , NE-E ‚ü© ‚ü© ‚ü© ‚ü©
-}

‚Ñõ-ùíû : ‚àÄ{D : ùí´ Value}{F G : ùí´ Value ‚Üí ùí´ Value}
   ‚Üí continuous G ‚Üí monotone G ‚Üí nonempty D
   ‚Üí ùíû (‚Ñõ D) (Œõ F) (Œõ G) ‚âÉ G D
‚Ñõ-ùíû {D}{F}{G} Gcont Gmono NE-D = ‚ü® fwd , back ‚ü©
  where
  fwd : ùíû (‚Ñõ D) (Œõ F) (Œõ G) ‚äÜ G D
  fwd v (inj‚ÇÇ ‚ü® V , ‚ü® fvs , ‚ü® ‚ü® _ , V‚äÜD ‚ü© , ‚ü® v‚ààG[V] , V‚â¢[] ‚ü© ‚ü© ‚ü© ‚ü©) =
      Gmono (mem V) D V‚äÜD v v‚ààG[V]

  back : G D ‚äÜ ùíû (‚Ñõ D) (Œõ F) (Œõ G)
  back v v‚ààG[D]
      with Gcont D (v ‚à∑ []) (Œª{d (here refl) ‚Üí v‚ààG[D]}) NE-D
  ... | ‚ü® E , ‚ü® E‚äÜD , ‚ü® v‚ààGE , NE-E ‚ü© ‚ü© ‚ü© = {!!}
  {-
      inj‚ÇÇ ‚ü® E , ‚ü® [] , ‚ü® ‚ü® NE-E , E‚äÜD ‚ü© , ‚ü® v‚ààGE v (here refl) , NE-E ‚ü© ‚ü© ‚ü© ‚ü©
  -}














{- Environments ---------------------------------------------------------------}

Env : Set‚ÇÅ
Env = Var ‚Üí ùí´ Value

nonempty-env : Env ‚Üí Set
nonempty-env œÅ = ‚àÄ x ‚Üí nonempty (œÅ x)

infix 5 _‚äÜ‚Çë_
_‚äÜ‚Çë_ : Env ‚Üí Env ‚Üí Set
œÅ‚ÇÅ ‚äÜ‚Çë œÅ‚ÇÇ = ‚àÄ x ‚Üí œÅ‚ÇÅ x ‚äÜ œÅ‚ÇÇ x

‚äÜ‚Çë-trans : ‚àÄ{œÅ‚ÇÅ œÅ‚ÇÇ œÅ‚ÇÉ} ‚Üí œÅ‚ÇÅ ‚äÜ‚Çë œÅ‚ÇÇ ‚Üí œÅ‚ÇÇ ‚äÜ‚Çë œÅ‚ÇÉ ‚Üí œÅ‚ÇÅ ‚äÜ‚Çë œÅ‚ÇÉ
‚äÜ‚Çë-trans {œÅ‚ÇÅ}{œÅ‚ÇÇ}{œÅ‚ÇÉ} r12 r23 x = Œª d z ‚Üí r23 x d (r12 x d z)

extend-nonempty-env : ‚àÄ{œÅ}{X}
   ‚Üí nonempty-env œÅ  ‚Üí  nonempty X  ‚Üí  nonempty-env (X ‚Ä¢ œÅ)
extend-nonempty-env {œÅ} {X} NE-œÅ NE-X zero = NE-X
extend-nonempty-env {œÅ} {X} NE-œÅ V‚â¢[] (suc x) = NE-œÅ x

env-ext : ‚àÄ{œÅ œÅ‚Ä≤}{X} ‚Üí œÅ ‚äÜ‚Çë œÅ‚Ä≤ ‚Üí (x : Var) ‚Üí (X ‚Ä¢ œÅ) x ‚äÜ (X ‚Ä¢ œÅ‚Ä≤) x
env-ext œÅ<œÅ‚Ä≤ zero d d‚àà = d‚àà
env-ext œÅ<œÅ‚Ä≤ (suc x) = œÅ<œÅ‚Ä≤ x

{- environments whose codomain are finite nonempty sets -}
finite-env : Env ‚Üí Set
finite-env œÅ = ‚àÄ x ‚Üí Œ£[ E ‚àà List Value ] œÅ x ‚âÉ mem E √ó E ‚â¢ []

infix 6 _‚äî‚Çë_
_‚äî‚Çë_ : Env ‚Üí Env ‚Üí Env
(œÅ‚ÇÅ ‚äî‚Çë œÅ‚ÇÇ) x v = œÅ‚ÇÅ x v ‚äé œÅ‚ÇÇ x v

join-finite-env : ‚àÄ{œÅ‚ÇÅ œÅ‚ÇÇ}  ‚Üí finite-env œÅ‚ÇÅ  ‚Üí  finite-env œÅ‚ÇÇ
   ‚Üí finite-env (œÅ‚ÇÅ ‚äî‚Çë œÅ‚ÇÇ)
join-finite-env {œÅ‚ÇÅ}{œÅ‚ÇÇ} f1 f2 x
    with f1 x
... | ‚ü® E1 , ‚ü® œÅ‚ÇÅ=E1 , NE-E1 ‚ü© ‚ü©
    with f2 x
... | ‚ü® E2 , ‚ü® œÅ‚ÇÇ=E2 , NE-E2 ‚ü© ‚ü© =
    ‚ü® (E1 ++ E2) , ‚ü® ‚ü® G , (H {E1} Œª d z ‚Üí z) ‚ü© ,
      (Œª E12=[] ‚Üí NE-E1 (++-conicalÀ° E1 E2 E12=[])) ‚ü© ‚ü©
    where
    G : (v : Value) ‚Üí œÅ‚ÇÅ x v ‚äé œÅ‚ÇÇ x v ‚Üí mem (E1 ++ E2) v
    G v (inj‚ÇÅ œÅ1x) = ‚àà-++‚Å∫À° ((proj‚ÇÅ œÅ‚ÇÅ=E1) v œÅ1x)
    G v (inj‚ÇÇ œÅ2x) = ‚àà-++‚Å∫ ≥ E1 ((proj‚ÇÅ œÅ‚ÇÇ=E2) v œÅ2x)

    H : ‚àÄ{E} ‚Üí mem E ‚äÜ mem E1 ‚Üí mem (E ++ E2) ‚äÜ (Œª v ‚Üí œÅ‚ÇÅ x v ‚äé œÅ‚ÇÇ x v)
    H {[]} E<E1 v v‚ààE++E2 = inj‚ÇÇ ((proj‚ÇÇ œÅ‚ÇÇ=E2) v v‚ààE++E2)
    H {x ‚à∑ E} E<E1 .x (here refl) = inj‚ÇÅ ((proj‚ÇÇ œÅ‚ÇÅ=E1) x (E<E1 x (here refl)))
    H {x ‚à∑ E} E<E1 v (there v‚ààE++E2) =
       H (Œª v z ‚Üí E<E1 v (there z)) v v‚ààE++E2

join-lub : ‚àÄ{œÅ œÅ‚ÇÅ œÅ‚ÇÇ} ‚Üí œÅ‚ÇÅ ‚äÜ‚Çë œÅ ‚Üí œÅ‚ÇÇ ‚äÜ‚Çë œÅ ‚Üí œÅ‚ÇÅ ‚äî‚Çë œÅ‚ÇÇ ‚äÜ‚Çë œÅ
join-lub {œÅ} {œÅ‚ÇÅ} {œÅ‚ÇÇ} œÅ‚ÇÅ‚äÜœÅ œÅ‚ÇÇ‚äÜœÅ x v (inj‚ÇÅ v‚ààœÅ‚ÇÅx) = œÅ‚ÇÅ‚äÜœÅ x v v‚ààœÅ‚ÇÅx
join-lub {œÅ} {œÅ‚ÇÅ} {œÅ‚ÇÇ} œÅ‚ÇÅ‚äÜœÅ œÅ‚ÇÇ‚äÜœÅ x v (inj‚ÇÇ v‚ààœÅ‚ÇÇx) = œÅ‚ÇÇ‚äÜœÅ x v v‚ààœÅ‚ÇÇx

join-‚äÜ-left : ‚àÄ{œÅ‚ÇÅ œÅ‚ÇÇ} ‚Üí œÅ‚ÇÅ ‚äÜ‚Çë œÅ‚ÇÅ ‚äî‚Çë œÅ‚ÇÇ
join-‚äÜ-left {œÅ‚ÇÅ}{œÅ‚ÇÇ} = Œª x d z ‚Üí inj‚ÇÅ z

join-‚äÜ-right : ‚àÄ{œÅ‚ÇÅ œÅ‚ÇÇ} ‚Üí œÅ‚ÇÇ ‚äÜ‚Çë œÅ‚ÇÅ ‚äî‚Çë œÅ‚ÇÇ
join-‚äÜ-right {œÅ‚ÇÅ}{œÅ‚ÇÇ} = Œª x d z ‚Üí inj‚ÇÇ z

monotone-env : (Env ‚Üí ùí´ Value) ‚Üí Set‚ÇÅ
monotone-env D = ‚àÄ {œÅ œÅ‚Ä≤} ‚Üí (‚àÄ x ‚Üí œÅ x ‚äÜ œÅ‚Ä≤ x)  ‚Üí  D œÅ ‚äÜ D œÅ‚Ä≤

{- Relations on Results and Products ------------------------------------------}

rel-results : ‚àÄ{‚Ñì}{T : Set ‚Ñì}
   ‚Üí (‚àÄ b ‚Üí Result T b ‚Üí Result T b ‚Üí Set‚ÇÅ)
   ‚Üí ‚àÄ bs ‚Üí Tuple bs (Result T) ‚Üí Tuple bs (Result T) ‚Üí Set‚ÇÅ
rel-results R [] xs ys = Lift (lsuc lzero) True
rel-results R (b ‚à∑ bs) ‚ü® x , xs ‚ü© ‚ü® y , ys ‚ü© =
    (R b x y) √ó (rel-results R bs xs ys)

‚äÜ-result : ‚àÄ b ‚Üí Result (ùí´ Value) b ‚Üí Result (ùí´ Value) b ‚Üí Set‚ÇÅ
‚äÜ-result ‚ñ† x y = Lift (lsuc lzero) (x ‚äÜ y)
‚äÜ-result (ŒΩ b) f g = ‚àÄ X ‚Üí ‚äÜ-result b (f X) (g X)
‚äÜ-result (‚àÅ b) x y = ‚äÜ-result b x y

‚äÜ-results = rel-results ‚äÜ-result

‚äÜ-result‚áí‚äÜ : ‚àÄ D E ‚Üí ‚äÜ-result ‚ñ† D E ‚Üí D ‚äÜ E
‚äÜ-result‚áí‚äÜ D E (lift D‚äÜE) = D‚äÜE

rel-results‚áírel-Œ† : ‚àÄ{n}{xs ys : Œ† n (ùí´ Value)}
    {R : ‚àÄ b ‚Üí Result (ùí´ Value) b ‚Üí Result (ùí´ Value) b ‚Üí Set‚ÇÅ}
    {R‚Ä≤ : ùí´ Value ‚Üí ùí´ Value ‚Üí Set}
  ‚Üí (‚àÄ x y ‚Üí R ‚ñ† x y ‚Üí R‚Ä≤ x y)
  ‚Üí rel-results R (replicate n ‚ñ†) xs ys
  ‚Üí rel-Œ† R‚Ä≤ xs ys
rel-results‚áírel-Œ† {zero} R‚áíR‚Ä≤ (lift tt) = tt
rel-results‚áírel-Œ† {suc n}{‚ü® x , xs ‚ü©}{‚ü® y , ys ‚ü©} R‚áíR‚Ä≤ ‚ü® Rxy , R[xs,ys] ‚ü© =
    ‚ü® R‚áíR‚Ä≤ x y Rxy , (rel-results‚áírel-Œ† R‚áíR‚Ä≤ R[xs,ys]) ‚ü©


{- Continuous -----------------------------------------------------------------}

continuous-‚àà : (Env ‚Üí ùí´ Value) ‚Üí Env ‚Üí Value ‚Üí Set‚ÇÅ
continuous-‚àà D œÅ v = v ‚àà D œÅ
   ‚Üí Œ£[ œÅ‚Ä≤ ‚àà Env ] finite-env œÅ‚Ä≤ √ó œÅ‚Ä≤ ‚äÜ‚Çë œÅ  √ó v ‚àà D œÅ‚Ä≤

continuous-env : (Env ‚Üí ùí´ Value) ‚Üí Env ‚Üí Set‚ÇÅ
continuous-env D œÅ = ‚àÄ v ‚Üí v ‚àà D œÅ
                     ‚Üí Œ£[ œÅ‚Ä≤ ‚àà Env ] finite-env œÅ‚Ä≤ √ó œÅ‚Ä≤ ‚äÜ‚Çë œÅ  √ó v ‚àà D œÅ‚Ä≤

{- creates an environment that maps each variable x to
   a singleton set of some element in œÅ x.  -}
initial-finite-env : (œÅ : Env) ‚Üí (NE-œÅ : nonempty-env œÅ) ‚Üí Env
initial-finite-env œÅ NE-œÅ x
    with NE-œÅ x
... | ‚ü® v , v‚ààœÅx ‚ü© = ‚åà v ‚åâ

initial-fin : (œÅ : Env) ‚Üí (NE-œÅ : nonempty-env œÅ)
   ‚Üí finite-env (initial-finite-env œÅ NE-œÅ)
initial-fin œÅ NE-œÅ x
    with NE-œÅ x
... | ‚ü® v , v‚ààœÅx ‚ü© =
      ‚ü® v ‚à∑ [] ,
      ‚ü® ‚ü® (Œª {w refl ‚Üí (here refl)}) , (Œª {w (here refl) ‚Üí refl}) ‚ü© , (Œª ()) ‚ü© ‚ü©

initial-fin-‚äÜ : (œÅ : Env) ‚Üí (NE-œÅ : nonempty-env œÅ)
  ‚Üí initial-finite-env œÅ NE-œÅ ‚äÜ‚Çë œÅ
initial-fin-‚äÜ œÅ NE-œÅ x v v‚ààinitial
    with NE-œÅ x
... | ‚ü® w , w‚ààœÅx ‚ü© rewrite v‚ààinitial = w‚ààœÅx

{- single-env maps x to D and any other variable y to something in œÅ y. -}
single-env : Var ‚Üí ùí´ Value ‚Üí (œÅ : Env) ‚Üí (NE-œÅ : nonempty-env œÅ) ‚Üí Env
single-env x D œÅ NE-œÅ y
    with x ‚âü y
... | yes refl = D
... | no neq
    with NE-œÅ y
... | ‚ü® v , v‚ààœÅy ‚ü© = ‚åà v ‚åâ    

single-fin : ‚àÄ{v}{x}{œÅ}{NE-œÅ} ‚Üí finite-env (single-env x ‚åà v ‚åâ œÅ NE-œÅ)
single-fin {v}{x}{œÅ}{NE-œÅ} y
    with x ‚âü y
... | yes refl =
    ‚ü® v ‚à∑ [] ,
    ‚ü® ‚ü® (Œª{v‚ÇÅ refl ‚Üí (here refl)}) , (Œª{v‚ÇÅ (here refl) ‚Üí refl}) ‚ü© , (Œª ()) ‚ü© ‚ü©
... | no neq
    with NE-œÅ y
... | ‚ü® w , w‚ààœÅy ‚ü© =
    ‚ü® w ‚à∑ [] ,
    ‚ü® ‚ü® (Œª{v‚ÇÅ refl ‚Üí here refl}) , (Œª{v‚ÇÅ (here refl) ‚Üí refl}) ‚ü© , (Œª ()) ‚ü© ‚ü©

single-‚äÜ : ‚àÄ{œÅ x v}{NE-œÅ : nonempty-env œÅ}
  ‚Üí  v ‚àà œÅ x  ‚Üí  single-env x ‚åà v ‚åâ œÅ NE-œÅ ‚äÜ‚Çë œÅ
single-‚äÜ {œÅ}{x}{v}{NE-œÅ} v‚ààœÅx y w sing 
    with x ‚âü y
... | yes refl rewrite sing = v‚ààœÅx
... | no neq
    with NE-œÅ y
... | ‚ü® u , u‚ààœÅy ‚ü© rewrite sing = u‚ààœÅy

v‚ààsingle[xv]x : ‚àÄ{v}{x}{œÅ}{NE-œÅ} ‚Üí v ‚àà single-env x ‚åà v ‚åâ œÅ NE-œÅ x
v‚ààsingle[xv]x {v}{x}
    with x ‚âü x
... | yes refl = refl
... | no neq = ‚ä•-elim (neq refl)

continuous-‚àà‚áí‚äÜ : ‚àÄ E œÅ (NE-œÅ : nonempty-env œÅ)
   ‚Üí monotone-env E
   ‚Üí ‚àÄ V ‚Üí mem V ‚äÜ E œÅ
   ‚Üí (‚àÄ v ‚Üí v ‚àà mem V ‚Üí continuous-‚àà E œÅ v)
   ‚Üí Œ£[ œÅ‚Ä≤ ‚àà Env ] finite-env œÅ‚Ä≤ √ó œÅ‚Ä≤ ‚äÜ‚Çë œÅ  √ó mem V ‚äÜ E œÅ‚Ä≤
continuous-‚àà‚áí‚äÜ E œÅ NE-œÅ mE [] V‚äÜE ‚àÄv‚ààV‚áícont =
   ‚ü® initial-finite-env œÅ NE-œÅ , ‚ü® initial-fin œÅ NE-œÅ ,
   ‚ü® initial-fin-‚äÜ œÅ NE-œÅ , (Œª d ()) ‚ü© ‚ü© ‚ü©
continuous-‚àà‚áí‚äÜ E œÅ NE-œÅ mE (v ‚à∑ V) v‚à∑V‚äÜEœÅ v‚ààV‚áícont
    with continuous-‚àà‚áí‚äÜ E œÅ NE-œÅ mE V (Œª d z ‚Üí v‚à∑V‚äÜEœÅ d (there z))
                (Œª w w‚ààV w‚ààMœÅ ‚Üí v‚ààV‚áícont w (there w‚ààV) w‚ààMœÅ)
... | ‚ü® œÅ‚ÇÅ , ‚ü® fœÅ‚ÇÅ , ‚ü® œÅ‚ÇÅ‚äÜœÅ , V‚äÜEœÅ‚ÇÅ ‚ü© ‚ü© ‚ü©
    with v‚ààV‚áícont v (here refl) (v‚à∑V‚äÜEœÅ v (here refl))
... | ‚ü® œÅ‚ÇÇ , ‚ü® fœÅ‚ÇÇ , ‚ü® œÅ‚ÇÇ‚äÜœÅ , v‚ààEœÅ‚ÇÇ ‚ü© ‚ü© ‚ü© =    
    ‚ü® œÅ‚ÇÉ , ‚ü® (join-finite-env fœÅ‚ÇÅ fœÅ‚ÇÇ) , ‚ü® (join-lub œÅ‚ÇÅ‚äÜœÅ œÅ‚ÇÇ‚äÜœÅ) ,
    G ‚ü© ‚ü© ‚ü©
    where
    œÅ‚ÇÉ = œÅ‚ÇÅ ‚äî‚Çë œÅ‚ÇÇ
    G : (d : Value) ‚Üí mem (v ‚à∑ V) d ‚Üí d ‚àà E œÅ‚ÇÉ
    G d (here refl) = mE {œÅ‚ÇÇ}{œÅ‚ÇÉ} join-‚äÜ-right v v‚ààEœÅ‚ÇÇ
    G d (there m) = mE {œÅ‚ÇÅ}{œÅ‚ÇÉ} join-‚äÜ-left d (V‚äÜEœÅ‚ÇÅ d m)

‚ñ™-continuous : ‚àÄ{D E : Env ‚Üí ùí´ Value}{œÅ}{NE-œÅ : nonempty-env œÅ}{w}
  ‚Üí w ‚àà (D œÅ) ‚ñ™ (E œÅ)
  ‚Üí continuous-env D œÅ ‚Üí continuous-env E œÅ
  ‚Üí monotone-env D ‚Üí monotone-env E
  ‚Üí Œ£[ œÅ‚ÇÉ ‚àà Env ] finite-env œÅ‚ÇÉ √ó œÅ‚ÇÉ ‚äÜ‚Çë œÅ √ó w ‚àà (D œÅ‚ÇÉ) ‚ñ™ (E œÅ‚ÇÉ)
‚ñ™-continuous {D}{E}{œÅ}{NE-œÅ}{w} ‚ü® V , ‚ü® fvs , ‚ü® V‚Ü¶w‚ààDœÅ , ‚ü® V‚äÜEœÅ , V‚â¢[] ‚ü© ‚ü© ‚ü© ‚ü©
    IH-D IH-E mD mE
    with IH-D (fvs ‚ä¢ V ‚Ü¶ w) V‚Ü¶w‚ààDœÅ 
... | ‚ü® œÅ‚ÇÅ , ‚ü® fœÅ‚ÇÅ , ‚ü® œÅ‚ÇÅ‚äÜœÅ , V‚Ü¶w‚ààDœÅ‚ÇÅ ‚ü© ‚ü© ‚ü©
    with ((continuous-‚àà‚áí‚äÜ E œÅ NE-œÅ mE) V V‚äÜEœÅ (Œª v v‚ààV ‚Üí IH-E v))
... | ‚ü® œÅ‚ÇÇ , ‚ü® fœÅ‚ÇÇ , ‚ü® œÅ‚ÇÇ‚äÜœÅ , V‚äÜEœÅ‚ÇÇ ‚ü© ‚ü© ‚ü© =
   ‚ü® œÅ‚ÇÉ , ‚ü® join-finite-env fœÅ‚ÇÅ fœÅ‚ÇÇ , ‚ü® join-lub œÅ‚ÇÅ‚äÜœÅ œÅ‚ÇÇ‚äÜœÅ , w‚ààD‚ñ™EœÅ‚ÇÉ ‚ü© ‚ü© ‚ü© 
    where
    œÅ‚ÇÉ = œÅ‚ÇÅ ‚äî‚Çë œÅ‚ÇÇ
    œÅ‚ÇÅ‚äÜœÅ‚ÇÉ = Œª x v z ‚Üí inj‚ÇÅ z
    V‚Ü¶w‚ààDœÅ‚ÇÉ : fvs ‚ä¢ V ‚Ü¶ w ‚àà D œÅ‚ÇÉ
    V‚Ü¶w‚ààDœÅ‚ÇÉ = mD œÅ‚ÇÅ‚äÜœÅ‚ÇÉ (fvs ‚ä¢ V ‚Ü¶ w) V‚Ü¶w‚ààDœÅ‚ÇÅ
    œÅ‚ÇÇ‚äÜœÅ‚ÇÑ = Œª x v z ‚Üí inj‚ÇÇ z
    V‚äÜEœÅ‚ÇÉ : mem V ‚äÜ E œÅ‚ÇÉ
    V‚äÜEœÅ‚ÇÉ v v‚ààV = mE œÅ‚ÇÇ‚äÜœÅ‚ÇÑ v (V‚äÜEœÅ‚ÇÇ v v‚ààV)
    w‚ààD‚ñ™EœÅ‚ÇÉ : w ‚àà (D œÅ‚ÇÉ) ‚ñ™ (E œÅ‚ÇÉ)
    w‚ààD‚ñ™EœÅ‚ÇÉ = ‚ü® V , ‚ü® fvs , ‚ü® V‚Ü¶w‚ààDœÅ‚ÇÉ , ‚ü® V‚äÜEœÅ‚ÇÉ , V‚â¢[] ‚ü© ‚ü© ‚ü© ‚ü©

Œõ-continuous : ‚àÄ{E : Env  ‚Üí ùí´ Value}{œÅ}{NE-œÅ}{v}
  ‚Üí v ‚àà Œõ (Œª D ‚Üí E (D ‚Ä¢ œÅ))
  ‚Üí (‚àÄ V ‚Üí V ‚â¢ [] ‚Üí continuous-env E (mem V ‚Ä¢ œÅ))
  ‚Üí monotone-env E
  ‚Üí Œ£[ œÅ‚Ä≤ ‚àà Env ] finite-env œÅ‚Ä≤ √ó œÅ‚Ä≤ ‚äÜ‚Çë œÅ √ó v ‚àà Œõ (Œª D ‚Üí E (D ‚Ä¢ œÅ‚Ä≤))
Œõ-continuous {E}{œÅ}{NE-œÅ}{fvs ‚ä¢ V ‚Ü¶ w} ‚ü® w‚ààEV‚Ä¢œÅ , ‚ü® V‚â¢[] , fvs‚â°[] ‚ü© ‚ü© IH mE
    with IH V V‚â¢[] w w‚ààEV‚Ä¢œÅ
... | ‚ü® œÅ‚Ä≤ , ‚ü® fœÅ‚Ä≤ , ‚ü® œÅ‚Ä≤‚äÜV‚Ä¢œÅ , w‚ààEœÅ‚Ä≤ ‚ü© ‚ü© ‚ü© =
    ‚ü® (Œª x ‚Üí œÅ‚Ä≤ (suc x)) , ‚ü® (Œª x ‚Üí fœÅ‚Ä≤ (suc x)) , ‚ü® (Œª x ‚Üí œÅ‚Ä≤‚äÜV‚Ä¢œÅ (suc x)) ,
    ‚ü® mE{œÅ‚Ä≤}{mem V ‚Ä¢ (Œª x ‚Üí œÅ‚Ä≤ (suc x))} G w w‚ààEœÅ‚Ä≤ , ‚ü® V‚â¢[] , {!!} ‚ü© ‚ü© ‚ü© ‚ü© ‚ü©
    where G : (x : Var) ‚Üí œÅ‚Ä≤ x ‚äÜ (mem V ‚Ä¢ (Œª x‚ÇÅ ‚Üí œÅ‚Ä≤ (suc x‚ÇÅ))) x
          G zero v v‚ààœÅ‚Ä≤x = œÅ‚Ä≤‚äÜV‚Ä¢œÅ 0 v v‚ààœÅ‚Ä≤x
          G (suc x) v v‚ààœÅ‚Ä≤x = v‚ààœÅ‚Ä≤x
Œõ-continuous {E}{œÅ}{NE-œÅ}{ŒΩ} v‚ààŒõ IH mE =
  ‚ü® initial-finite-env œÅ NE-œÅ , ‚ü® initial-fin œÅ NE-œÅ , ‚ü® initial-fin-‚äÜ œÅ NE-œÅ ,
      tt ‚ü© ‚ü© ‚ü©

cons-continuous : ‚àÄ{D E : Env ‚Üí ùí´ Value}{œÅ}{NE-œÅ : nonempty-env œÅ}{w : Value}
  ‚Üí w ‚àà „Äò D œÅ , E œÅ „Äô
  ‚Üí continuous-env D œÅ ‚Üí continuous-env E œÅ ‚Üí monotone-env D ‚Üí monotone-env E
  ‚Üí Œ£[ œÅ‚ÇÉ ‚àà Env ] finite-env œÅ‚ÇÉ √ó œÅ‚ÇÉ ‚äÜ‚Çë œÅ √ó w ‚àà „Äò D œÅ‚ÇÉ , E œÅ‚ÇÉ „Äô
cons-continuous {D} {E} {œÅ} {NE-œÅ} {‚¶Ö u , v ‚¶Ü} ‚ü® u‚ààDœÅ , v‚ààEœÅ ‚ü© cD cE mD mE
    with cD u u‚ààDœÅ 
... | ‚ü® œÅ‚ÇÅ , ‚ü® fœÅ‚ÇÅ , ‚ü® œÅ‚ÇÅ‚äÜœÅ , u‚ààDœÅ‚ÇÅ ‚ü© ‚ü© ‚ü©
    with cE v v‚ààEœÅ 
... | ‚ü® œÅ‚ÇÇ , ‚ü® fœÅ‚ÇÇ , ‚ü® œÅ‚ÇÇ‚äÜœÅ , v‚ààEœÅ‚ÇÇ ‚ü© ‚ü© ‚ü© =
    ‚ü® œÅ‚ÇÉ , ‚ü® join-finite-env fœÅ‚ÇÅ fœÅ‚ÇÇ , ‚ü® join-lub œÅ‚ÇÅ‚äÜœÅ œÅ‚ÇÇ‚äÜœÅ ,
    ‚ü® u‚ààDœÅ‚ÇÉ , v‚ààDœÅ‚ÇÉ ‚ü© ‚ü© ‚ü© ‚ü©
    where
    œÅ‚ÇÉ = œÅ‚ÇÅ ‚äî‚Çë œÅ‚ÇÇ
    œÅ‚ÇÅ‚äÜœÅ‚ÇÉ = Œª x v z ‚Üí inj‚ÇÅ z
    u‚ààDœÅ‚ÇÉ = mD œÅ‚ÇÅ‚äÜœÅ‚ÇÉ u u‚ààDœÅ‚ÇÅ
    œÅ‚ÇÇ‚äÜœÅ‚ÇÉ = Œª x v z ‚Üí inj‚ÇÇ z
    v‚ààDœÅ‚ÇÉ = mE œÅ‚ÇÇ‚äÜœÅ‚ÇÉ v v‚ààEœÅ‚ÇÇ

car-continuous : ‚àÄ{D : Env ‚Üí ùí´ Value}{œÅ}{NE-œÅ : nonempty-env œÅ}{u : Value}
  ‚Üí u ‚àà car (D œÅ) ‚Üí continuous-env D œÅ ‚Üí monotone-env D
  ‚Üí Œ£[ œÅ‚ÇÉ ‚àà Env ] finite-env œÅ‚ÇÉ √ó œÅ‚ÇÉ ‚äÜ‚Çë œÅ √ó u ‚àà car (D œÅ‚ÇÉ)
car-continuous {D} {œÅ} {NE-œÅ} {u} ‚ü® v , uv‚ààDœÅ ‚ü© cD mD
    with cD ‚¶Ö u , v ‚¶Ü uv‚ààDœÅ 
... | ‚ü® œÅ‚ÇÅ , ‚ü® fœÅ‚ÇÅ , ‚ü® œÅ‚ÇÅ‚äÜœÅ , uv‚ààDœÅ‚ÇÅ ‚ü© ‚ü© ‚ü© =
      ‚ü® œÅ‚ÇÅ , ‚ü® fœÅ‚ÇÅ , ‚ü® œÅ‚ÇÅ‚äÜœÅ , ‚ü® v , mD (Œª x d z ‚Üí z) ‚¶Ö u , v ‚¶Ü uv‚ààDœÅ‚ÇÅ ‚ü© ‚ü© ‚ü© ‚ü©

cdr-continuous : ‚àÄ{D : Env ‚Üí ùí´ Value}{œÅ}{NE-œÅ : nonempty-env œÅ}{u : Value}
  ‚Üí u ‚àà cdr (D œÅ) ‚Üí continuous-env D œÅ ‚Üí monotone-env D
  ‚Üí Œ£[ œÅ‚ÇÉ ‚àà Env ] finite-env œÅ‚ÇÉ √ó œÅ‚ÇÉ ‚äÜ‚Çë œÅ √ó u ‚àà cdr (D œÅ‚ÇÉ)
cdr-continuous {D} {œÅ} {NE-œÅ} {v} ‚ü® u , uv‚ààDœÅ ‚ü© cD mD
    with cD ‚¶Ö u , v ‚¶Ü uv‚ààDœÅ 
... | ‚ü® œÅ‚ÇÅ , ‚ü® fœÅ‚ÇÅ , ‚ü® œÅ‚ÇÅ‚äÜœÅ , uv‚ààDœÅ‚ÇÅ ‚ü© ‚ü© ‚ü© =
      ‚ü® œÅ‚ÇÅ , ‚ü® fœÅ‚ÇÅ , ‚ü® œÅ‚ÇÅ‚äÜœÅ , ‚ü® u , mD (Œª x d z ‚Üí z) ‚¶Ö u , v ‚¶Ü uv‚ààDœÅ‚ÇÅ ‚ü© ‚ü© ‚ü© ‚ü©

mono-envs : ‚àÄ{n} ‚Üí (Env ‚Üí Œ† n (ùí´ Value)) ‚Üí Set‚ÇÅ
mono-envs {n} Ds = ‚àÄ{œÅ œÅ‚Ä≤} ‚Üí œÅ ‚äÜ‚Çë œÅ‚Ä≤ ‚Üí ‚äÜ-results (replicate n ‚ñ†) (Ds œÅ) (Ds œÅ‚Ä≤)

continuous-envs : ‚àÄ{n} ‚Üí (Env ‚Üí Œ† n (ùí´ Value)) ‚Üí Env ‚Üí Set‚ÇÅ
continuous-envs {n} Ds œÅ = ‚àÄ v ‚Üí v ‚àà ùíØ n (Ds œÅ)
                     ‚Üí Œ£[ œÅ‚Ä≤ ‚àà Env ] finite-env œÅ‚Ä≤ √ó œÅ‚Ä≤ ‚äÜ‚Çë œÅ  √ó v ‚àà ùíØ n (Ds œÅ‚Ä≤)

next-Ds : ‚àÄ{n} ‚Üí (Env ‚Üí Œ† (suc n) (ùí´ Value)) ‚Üí (Env ‚Üí Œ† n (ùí´ Value))
next-Ds Ds œÅ
    with Ds œÅ
... | ‚ü® D , Ds‚Ä≤ ‚ü© = Ds‚Ä≤

next-Ds-proj‚ÇÇ : ‚àÄ{n}{Ds : Env ‚Üí Œ† (suc n) (ùí´ Value)}{œÅ}
   ‚Üí next-Ds Ds œÅ ‚â° proj‚ÇÇ (Ds œÅ)
next-Ds-proj‚ÇÇ {n} {Ds} {œÅ}
    with Ds œÅ
... | ‚ü® a , b ‚ü© = refl

next-mono-envs : ‚àÄ{n}{Ds : Env ‚Üí Œ† (suc n) (ùí´ Value)}
   ‚Üí mono-envs Ds ‚Üí mono-envs (next-Ds Ds)
next-mono-envs {zero} {Ds} mDs {œÅ} {œÅ‚Ä≤} _ = lift tt
next-mono-envs {suc n} {Ds} mDs {œÅ} {œÅ‚Ä≤} œÅ‚äÜœÅ‚Ä≤
    with Ds œÅ | Ds œÅ‚Ä≤ | mDs {œÅ} {œÅ‚Ä≤} œÅ‚äÜœÅ‚Ä≤
... | ‚ü® DœÅ , DsœÅ ‚ü© | ‚ü® DœÅ‚Ä≤ , DsœÅ‚Ä≤ ‚ü© | ‚ü® _ , mDs‚Ä≤ ‚ü© = mDs‚Ä≤

proj‚ÇÅ-mono-envs : ‚àÄ{n}{Ds : Env ‚Üí Œ† (suc n) (ùí´ Value)}{œÅ}{œÅ‚Ä≤}
   ‚Üí œÅ ‚äÜ‚Çë œÅ‚Ä≤  ‚Üí mono-envs Ds ‚Üí proj‚ÇÅ (Ds œÅ) ‚äÜ proj‚ÇÅ (Ds œÅ‚Ä≤)
proj‚ÇÅ-mono-envs {n}{Ds}{œÅ}{œÅ‚Ä≤} œÅ‚äÜœÅ‚Ä≤ mDs
    with Ds œÅ | mDs {œÅ}{œÅ‚Ä≤} œÅ‚äÜœÅ‚Ä≤
... | ‚ü® DœÅ , DsœÅ ‚ü© | ‚ü® lift mD , _ ‚ü© = mD

next-NE-Ds : ‚àÄ{n}{Ds : Env ‚Üí Œ† (suc n) (ùí´ Value)}{œÅ}
  ‚Üí NE-Œ† (Ds œÅ)
  ‚Üí NE-Œ† (next-Ds Ds œÅ)
next-NE-Ds{n}{Ds}{œÅ} NE-Ds
    with Ds œÅ | NE-Ds
... | ‚ü® DœÅ , DsœÅ ‚ü© | ‚ü® NE-D , NE-Ds‚Ä≤ ‚ü© = NE-Ds‚Ä≤

next-cont-envs : ‚àÄ{n}{Ds : Env ‚Üí Œ† (suc n) (ùí´ Value)}
     {œÅ}{NE-œÅ : nonempty-env œÅ}{w}
   ‚Üí proj‚ÇÅ (Ds œÅ) w
   ‚Üí continuous-envs Ds œÅ
   ‚Üí continuous-envs (next-Ds Ds) œÅ
next-cont-envs {n} {Ds} {œÅ}{NE-œÅ}{w} w‚ààDsœÅ cDs u u‚àà
    with Ds œÅ | cDs | u‚àà 
... | ‚ü® D , Ds‚Ä≤ ‚ü© | cDDs | u‚àà‚Ä≤ 
    with v‚ààùíØ‚áív‚â°‚à•vs‚à• u‚àà‚Ä≤
... | ‚ü® vs , refl ‚ü©
    with cDDs ‚à• w ‚à∑ vs ‚à• ‚ü® w‚ààDsœÅ , u‚àà‚Ä≤ ‚ü©
... | ‚ü® œÅ‚Ä≤ , ‚ü® fœÅ‚Ä≤ , ‚ü® œÅ‚Ä≤‚äÜœÅ , ‚ü® aaa , vs‚ààDsœÅ‚Ä≤ ‚ü© ‚ü© ‚ü© ‚ü© =
    ‚ü® œÅ‚Ä≤ , ‚ü® fœÅ‚Ä≤ , ‚ü® œÅ‚Ä≤‚äÜœÅ , vs‚ààDsœÅ‚Ä≤ ‚ü© ‚ü© ‚ü©

ùíØ-continuous : ‚àÄ{n}{Ds : Env ‚Üí Œ† n (ùí´ Value)}{œÅ}{NE-œÅ : nonempty-env œÅ}
    {u : Value}
  ‚Üí u ‚àà ùíØ n (Ds œÅ) ‚Üí continuous-envs Ds œÅ ‚Üí mono-envs Ds
  ‚Üí Œ£[ œÅ‚ÇÉ ‚àà Env ] finite-env œÅ‚ÇÉ √ó œÅ‚ÇÉ ‚äÜ‚Çë œÅ √ó u ‚àà ùíØ n (Ds œÅ‚ÇÉ)
ùíØ-continuous {zero} {Ds} {œÅ} {NE-œÅ} {u} u‚ààùíØDs cDs mDs 
    with Ds (initial-finite-env œÅ NE-œÅ) | u
... | lift tt | ‚à• [] ‚à• =
  ‚ü® (initial-finite-env œÅ NE-œÅ) , ‚ü® initial-fin œÅ NE-œÅ ,
  ‚ü® initial-fin-‚äÜ œÅ NE-œÅ , tt ‚ü© ‚ü© ‚ü©
ùíØ-continuous {suc n} {Ds} {œÅ} {NE-œÅ} {‚à• v ‚à∑ vs ‚à•} ‚ü® v‚ààDœÅ , vs‚ààùíØDsœÅ ‚ü© cDs mDs 
    with ùíØ-continuous{n}{next-Ds Ds}{œÅ}{NE-œÅ}{‚à• vs ‚à•}
       (subst (Œª X ‚Üí ‚à• vs ‚à• ‚àà ùíØ n X) (sym (next-Ds-proj‚ÇÇ{n}{Ds}{œÅ})) vs‚ààùíØDsœÅ)
       (next-cont-envs{NE-œÅ = NE-œÅ}{w = v} v‚ààDœÅ cDs)
       (Œª {œÅ}{œÅ‚Ä≤} ‚Üí next-mono-envs mDs {œÅ}{œÅ‚Ä≤})
... | ‚ü® œÅ‚ÇÅ , ‚ü® fœÅ‚ÇÅ , ‚ü® œÅ‚ÇÅ‚äÜœÅ , vs‚ààùíØDsœÅ‚ÇÅ ‚ü© ‚ü© ‚ü©
    with cDs ‚à• v ‚à∑ vs ‚à• ‚ü® v‚ààDœÅ , vs‚ààùíØDsœÅ ‚ü© 
... | ‚ü® œÅ‚ÇÇ , ‚ü® fœÅ‚ÇÇ , ‚ü® œÅ‚ÇÇ‚äÜœÅ , ‚ü® v‚ààDœÅ‚ÇÇ , vs‚ààDsœÅ‚ÇÇ ‚ü© ‚ü© ‚ü© ‚ü©
    with  mDs {œÅ‚ÇÅ}{œÅ‚ÇÅ ‚äî‚Çë œÅ‚ÇÇ} (Œª x d z ‚Üí inj‚ÇÅ z)
... | ‚ü® _ , DsœÅ‚ÇÅ‚äÜDsœÅ‚ÇÉ ‚ü© 
    with  mDs {œÅ‚ÇÇ}{œÅ‚ÇÅ ‚äî‚Çë œÅ‚ÇÇ} (Œª x d z ‚Üí inj‚ÇÇ z)
... | ‚ü® lift DœÅ‚ÇÇ‚äÜDœÅ‚ÇÉ , _ ‚ü© =
    let v‚ààDœÅ‚ÇÉ = DœÅ‚ÇÇ‚äÜDœÅ‚ÇÉ v v‚ààDœÅ‚ÇÇ in
    let vs‚ààDsœÅ‚ÇÉ = ùíØ-mono-‚äÜ (rel-results‚áírel-Œ† ‚äÜ-result‚áí‚äÜ DsœÅ‚ÇÅ‚äÜDsœÅ‚ÇÉ)
                            ‚à• vs ‚à• vs‚ààùíØDsœÅ‚ÇÅ in
    ‚ü® œÅ‚ÇÉ , ‚ü® (join-finite-env fœÅ‚ÇÅ fœÅ‚ÇÇ) , ‚ü® (join-lub œÅ‚ÇÅ‚äÜœÅ œÅ‚ÇÇ‚äÜœÅ) ,
    ‚ü® v‚ààDœÅ‚ÇÉ , vs‚ààDsœÅ‚ÇÉ ‚ü© ‚ü© ‚ü© ‚ü©
    where
    œÅ‚ÇÉ = œÅ‚ÇÅ ‚äî‚Çë œÅ‚ÇÇ

proj-continuous : ‚àÄ{D : Env ‚Üí ùí´ Value}{œÅ}{NE-œÅ : nonempty-env œÅ}{u : Value}{i}
  ‚Üí u ‚àà proj (D œÅ) i ‚Üí continuous-env D œÅ ‚Üí monotone-env D
  ‚Üí Œ£[ œÅ‚ÇÉ ‚àà Env ] finite-env œÅ‚ÇÉ √ó œÅ‚ÇÉ ‚äÜ‚Çë œÅ √ó u ‚àà proj (D œÅ‚ÇÉ) i
proj-continuous {D} {œÅ} {NE-œÅ} {u} {i} ‚ü® vs , ‚ü® lt , ‚ü® vs‚ààDœÅ , refl ‚ü© ‚ü© ‚ü© cD mD
    with cD ‚à• vs ‚à• vs‚ààDœÅ
... | ‚ü® œÅ‚Ä≤ , ‚ü® fœÅ‚Ä≤ , ‚ü® œÅ‚Ä≤‚äÜœÅ , vs‚ààDœÅ‚Ä≤ ‚ü© ‚ü© ‚ü© =     
    ‚ü® œÅ‚Ä≤ , ‚ü® fœÅ‚Ä≤ , ‚ü® œÅ‚Ä≤‚äÜœÅ ,
    ‚ü® vs , ‚ü® lt , ‚ü® mD (Œª x d z ‚Üí z) ‚à• vs ‚à• vs‚ààDœÅ‚Ä≤ , refl ‚ü© ‚ü© ‚ü© ‚ü© ‚ü© ‚ü©

‚Ñí-continuous : ‚àÄ{D : Env ‚Üí ùí´ Value}{œÅ}{NE-œÅ : nonempty-env œÅ}{u : Value}
  ‚Üí u ‚àà ‚Ñí (D œÅ)  ‚Üí  continuous-env D œÅ  ‚Üí  monotone-env D
  ‚Üí Œ£[ œÅ‚ÇÉ ‚àà Env ] finite-env œÅ‚ÇÉ √ó œÅ‚ÇÉ ‚äÜ‚Çë œÅ √ó u ‚àà ‚Ñí (D œÅ‚ÇÉ)
‚Ñí-continuous {D} {œÅ} {NE-œÅ} {left U} ‚ü® U‚â¢[] , U‚äÜDœÅ ‚ü© cD mD
    with continuous-‚àà‚áí‚äÜ D œÅ NE-œÅ mD U U‚äÜDœÅ (Œª v v‚ààDœÅ ‚Üí cD v)
... | ‚ü® œÅ‚ÇÅ , ‚ü® fœÅ‚ÇÅ , ‚ü® œÅ‚ÇÅ‚äÜœÅ , U‚äÜDœÅ‚ÇÅ ‚ü© ‚ü© ‚ü© =
    ‚ü® œÅ‚ÇÅ , ‚ü® fœÅ‚ÇÅ , ‚ü® œÅ‚ÇÅ‚äÜœÅ , ‚ü® U‚â¢[] , U‚äÜDœÅ‚ÇÅ ‚ü© ‚ü© ‚ü© ‚ü©

‚Ñõ-continuous : ‚àÄ{D : Env ‚Üí ùí´ Value}{œÅ}{NE-œÅ : nonempty-env œÅ}{u : Value}
  ‚Üí u ‚àà ‚Ñõ (D œÅ)  ‚Üí  continuous-env D œÅ  ‚Üí  monotone-env D
  ‚Üí Œ£[ œÅ‚ÇÉ ‚àà Env ] finite-env œÅ‚ÇÉ √ó œÅ‚ÇÉ ‚äÜ‚Çë œÅ √ó u ‚àà ‚Ñõ (D œÅ‚ÇÉ)
‚Ñõ-continuous {D} {œÅ} {NE-œÅ} {right U} ‚ü® U‚â¢[] , U‚äÜDœÅ ‚ü© cD mD
    with continuous-‚àà‚áí‚äÜ D œÅ NE-œÅ mD U U‚äÜDœÅ (Œª v v‚ààDœÅ ‚Üí cD v)
... | ‚ü® œÅ‚ÇÅ , ‚ü® fœÅ‚ÇÅ , ‚ü® œÅ‚ÇÅ‚äÜœÅ , U‚äÜDœÅ‚ÇÅ ‚ü© ‚ü© ‚ü© =
    ‚ü® œÅ‚ÇÅ , ‚ü® fœÅ‚ÇÅ , ‚ü® œÅ‚ÇÅ‚äÜœÅ , ‚ü® U‚â¢[] , U‚äÜDœÅ‚ÇÅ ‚ü© ‚ü© ‚ü© ‚ü©

ùíû-continuous : ‚àÄ{D E F : Env ‚Üí ùí´ Value}{œÅ : Env}{NE-œÅ : nonempty-env œÅ}{u}
  ‚Üí u ‚àà ùíû (D œÅ) (Œõ (Œª X ‚Üí E (X ‚Ä¢ œÅ))) (Œõ (Œª X ‚Üí F (X ‚Ä¢ œÅ)))
  ‚Üí continuous-env D œÅ ‚Üí monotone-env D
  ‚Üí (‚àÄ V ‚Üí V ‚â¢ [] ‚Üí continuous-env E (mem V ‚Ä¢ œÅ)) ‚Üí monotone-env E
  ‚Üí (‚àÄ V ‚Üí V ‚â¢ [] ‚Üí continuous-env F (mem V ‚Ä¢ œÅ)) ‚Üí monotone-env F
  ‚Üí Œ£[ œÅ‚Ä≤ ‚àà Env ] finite-env œÅ‚Ä≤ √ó œÅ‚Ä≤ ‚äÜ‚Çë œÅ
      √ó u ‚àà ùíû (D œÅ‚Ä≤) (Œõ (Œª X ‚Üí E (X ‚Ä¢ œÅ‚Ä≤))) (Œõ (Œª X ‚Üí F (X ‚Ä¢ œÅ‚Ä≤)))
ùíû-continuous {D}{E}{F} {œÅ} {NE-œÅ} {w}
    (inj‚ÇÅ ‚ü® V , ‚ü® fvs , ‚ü® inlV‚ààD , ‚ü® w‚ààEV‚Ä¢œÅ , ‚ü® V‚â¢[] , fvs‚â°[] ‚ü© ‚ü© ‚ü© ‚ü© ‚ü©)
    cD mD cE mE cF mF 
    with cD (left V) inlV‚ààD
... | ‚ü® œÅ‚ÇÅ , ‚ü® fœÅ‚ÇÅ , ‚ü® œÅ‚ÇÅ‚äÜœÅ , inlV‚ààDœÅ‚ÇÅ ‚ü© ‚ü© ‚ü©
    with cE V V‚â¢[] w w‚ààEV‚Ä¢œÅ
... | ‚ü® œÅ‚ÇÇ , ‚ü® fœÅ‚ÇÇ , ‚ü® œÅ‚ÇÇ‚äÜV‚Ä¢œÅ , w‚ààEœÅ‚ÇÇ ‚ü© ‚ü© ‚ü© =
    ‚ü® œÅ‚ÇÉ , ‚ü® join-finite-env fœÅ‚ÇÅ fœÅ‚ÇÇ‚Ä≤ , ‚ü® join-lub œÅ‚ÇÅ‚äÜœÅ œÅ‚ÇÇ‚Ä≤‚äÜœÅ , u‚ààùíûœÅ‚ÇÉ ‚ü© ‚ü© ‚ü©
    where
    œÅ‚ÇÇ‚Ä≤ = (Œª x ‚Üí œÅ‚ÇÇ (suc x))
    œÅ‚ÇÉ = œÅ‚ÇÅ ‚äî‚Çë œÅ‚ÇÇ‚Ä≤ 
    fœÅ‚ÇÇ‚Ä≤ : finite-env œÅ‚ÇÇ‚Ä≤
    fœÅ‚ÇÇ‚Ä≤ x = fœÅ‚ÇÇ (suc x)
    œÅ‚ÇÇ‚Ä≤‚äÜœÅ : œÅ‚ÇÇ‚Ä≤ ‚äÜ‚Çë œÅ
    œÅ‚ÇÇ‚Ä≤‚äÜœÅ x = œÅ‚ÇÇ‚äÜV‚Ä¢œÅ (suc x)
    G : (x : ‚Ñï) (d : Value) ‚Üí œÅ‚ÇÇ x d ‚Üí (mem V ‚Ä¢ œÅ‚ÇÉ) x d
    G zero d d‚ààœÅ‚ÇÇx = œÅ‚ÇÇ‚äÜV‚Ä¢œÅ zero d d‚ààœÅ‚ÇÇx
    G (suc x) d d‚ààœÅ‚ÇÇx = inj‚ÇÇ d‚ààœÅ‚ÇÇx
    u‚ààùíûœÅ‚ÇÉ = inj‚ÇÅ ‚ü® V , ‚ü® fvs , ‚ü® (mD (Œª x d z ‚Üí inj‚ÇÅ z) (left V) inlV‚ààDœÅ‚ÇÅ) ,
                  ‚ü® (mE G w w‚ààEœÅ‚ÇÇ) ,
                    ‚ü® V‚â¢[] , {!!} ‚ü© ‚ü© ‚ü© ‚ü© ‚ü©
ùíû-continuous {D}{E}{F} {œÅ} {NE-œÅ} {w}
    (inj‚ÇÇ ‚ü® V , ‚ü® fvs , ‚ü® inrV‚ààD , ‚ü® w‚ààFV‚Ä¢œÅ , ‚ü® V‚â¢[] , fvs‚â°[] ‚ü© ‚ü© ‚ü© ‚ü© ‚ü©)
    cD mD cE mE cF mF 
    with cD (right V) inrV‚ààD
... | ‚ü® œÅ‚ÇÅ , ‚ü® fœÅ‚ÇÅ , ‚ü® œÅ‚ÇÅ‚äÜœÅ , inrV‚ààDœÅ‚ÇÅ ‚ü© ‚ü© ‚ü©
    with cF V V‚â¢[] w w‚ààFV‚Ä¢œÅ
... | ‚ü® œÅ‚ÇÇ , ‚ü® fœÅ‚ÇÇ , ‚ü® œÅ‚ÇÇ‚äÜV‚Ä¢œÅ , w‚ààFœÅ‚ÇÇ ‚ü© ‚ü© ‚ü© =
    ‚ü® œÅ‚ÇÉ , ‚ü® join-finite-env fœÅ‚ÇÅ fœÅ‚ÇÇ‚Ä≤ , ‚ü® join-lub œÅ‚ÇÅ‚äÜœÅ œÅ‚ÇÇ‚Ä≤‚äÜœÅ , u‚ààùíûœÅ‚ÇÉ ‚ü© ‚ü© ‚ü©
    where
    œÅ‚ÇÇ‚Ä≤ = (Œª x ‚Üí œÅ‚ÇÇ (suc x))
    œÅ‚ÇÉ = œÅ‚ÇÅ ‚äî‚Çë œÅ‚ÇÇ‚Ä≤ 
    fœÅ‚ÇÇ‚Ä≤ : finite-env œÅ‚ÇÇ‚Ä≤
    fœÅ‚ÇÇ‚Ä≤ x = fœÅ‚ÇÇ (suc x)
    œÅ‚ÇÇ‚Ä≤‚äÜœÅ : œÅ‚ÇÇ‚Ä≤ ‚äÜ‚Çë œÅ
    œÅ‚ÇÇ‚Ä≤‚äÜœÅ x = œÅ‚ÇÇ‚äÜV‚Ä¢œÅ (suc x)
    G : (x : ‚Ñï) (d : Value) ‚Üí œÅ‚ÇÇ x d ‚Üí (mem V ‚Ä¢ œÅ‚ÇÉ) x d
    G zero d d‚ààœÅ‚ÇÇx = œÅ‚ÇÇ‚äÜV‚Ä¢œÅ zero d d‚ààœÅ‚ÇÇx
    G (suc x) d d‚ààœÅ‚ÇÇx = inj‚ÇÇ d‚ààœÅ‚ÇÇx
    u‚ààùíûœÅ‚ÇÉ = inj‚ÇÇ ‚ü® V , ‚ü® fvs , ‚ü® (mD (Œª x d z ‚Üí inj‚ÇÅ z) (right V) inrV‚ààDœÅ‚ÇÅ) ,
                  ‚ü® (mF G w w‚ààFœÅ‚ÇÇ) ,
                    ‚ü® V‚â¢[] , {!!} ‚ü© ‚ü© ‚ü© ‚ü© ‚ü©



-}