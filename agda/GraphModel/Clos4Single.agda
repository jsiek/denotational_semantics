module NewClos4Single where
{-

 In this intermediate semantics all functions take two parameters,
   so application have two operands and
 This semantics is after the 'delay' pass,
   and before the 'globalize' pass.

-}

open import Utilities using (_iff_)
open import Primitives
open import ScopedTuple hiding (ùí´)
open import NewSigUtil
open import NewDOpSig
open import Utilities using (extensionality)
open import SetsAsPredicates
open import NewDenotProperties
open import NewDomainSingleAnnPair
open import NewDOpSingleAnnPair
open import Syntax using (Sig; ext; ‚àÅ; ŒΩ; ‚ñ†; Var; _‚Ä¢_; ‚Üë; id; _‚®ü_) public

open import Data.Empty renaming (‚ä• to Bot)
open import Data.Nat using (‚Ñï; zero; suc; _+_; _<_)
open import Data.Nat.Properties using (+-suc)
open import Data.List using (List; []; _‚à∑_; replicate)
open import Data.Product
   using (_√ó_; Œ£; Œ£-syntax; ‚àÉ; ‚àÉ-syntax; proj‚ÇÅ; proj‚ÇÇ) renaming (_,_ to ‚ü®_,_‚ü©)
open import Data.Unit using (‚ä§; tt)
open import Data.Unit.Polymorphic using () renaming (tt to ptt; ‚ä§ to pTrue)
open import Level renaming (zero to lzero; suc to lsuc)
import Relation.Binary.PropositionalEquality as Eq
open Eq using (_‚â°_; _‚â¢_; refl; sym; cong; cong‚ÇÇ; cong-app)
open Eq.‚â°-Reasoning

{- Syntax ---------------------------------------------------------------------}

data Op : Set where
  fun-op : Op
  app : Op
  lit : (B : Base) ‚Üí (k : base-rep B) ‚Üí Op
  pair-op : Op
  fst-op : Op
  snd-op : Op
  tuple : ‚Ñï ‚Üí Op
  get : ‚Ñï ‚Üí Op
  inl-op : Op
  inr-op : Op
  case-op : Op

sig : Op ‚Üí List Sig
sig fun-op = ‚àÅ (ŒΩ (ŒΩ ‚ñ†)) ‚à∑ []
sig app = ‚ñ† ‚à∑ ‚ñ† ‚à∑ ‚ñ† ‚à∑ []
sig (lit B k) = []
sig pair-op = ‚ñ† ‚à∑ ‚ñ† ‚à∑ []
sig fst-op = ‚ñ† ‚à∑ []
sig snd-op = ‚ñ† ‚à∑ []
sig (tuple n) = replicate n ‚ñ†
sig (get i) = ‚ñ† ‚à∑ []
sig inl-op = ‚ñ† ‚à∑ []
sig inr-op = ‚ñ† ‚à∑ []
sig case-op = ‚ñ† ‚à∑ ŒΩ ‚ñ† ‚à∑ ŒΩ ‚ñ† ‚à∑ []

module ASTMod = Syntax.OpSig Op sig
open ASTMod using (`_; _‚¶Ö_‚¶Ü; Subst; Ctx; plug; rename; 
                   ‚ü™_‚ü´; _[_]; subst-zero; clear; bind; ast; cons; nil;
                   Arg; Args;
                   rename-id; exts-cons-shift; WF; WF-Ctx; ctx-depth;
                   WF-op; WF-cons; WF-nil; WF-ast; WF-bind; WF-var;
                   COp; CAst; CBind; ccons; tcons; append‚Çä)
            renaming (ABT to AST) public

ùïÜ-Clos4 : DOpSig (ùí´ Value) sig
ùïÜ-Clos4 fun-op ‚ü® F , _ ‚ü© = Œõ ‚ü® (Œª X ‚Üí Œõ ‚ü® (Œª Y ‚Üí F X Y) , ptt ‚ü©) , ptt ‚ü©
ùïÜ-Clos4 app ‚ü® L , ‚ü® M , ‚ü® N , _ ‚ü© ‚ü© ‚ü© = ‚ãÜ ‚ü® ‚ãÜ ‚ü® L , ‚ü® M , ptt ‚ü© ‚ü© , ‚ü® N , ptt ‚ü© ‚ü©
ùïÜ-Clos4 (lit B k) = ‚Ñ¨ B k
ùïÜ-Clos4 pair-op = pair
ùïÜ-Clos4 fst-op = car
ùïÜ-Clos4 snd-op = cdr
ùïÜ-Clos4 (tuple x) = ùíØ x
ùïÜ-Clos4 (get x) = proj x
ùïÜ-Clos4 inl-op = ‚Ñí
ùïÜ-Clos4 inr-op = ‚Ñõ
ùïÜ-Clos4 case-op = ùíû

ùïÜ-Clos4-mono : ùïÜ-monotone sig ùïÜ-Clos4
ùïÜ-Clos4-mono fun-op ‚ü® F1 , _ ‚ü© ‚ü® F2 , _ ‚ü©  ‚ü® F~ , _ ‚ü© = 
  Œõ-mono ‚ü® (Œª X ‚Üí Œõ ‚ü® (F1 X) , ptt ‚ü©) , ptt ‚ü© ‚ü® (Œª X ‚Üí Œõ ‚ü® (F2 X) , ptt ‚ü©) , ptt ‚ü©
         ‚ü® (Œª X1 X2 X~ ‚Üí Œõ-mono ‚ü® (F1 X1) , ptt ‚ü© ‚ü® (F2 X2) , ptt ‚ü© 
                                ‚ü® (F~ X1 X2 X~) , ptt ‚ü©) , ptt ‚ü©
ùïÜ-Clos4-mono app ‚ü® L1 , ‚ü® M1 , ‚ü® N1 , _ ‚ü© ‚ü© ‚ü© 
                 ‚ü® L2 , ‚ü® M2 , ‚ü® N2 , _ ‚ü© ‚ü© ‚ü© ‚ü® L~ , ‚ü® M~ , ‚ü® N~ , _ ‚ü© ‚ü© ‚ü© = 
  ‚ãÜ-mono ‚ü® ‚ãÜ ‚ü® L1 , ‚ü® M1 , ptt ‚ü© ‚ü© , ‚ü® N1 , ptt ‚ü© ‚ü©
         ‚ü® ‚ãÜ ‚ü® L2 , ‚ü® M2 , ptt ‚ü© ‚ü© , ‚ü® N2 , ptt ‚ü© ‚ü©
         ‚ü® ‚ãÜ-mono ‚ü® L1 , ‚ü® M1 , ptt ‚ü© ‚ü© ‚ü® L2 , ‚ü® M2 , ptt ‚ü© ‚ü©  ‚ü® L~ , ‚ü® M~ , ptt ‚ü© ‚ü© 
         , ‚ü® N~ , ptt ‚ü© ‚ü©
ùïÜ-Clos4-mono (lit B k) _ _ _ = lift (Œª d d‚àà ‚Üí d‚àà)
ùïÜ-Clos4-mono pair-op = pair-mono
ùïÜ-Clos4-mono fst-op = car-mono
ùïÜ-Clos4-mono snd-op = cdr-mono
ùïÜ-Clos4-mono (tuple x) = ùíØ-mono x
ùïÜ-Clos4-mono (get x) = proj-mono x
ùïÜ-Clos4-mono inl-op = ‚Ñí-mono
ùïÜ-Clos4-mono inr-op = ‚Ñõ-mono
ùïÜ-Clos4-mono case-op = ùíû-mono

ùïÜ-Clos4-consis : ùïÜ-consistent _~_ sig ùïÜ-Clos4
ùïÜ-Clos4-consis fun-op ‚ü® F1 , _ ‚ü© ‚ü® F2 , _ ‚ü©  ‚ü® F~ , _ ‚ü© = 
  Œõ-consis ‚ü® (Œª X ‚Üí Œõ ‚ü® (F1 X) , ptt ‚ü©) , ptt ‚ü© ‚ü® (Œª X ‚Üí Œõ ‚ü® (F2 X) , ptt ‚ü©) , ptt ‚ü©
         ‚ü® (Œª X1 X2 X~ ‚Üí Œõ-consis ‚ü® (F1 X1) , ptt ‚ü© ‚ü® (F2 X2) , ptt ‚ü© 
                                ‚ü® (F~ X1 X2 X~) , ptt ‚ü©) , ptt ‚ü©
ùïÜ-Clos4-consis app ‚ü® L1 , ‚ü® M1 , ‚ü® N1 , _ ‚ü© ‚ü© ‚ü© 
                 ‚ü® L2 , ‚ü® M2 , ‚ü® N2 , _ ‚ü© ‚ü© ‚ü© ‚ü® L~ , ‚ü® M~ , ‚ü® N~ , _ ‚ü© ‚ü© ‚ü© = 
  ‚ãÜ-consis ‚ü® ‚ãÜ ‚ü® L1 , ‚ü® M1 , ptt ‚ü© ‚ü© , ‚ü® N1 , ptt ‚ü© ‚ü©
         ‚ü® ‚ãÜ ‚ü® L2 , ‚ü® M2 , ptt ‚ü© ‚ü© , ‚ü® N2 , ptt ‚ü© ‚ü©
         ‚ü® ‚ãÜ-consis ‚ü® L1 , ‚ü® M1 , ptt ‚ü© ‚ü© ‚ü® L2 , ‚ü® M2 , ptt ‚ü© ‚ü©  ‚ü® L~ , ‚ü® M~ , ptt ‚ü© ‚ü© 
         , ‚ü® N~ , ptt ‚ü© ‚ü©
 {- DComp-pres (Every _~_) (‚ñ† ‚à∑ ‚ñ† ‚à∑ []) ‚ñ† (‚ñ† ‚à∑ []) ‚ñ† _‚ãÜ_ _‚ãÜ_ _‚ãÜ_ _‚ãÜ_ ‚ãÜ-consis ‚ãÜ-consis -}
ùïÜ-Clos4-consis (lit B k) = ‚Ñ¨-consis B k
ùïÜ-Clos4-consis pair-op = pair-consis
ùïÜ-Clos4-consis fst-op = car-consis
ùïÜ-Clos4-consis snd-op = cdr-consis
ùïÜ-Clos4-consis (tuple x) = ùíØ-consis x
ùïÜ-Clos4-consis (get x) = proj-consis x
ùïÜ-Clos4-consis inl-op = ‚Ñí-consis
ùïÜ-Clos4-consis inr-op = ‚Ñõ-consis
ùïÜ-Clos4-consis case-op = ùíû-consis


open import Fold2 Op sig
open import NewSemantics Op sig public

instance
  Clos4-Semantics : Semantics
  Clos4-Semantics = record { interp-op = ùïÜ-Clos4 ;
                                  mono-op = ùïÜ-Clos4-mono ;
                                  error = œâ }
open Semantics {{...}} public



{-

interp-op2  : (op : Op) ‚Üí Tuple (sig op) (Result (ùí´ Value)) ‚Üí ùí´ Value
interp-op2 fun-op ‚ü® F , _ ‚ü© = Œõ Œª X ‚Üí Œõ Œª Y ‚Üí F X Y
interp-op2 app ‚ü® D‚ÇÅ , ‚ü® D‚ÇÇ , ‚ü® D‚ÇÉ , _ ‚ü© ‚ü© ‚ü© = (D‚ÇÅ ‚ñ™ D‚ÇÇ) ‚ñ™ D‚ÇÉ
interp-op2 (lit B k) _ = ‚Ñ¨ B k
interp-op2 pair-op ‚ü® D‚ÇÅ , ‚ü® D‚ÇÇ , _ ‚ü© ‚ü© = „Äò D‚ÇÅ , D‚ÇÇ „Äô
interp-op2 fst-op ‚ü® D , _ ‚ü©  = car D
interp-op2 snd-op ‚ü® D , _ ‚ü© = cdr D
interp-op2 (tuple n) results = ùíØ n results
interp-op2 (get i) ‚ü® D , _ ‚ü© = proj D i
interp-op2 inl-op ‚ü® D , _ ‚ü© = ‚Ñí D
interp-op2 inr-op ‚ü® D , _ ‚ü© = ‚Ñõ D
interp-op2 case-op ‚ü® D , ‚ü® E , ‚ü® F , _ ‚ü© ‚ü© ‚ü© = ùíû D (Œõ E) (Œõ F)

Term : Set
Term = AST

pattern fun N = fun-op ‚¶Ö cons (clear (bind (bind (ast N)))) nil ‚¶Ü

infixl 7  _‚¶â_,_‚¶ä
pattern _‚¶â_,_‚¶ä L M N = app ‚¶Ö cons (ast L) (cons (ast M) (cons (ast N) nil)) ‚¶Ü

pattern $ B k = lit B k ‚¶Ö nil ‚¶Ü

pattern pair L M = pair-op ‚¶Ö cons (ast L) (cons (ast M) nil) ‚¶Ü
pattern fst M = fst-op ‚¶Ö cons (ast M) nil ‚¶Ü
pattern snd M = snd-op ‚¶Ö cons (ast M) nil ‚¶Ü

pattern _‚ù≤_‚ù≥ M i = (get i) ‚¶Ö cons (ast M) nil ‚¶Ü

pattern inl M = inl-op ‚¶Ö cons (ast M) nil ‚¶Ü
pattern inr M = inr-op ‚¶Ö cons (ast M) nil ‚¶Ü
pattern case L M N = case-op ‚¶Ö cons (ast L) (cons (bind (ast M)) (cons (bind (ast N)) nil)) ‚¶Ü



interp-op2  : (op : Op) ‚Üí Tuple (sig op) (Result (ùí´ Value)) ‚Üí ùí´ Value
interp-op2 fun-op ‚ü® F , _ ‚ü© = Œõ Œª X ‚Üí Œõ Œª Y ‚Üí F X Y
interp-op2 app ‚ü® D‚ÇÅ , ‚ü® D‚ÇÇ , ‚ü® D‚ÇÉ , _ ‚ü© ‚ü© ‚ü© = (D‚ÇÅ ‚ñ™ D‚ÇÇ) ‚ñ™ D‚ÇÉ
interp-op2 (lit B k) _ = ‚Ñ¨ B k
interp-op2 pair-op ‚ü® D‚ÇÅ , ‚ü® D‚ÇÇ , _ ‚ü© ‚ü© = „Äò D‚ÇÅ , D‚ÇÇ „Äô
interp-op2 fst-op ‚ü® D , _ ‚ü©  = car D
interp-op2 snd-op ‚ü® D , _ ‚ü© = cdr D
interp-op2 (tuple n) results = ùíØ n results
interp-op2 (get i) ‚ü® D , _ ‚ü© = proj D i
interp-op2 inl-op ‚ü® D , _ ‚ü© = ‚Ñí D
interp-op2 inr-op ‚ü® D , _ ‚ü© = ‚Ñõ D
interp-op2 case-op ‚ü® D , ‚ü® E , ‚ü® F , _ ‚ü© ‚ü© ‚ü© = ùíû D (Œõ E) (Œõ F)

mono-op2 : {op : Op} {xs ys : Tuple (sig op) (Result (ùí´ Value))}
   ‚Üí ‚äÜ-results (sig op) xs ys ‚Üí interp-op2 op xs ‚äÜ interp-op2 op ys
mono-op2 {fun-op} {‚ü® f , _ ‚ü© } {‚ü® g , _ ‚ü©} ‚ü® f‚äÜg , _ ‚ü© =
    Œõ-ext-‚äÜ Œª {X} ‚Üí Œõ-ext-‚äÜ Œª {Y} ‚Üí lower (f‚äÜg X Y)
mono-op2 {app} {‚ü® a , ‚ü® b , ‚ü® c , _ ‚ü© ‚ü© ‚ü©} {‚ü® x , ‚ü® y , ‚ü® z , _ ‚ü© ‚ü© ‚ü©}
    ‚ü® a<x , ‚ü® b<y , ‚ü® c<z , _ ‚ü© ‚ü© ‚ü© =
    ‚ñ™-mono-‚äÜ (‚ñ™-mono-‚äÜ (lower a<x) (lower b<y)) (lower c<z)
mono-op2 {lit B k} {xs} {ys} xs‚äÜys d d‚ààk = d‚ààk
mono-op2 {pair-op} {‚ü® D‚ÇÅ , ‚ü® D‚ÇÇ , _ ‚ü© ‚ü©} {‚ü® E‚ÇÅ , ‚ü® E‚ÇÇ , _ ‚ü© ‚ü©}
    ‚ü® lift D‚ÇÅ‚äÜE‚ÇÅ , ‚ü® lift D‚ÇÇ‚äÜE‚ÇÇ , _ ‚ü© ‚ü© = cons-mono-‚äÜ D‚ÇÅ‚äÜE‚ÇÅ D‚ÇÇ‚äÜE‚ÇÇ
mono-op2 {fst-op} {‚ü® D , _ ‚ü©} {‚ü® E , _ ‚ü©} ‚ü® lift D‚äÜE , _ ‚ü© = car-mono-‚äÜ D‚äÜE 
mono-op2 {snd-op} {‚ü® D , _ ‚ü©} {‚ü® E , _ ‚ü©} ‚ü® lift D‚äÜE , _ ‚ü© = cdr-mono-‚äÜ D‚äÜE 
mono-op2 {tuple n} {args‚ÇÅ}{args‚ÇÇ} IHs =
    ùíØ-mono-‚äÜ (rel-results‚áírel-‚àè ‚äÜ-result‚áí‚äÜ IHs)
mono-op2 {get i} {‚ü® D , _ ‚ü©} {‚ü® E , _ ‚ü©} ‚ü® lift D‚äÜE , _ ‚ü© = proj-mono-‚äÜ D‚äÜE
mono-op2 {inl-op} {‚ü® D , _ ‚ü©} {‚ü® E , _ ‚ü©} ‚ü® lift D‚äÜE , _ ‚ü© = ‚Ñí-mono-‚äÜ D‚äÜE
mono-op2 {inr-op} {‚ü® D , _ ‚ü©} {‚ü® E , _ ‚ü©} ‚ü® lift D‚äÜE , _ ‚ü© = ‚Ñõ-mono-‚äÜ D‚äÜE
mono-op2 {case-op} {‚ü® D‚ÇÅ , ‚ü® f‚ÇÅ , ‚ü® g‚ÇÅ , _ ‚ü© ‚ü© ‚ü©}
                  {‚ü® D‚ÇÇ , ‚ü® f‚ÇÇ , ‚ü® g‚ÇÇ , _ ‚ü© ‚ü© ‚ü©}
                  ‚ü® lift D‚ÇÅ‚äÜD‚ÇÇ , ‚ü® f‚ÇÅ‚äÜf‚ÇÇ , ‚ü® g‚ÇÅ‚äÜg‚ÇÇ , _ ‚ü© ‚ü© ‚ü© =
    ùíû-mono-‚äÜ D‚ÇÅ‚äÜD‚ÇÇ (Œª X ‚Üí lower (f‚ÇÅ‚äÜf‚ÇÇ X)) (Œª X ‚Üí lower (g‚ÇÅ‚äÜg‚ÇÇ X))

instance
  ISWIMClos2-Semantics : Semantics
  ISWIMClos2-Semantics = record { interp-op = interp-op2 ;
                                  mono-op = Œª {op} ‚Üí mono-op2 {op} }
open Semantics {{...}} public

‚ü¶‚üß-fun : ‚àÄ{N : Term}{œÅ : Env}
  ‚Üí ‚ü¶ fun N ‚üß œÅ ‚â° Œõ Œª D ‚Üí Œõ Œª E ‚Üí ‚ü¶ N ‚üß (E ‚Ä¢ D ‚Ä¢ (Œª x ‚Üí init))
‚ü¶‚üß-fun = refl

‚ü¶‚üß-app : ‚àÄ{L M N : Term}{œÅ : Env}{w : Value}
   ‚Üí w ‚àà ‚ü¶ L ‚¶â M , N ‚¶ä ‚üß œÅ ‚â° w ‚àà ((‚ü¶ L ‚üß œÅ) ‚ñ™ (‚ü¶ M ‚üß œÅ)) ‚ñ™ (‚ü¶ N ‚üß œÅ)
‚ü¶‚üß-app = refl

cont-op2 : ‚àÄ{op}{œÅ}{NE-œÅ}{v}{args}
   ‚Üí v ‚àà ‚ü¶ op ‚¶Ö args ‚¶Ü ‚üß œÅ
   ‚Üí all-args (Cont-Env-Arg œÅ NE-œÅ) (sig op) args
   ‚Üí Œ£[ œÅ‚Ä≤ ‚àà Env ] finite-env œÅ‚Ä≤ √ó œÅ‚Ä≤ ‚äÜ‚Çë œÅ √ó v ‚àà (‚ü¶ op ‚¶Ö args ‚¶Ü ‚üß œÅ‚Ä≤)
cont-op2 {fun-op} {œÅ} {NE-œÅ} {v} {cons (clear (bind (bind (ast N)))) nil}
    v‚àà‚ü¶funN‚üß ‚ü® IH-N , _ ‚ü© =
    {- Wow, the lack of lexical scoping makes this case easy! -}
    ‚ü® initial-finite-env œÅ NE-œÅ , ‚ü® initial-fin œÅ NE-œÅ ,
    ‚ü® initial-fin-‚äÜ œÅ NE-œÅ , v‚àà‚ü¶funN‚üß ‚ü© ‚ü© ‚ü©
cont-op2 {app} {œÅ} {NE-œÅ} {w}
   {cons (ast L) (cons (ast M) (cons (ast N) nil))}
   ‚ü® V , ‚ü® FVS , ‚ü® ‚ü® V‚Ä≤ , ‚ü® V‚Ä≤‚Ü¶V‚Ü¶w‚àà‚ü¶L‚üß , ‚ü® V‚Ä≤‚äÜ‚ü¶M‚üß , V‚Ä≤‚â¢[] ‚ü© ‚ü© ‚ü© ,
         ‚ü® V‚äÜ‚ü¶N‚üß , V‚â¢[] ‚ü© ‚ü© ‚ü© ‚ü©
   ‚ü® IH-L , ‚ü® IH-M , ‚ü® IH-N , _ ‚ü© ‚ü© ‚ü© =
   ‚ñ™-continuous{Œª œÅ ‚Üí ((‚ü¶ L ‚üß œÅ) ‚ñ™ (‚ü¶ M ‚üß œÅ))}{‚ü¶ N ‚üß}{œÅ}{NE-œÅ}
     ‚ü® V , ‚ü® FVS , ‚ü® ‚ü® V‚Ä≤ , ‚ü® V‚Ä≤‚Ü¶V‚Ü¶w‚àà‚ü¶L‚üß , ‚ü® V‚Ä≤‚äÜ‚ü¶M‚üß , V‚Ä≤‚â¢[] ‚ü© ‚ü© ‚ü© ,
           ‚ü® V‚äÜ‚ü¶N‚üß , V‚â¢[] ‚ü© ‚ü© ‚ü© ‚ü©
     (Œª v v‚àà ‚Üí ‚ñ™-continuous {NE-œÅ = NE-œÅ} v‚àà IH-L IH-M (‚ü¶‚üß-monotone L)
                            (‚ü¶‚üß-monotone M))
     IH-N
     (Œª {œÅ}{œÅ‚Ä≤} œÅ‚äÜœÅ‚Ä≤ ‚Üí ‚ñ™-mono-‚äÜ (‚ü¶‚üß-monotone{œÅ = œÅ}{œÅ‚Ä≤} L œÅ‚äÜœÅ‚Ä≤)
                                (‚ü¶‚üß-monotone{œÅ = œÅ}{œÅ‚Ä≤} M œÅ‚äÜœÅ‚Ä≤))
     (‚ü¶‚üß-monotone N)
cont-op2 {lit p x} {œÅ} {NE-œÅ} {v} {nil} v‚àà‚ü¶M‚üßœÅ _ =
    ‚ü® initial-finite-env œÅ NE-œÅ , ‚ü® initial-fin œÅ NE-œÅ ,
    ‚ü® initial-fin-‚äÜ œÅ NE-œÅ ,
      v‚àà‚ü¶M‚üßœÅ ‚ü© ‚ü© ‚ü©
cont-op2 {pair-op}{œÅ}{NE-œÅ}{v}{cons (ast M) (cons (ast N) nil)} v‚àà‚ü¶M‚üßœÅ
    ‚ü® IH-M , ‚ü® IH-N , _ ‚ü© ‚ü© =
    cons-continuous{NE-œÅ = NE-œÅ} v‚àà‚ü¶M‚üßœÅ IH-M IH-N
        (‚ü¶‚üß-monotone M) (‚ü¶‚üß-monotone N)
cont-op2 {fst-op} {œÅ} {NE-œÅ} {v} {cons (ast M) nil} v‚àà‚ü¶M‚üßœÅ
    ‚ü® IH-M , _ ‚ü© =
    car-continuous{NE-œÅ = NE-œÅ} v‚àà‚ü¶M‚üßœÅ IH-M (‚ü¶‚üß-monotone M)
cont-op2 {snd-op} {œÅ} {NE-œÅ} {v} {cons (ast M) nil} v‚àà‚ü¶M‚üßœÅ
    ‚ü® IH-M , _ ‚ü© =
    cdr-continuous{NE-œÅ = NE-œÅ} v‚àà‚ü¶M‚üßœÅ IH-M (‚ü¶‚üß-monotone M)
cont-op2 {tuple n} {œÅ} {NE-œÅ} {v} {args} v‚àà‚ü¶M‚üßœÅ cont-args =
   ùíØ-continuous{NE-œÅ = NE-œÅ} v‚àà‚ü¶M‚üßœÅ
       (all-Cont-Env-Arg‚áícont-envs{NE-œÅ = NE-œÅ} cont-args)
       (‚ü¶‚üß-monotone-args args)
cont-op2 {get i} {œÅ} {NE-œÅ} {v} {cons (ast M) nil} v‚àà‚ü¶M‚üßœÅ ‚ü® cM , _ ‚ü© =
    proj-continuous{NE-œÅ = NE-œÅ} v‚àà‚ü¶M‚üßœÅ cM (‚ü¶‚üß-monotone M)
cont-op2 {inl-op}{œÅ}{NE-œÅ}{v}{cons (ast M) nil} v‚àà ‚ü® cM , _ ‚ü© =
    ‚Ñí-continuous{NE-œÅ = NE-œÅ} v‚àà cM (‚ü¶‚üß-monotone M)
cont-op2 {inr-op}{œÅ}{NE-œÅ}{v}{cons (ast M) nil} v‚àà ‚ü® cM , _ ‚ü© =
    ‚Ñõ-continuous{NE-œÅ = NE-œÅ} v‚àà cM (‚ü¶‚üß-monotone M)
cont-op2 {case-op}{œÅ}{NE-œÅ}{v}
    {cons (ast L) (cons (bind (ast M)) (cons (bind (ast N)) nil))}
    v‚àà ‚ü® IH-L , ‚ü® IH-M , ‚ü® IH-N , _ ‚ü© ‚ü© ‚ü© =
   ùíû-continuous{NE-œÅ = NE-œÅ} v‚àà IH-L (‚ü¶‚üß-monotone L) IH-M (‚ü¶‚üß-monotone M)
       IH-N (‚ü¶‚üß-monotone N)

instance
  ISWIMClos2-Continuous : ContinuousSemantics
  ISWIMClos2-Continuous = record { continuous-op =
                Œª{op}{œÅ}{NE-œÅ} ‚Üí cont-op2{op}{œÅ}{NE-œÅ} }
open ContinuousSemantics {{...}} public


-}