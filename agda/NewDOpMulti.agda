{-# OPTIONS --allow-unsolved-metas #-}

module NewDOpMulti where

{-

  This is an adaptation of the call-by-name models P(œâ) of Scott
  (1976) and D‚Çê of Engeler (1981) to call-by-value.

-}

open import Primitives
open import Utilities using (extensionality)
open import SetsAsPredicates
open import Var
open import Substitution using (_‚Ä¢_)
open import ScopedTuple hiding (ùí´)
open import Syntax using (Sig; ext; ŒΩ; ‚ñ†; Var; _‚Ä¢_; ‚Üë; id; _‚®ü_) public
open import NewSigUtil
open import NewDOpSig
open import NewDenotProperties
open import NewDomainMulti

open import Data.Empty using (‚ä•-elim) renaming (‚ä• to False)
open import Data.List using (List ; _‚à∑_ ; []; _++_; length; replicate)
open import Data.List.Relation.Unary.Any using (Any; here; there)
open import Data.List.Relation.Unary.All 
  using (All; []; _‚à∑_; head; tail; lookup; tabulate; all?)
  renaming (map to allmap)
open import Data.List.Relation.Binary.Pointwise using (Pointwise; []; _‚à∑_)
open import Data.List.Properties using (++-conicalÀ°)
open import Data.List.Membership.Propositional renaming (_‚àà_ to _‚ãµ_)
open import Data.List.Membership.Propositional.Properties
  using (‚àà-++‚Å∫À°; ‚àà-++‚Å∫ ≥)
open import Data.Nat using (‚Ñï; zero; suc; _‚âü_; _<_; z‚â§n; s‚â§s; _+_)
open import Data.Nat.Properties using (‚â§-pred)
open import Data.Product using (_√ó_; Œ£; Œ£-syntax; proj‚ÇÅ; proj‚ÇÇ; ‚àÉ; ‚àÉ-syntax)
    renaming (_,_ to ‚ü®_,_‚ü©)
open import Data.Sum using (_‚äé_; inj‚ÇÅ; inj‚ÇÇ; [_,_])
open import Data.Unit using (tt) renaming (‚ä§ to True)
open import Data.Unit.Polymorphic using (‚ä§) renaming (tt to ptt)
open import Relation.Binary.PropositionalEquality
    using (_‚â°_; _‚â¢_; refl; sym; trans; subst)
open import Level using (Level; Lift; lift; lower)
    renaming (zero to lzero; suc to lsuc)
open import Relation.Nullary using (¬¨_; Dec; yes; no)


{- Denotational Operators -----------------------------------------------------}

{-
_‚ãÜ_  Œõ  cons  car  cdr  ‚Ñí  ‚Ñõ  ùíû  (proj i)  (ùíØ' n)  (ùíØ n)  Œõ'  Œõ‚Ä≤
-}


{- \st -}
‚ãÜ : DOp (ùí´ Value) (‚ñ† ‚à∑ ‚ñ† ‚à∑ [])
‚ãÜ ‚ü® D‚ÇÅ , ‚ü® D‚ÇÇ , _ ‚ü© ‚ü© w = 
    Œ£[ V ‚àà List Value ] 
      (V ‚Ü¶ w ‚àà D‚ÇÅ) √ó (mem V ‚äÜ D‚ÇÇ) √ó V ‚â¢ []

‚Ñ¨ : (B : Base) ‚Üí base-rep B ‚Üí DOp (ùí´ Value) []
‚Ñ¨ B k _ (const {B‚Ä≤} k‚Ä≤)
    with base-eq? B B‚Ä≤
... | yes refl = k ‚â° k‚Ä≤
... | no neq = False
‚Ñ¨ B k _ _ = False

ùìÖ : (P : Prim) ‚Üí rep P ‚Üí DOp (ùí´ Value) []
ùìÖ (base B) k v = ‚Ñ¨ B k v
ùìÖ (B ‚áí P) f _ (const k) = False
ùìÖ (B ‚áí P) f _ (V ‚Ü¶ w) =
   Œ£[ k ‚àà base-rep B ] V ‚â° (const {B} k) ‚à∑ [] √ó  w ‚àà ùìÖ P (f k) (ptt)
ùìÖ (B ‚áí P) f _ ŒΩ = True
ùìÖ (B ‚áí P) f _ œâ = False
ùìÖ (B ‚áí P) k _ ‚¶Ö u , fv ‚¶Ü = False
ùìÖ (B ‚áí P) k _ ‚à• vs ‚à• = False
ùìÖ (B ‚áí P) k _ (left v) = False
ùìÖ (B ‚áí P) k _ (right v) = False


pair : DOp (ùí´ Value) (‚ñ† ‚à∑ ‚ñ† ‚à∑ [])
pair ‚ü® D‚ÇÅ , ‚ü® D‚ÇÇ , _ ‚ü© ‚ü© ‚¶Ö f , FV ‚¶Ü = f ‚àà D‚ÇÅ √ó mem FV ‚äÜ D‚ÇÇ √ó FV ‚â¢ []
pair ‚ü® D‚ÇÅ , ‚ü® D‚ÇÇ , _ ‚ü© ‚ü© _ = False

car : DOp (ùí´ Value) (‚ñ† ‚à∑ [])
car ‚ü® D , _ ‚ü© f = Œ£[ FV ‚àà List Value ] ‚¶Ö f , FV ‚¶Ü ‚àà D √ó FV ‚â¢ []

cdr : DOp (ùí´ Value) (‚ñ† ‚à∑ [])
cdr ‚ü® D , _ ‚ü© fv = Œ£[ f ‚àà Value ] Œ£[ FV ‚àà List Value ] ‚¶Ö f , FV ‚¶Ü ‚àà D √ó fv ‚àà mem FV

ùíØ-cons : DOp (ùí´ Value) (‚ñ† ‚à∑ ‚ñ† ‚à∑ [])
ùíØ-cons ‚ü® D , ‚ü® ùíØDs , _ ‚ü© ‚ü© ‚à• d ‚à∑ ds ‚à• = d ‚àà D √ó ‚à• ds ‚à• ‚àà ùíØDs
ùíØ-cons ‚ü® D , ‚ü® ùíØDs , _ ‚ü© ‚ü© d = False

ùíØ : ‚àÄ n ‚Üí DOp (ùí´ Value) (replicate n ‚ñ†)
ùíØ n = Dfold ‚ñ† ‚ñ† n ùíØ-cons ‚åà ‚à• [] ‚à• ‚åâ

{-
ùíØ : ‚àÄ n ‚Üí DOp (ùí´ Value) (replicate n ‚ñ†)
ùíØ zero ‚à• [] ‚à• = True
ùíØ zero d = False
ùíØ (suc n) D = DComp-n-1 (replicate n ‚ñ†) ‚ñ† ‚ñ† (ùíØ n) (ùíØ-cons D)
-}



{-
ùíú-cons : DOp (ùí´ Value) (‚ñ† ‚à∑ ‚ñ† ‚à∑ [])
ùíú-cons ‚ü® D , ‚ü® F , _ ‚ü© ‚ü© (v , V ‚Ü¶ w) = fv ‚àà D √ó (V ‚Ü¶ w ‚àà F
ùíú-cons ‚ü® D , ‚ü® F , _ ‚ü© ‚ü© d = False

{-
ùíú : ‚àÄ (n : ‚Ñï) ‚Üí DOp (ùí´ Value) (‚ñ† ‚à∑ replicate n ‚ñ†)
ùíú zero F = F
ùíú (suc n) F D = DComp-n-1 (replicate n ‚ñ†) ‚ñ† ‚ñ† (ùíú n F) (ùíú-cons D)
-}

ùíú : ‚àÄ n ‚Üí DOp (ùí´ Value) (‚ñ† ‚à∑ replicate n ‚ñ†)
ùíú n ‚ü® F , Ds ‚ü© = Dfold ‚ñ† ‚ñ† n ùíú-cons F Ds
-}

nth : List Value ‚Üí ‚Ñï ‚Üí Value
nth [] i = œâ
nth (v ‚à∑ vs) 0 = v
nth (v ‚à∑ vs) (suc i) = nth vs i

proj : ‚Ñï ‚Üí DOp (ùí´ Value) (‚ñ† ‚à∑ [])
proj i ‚ü® D , _ ‚ü© u = Œ£[ vs ‚àà List Value ]
    i < length vs  √ó  ‚à• vs ‚à• ‚àà D  √ó  u ‚â° nth vs i

‚Ñí : DOp (ùí´ Value) (‚ñ† ‚à∑ [])
‚Ñí ‚ü® D , _ ‚ü© (left v) = v ‚àà D
‚Ñí ‚ü® D , _ ‚ü© _ = False

‚Ñõ : DOp (ùí´ Value) (‚ñ† ‚à∑ [])
‚Ñõ ‚ü® D , _ ‚ü© (right v) = v ‚àà D
‚Ñõ ‚ü® D , _ ‚ü© _ = False

ùíû : DOp (ùí´ Value) (‚ñ† ‚à∑ ŒΩ ‚ñ† ‚à∑ ŒΩ ‚ñ† ‚à∑ [])
ùíû ‚ü® D , ‚ü® E , ‚ü® F , _ ‚ü© ‚ü© ‚ü© w = Œ£[ v ‚àà Value ] Œ£[ V ‚àà List Value ] (‚àÄ d ‚Üí d ‚àà mem (v ‚à∑ V) ‚Üí left d ‚àà D) √ó w ‚àà E (mem (v ‚à∑ V)) 
          ‚äé (Œ£[ v ‚àà Value ] Œ£[ V ‚àà List Value ] (‚àÄ d ‚Üí d ‚àà mem (v ‚à∑ V) ‚Üí right d ‚àà D) √ó w ‚àà F (mem (v ‚à∑ V)))

Œõ : DOp (ùí´ Value) (ŒΩ ‚ñ† ‚à∑ [])
Œõ ‚ü® f , _ ‚ü© (const k) = False
Œõ ‚ü® f , _ ‚ü© (V ‚Ü¶ w) = w ‚àà f (mem V) √ó V ‚â¢ []
Œõ ‚ü® f , _ ‚ü© ŒΩ = True
Œõ ‚ü® f , _ ‚ü© œâ = False
Œõ ‚ü® f , _ ‚ü© ‚¶Ö d , fv ‚¶Ü = False
Œõ ‚ü® f , _ ‚ü© ‚à• vs ‚à• = False
Œõ ‚ü® f , _ ‚ü© (left v) = False
Œõ ‚ü® f , _ ‚ü© (right v) = False


{- Interesting idea: we use a sort of "n-ary lambda" for both curried and uncurried annotations...
   essentially we store all the environment entries in the a List (List Value) annotation at the front...
{- n entries _besides_ the argument -}
Œõn : ‚àÄ n ‚Üí DOp (ùí´ Value) (fv ‚à∑ FV ‚ä¢ŒΩ-n n (ŒΩ ‚ñ†) ‚à∑ replicate n ‚ñ†)
Œõn zero ‚ü® F , _ ‚ü© = Œõ ‚ü® F , ptt ‚ü©
Œõn (suc n) ‚ü® F , ‚ü® D , Ds ‚ü© ‚ü© (v , V ‚Ü¶ w) = (mem FV) ‚äÜ D √ó FV ‚â¢ [] √ó Œõn n ‚ü® F (mem FV) , Ds ‚ü© (FVs ‚ä¢ v , V ‚Ü¶ w)
Œõn (suc n) ‚ü® F , ‚ü® D , Ds ‚ü© ‚ü© ŒΩ = True
Œõn (suc n) ‚ü® F , ‚ü® D , Ds ‚ü© ‚ü© d = False
-}


{-
Œõ-cons : DOp (ùí´ Value) (‚ñ† ‚à∑ ‚ñ† ‚à∑ [])
Œõ-cons ‚ü® D , ‚ü® F , _ ‚ü© ‚ü© (v , V ‚Ü¶ w) = fv ‚àà D √ó (V ‚Ü¶ w ‚àà F
Œõ-cons ‚ü® D , ‚ü® F , _ ‚ü© ‚ü© d = False
-}

{-
un-ùíú : ‚àÄ n F Ds fvs V w ‚Üí (V ‚Ü¶ w ‚àà ùíú n ‚ü® Œõ F , Ds ‚ü© 
      ‚Üí [] ‚ä¢ v , V ‚Ü¶ w ‚àà Œõ F √ó ‚à• fvs ‚à• ‚àà ùíØ n Ds
un-ùíú zero F Ds [] V w d‚àà = ‚ü® d‚àà , refl ‚ü©
un-ùíú zero F Ds (x ‚à∑ fvs) V w ()
un-ùíú (suc n) F ‚ü® D , Ds ‚ü© (x ‚à∑ fvs) V w ‚ü® d‚àà , ds‚àà ‚ü© with un-ùíú n F Ds fvs V w ds‚àà
... | ‚ü® q , q' ‚ü© = ‚ü® q , ‚ü® d‚àà , q' ‚ü© ‚ü©
-}

{-

Œõ' : ‚àÄ (n : ‚Ñï) ‚Üí (ùí´ Value ‚Üí ùí´ Value) ‚Üí Œ† n (ùí´ Value)
               ‚Üí ùí´ Value
Œõ' n ‚ü¶fvs‚üß f (const k) = False
Œõ' n ‚ü¶fvs‚üß f (V ‚Ü¶ w) = w ‚àà f (mem (v ‚à∑ V)) √ó V ‚â¢ [] √ó Œ£[ n‚â° ‚àà n ‚â° length fvs ]
                            rel-Œ† (_‚äÜ_) (Œ†-map mem (toŒ† fvs)) 
                                        (subst (Œª z ‚Üí Œ† z (ùí´ Value)) n‚â° ‚ü¶fvs‚üß)
Œõ' n ‚ü¶fvs‚üß f ŒΩ = True
Œõ' n ‚ü¶fvs‚üß f œâ = False
Œõ' n ‚ü¶fvs‚üß f ‚¶Ö v , v‚ÇÅ ‚¶Ü = False
Œõ' n ‚ü¶fvs‚üß f ‚à• x ‚à• = False
Œõ' n ‚ü¶fvs‚üß f (left x) = False
Œõ' n ‚ü¶fvs‚üß f (right x) = False

Œõ‚Ä≤ : ‚àÄ (n : ‚Ñï) ‚Üí DOp (ùí´ Value) (ŒΩ ‚ñ† ‚à∑ replicate n ‚ñ†)
Œõ‚Ä≤ n f = curryFun (Œõ' n f)

-}

{- Monotonicity and congruence of operators --------------------------------------------------}

‚ãÜ-mono : monotone (‚ñ† ‚à∑ ‚ñ† ‚à∑ []) ‚ñ† ‚ãÜ
‚ãÜ-mono ‚ü® D , ‚ü® E , _ ‚ü© ‚ü© ‚ü® D' , ‚ü® E' , _ ‚ü© ‚ü© ‚ü® lift D‚äÜ , ‚ü® lift E‚äÜ , _ ‚ü© ‚ü© = lift G
  where
  G : ‚ãÜ ‚ü® D , ‚ü® E , ptt ‚ü© ‚ü© ‚äÜ ‚ãÜ ‚ü® D' , ‚ü® E' , ptt ‚ü© ‚ü©
  G d ‚ü® V , ‚ü® wv‚ààD , ‚ü® V<E , neV ‚ü© ‚ü© ‚ü© =
     ‚ü® V , ‚ü® D‚äÜ (V ‚Ü¶ d) wv‚ààD , ‚ü® (Œª d z ‚Üí E‚äÜ d (V<E d z)) , neV ‚ü© ‚ü© ‚ü©

‚ãÜ-cong : congruent (‚ñ† ‚à∑ ‚ñ† ‚à∑ []) ‚ñ† ‚ãÜ
‚ãÜ-cong ‚ü® D , ‚ü® E , _ ‚ü© ‚ü© ‚ü® D' , ‚ü® E' , _ ‚ü© ‚ü© 
       ‚ü® lift ‚ü® D<D' , D'<D ‚ü© , ‚ü® lift ‚ü® E<E' , E'<E ‚ü© , _ ‚ü© ‚ü© = lift G
  where
  G : ‚ãÜ ‚ü® D , ‚ü® E , ptt ‚ü© ‚ü© ‚âÉ ‚ãÜ ‚ü® D' , ‚ü® E' , ptt ‚ü© ‚ü©
  G = ‚ü® lower (‚ãÜ-mono ‚ü® D , ‚ü® E , ptt ‚ü© ‚ü© ‚ü® D' , ‚ü® E' , ptt ‚ü© ‚ü© ‚ü® lift D<D' , ‚ü® lift E<E' , ptt ‚ü© ‚ü©) 
      , lower (‚ãÜ-mono ‚ü® D' , ‚ü® E' , ptt ‚ü© ‚ü© ‚ü® D , ‚ü® E , ptt ‚ü© ‚ü© ‚ü® lift D'<D , ‚ü® lift E'<E , ptt ‚ü© ‚ü©) ‚ü©

Œõ-mono : monotone (ŒΩ ‚ñ† ‚à∑ []) ‚ñ† Œõ
Œõ-mono¬†‚ü® F , _ ‚ü© ‚ü® F' , _ ‚ü© ‚ü® F‚äÜ , _ ‚ü© = lift G
  where 
  G : Œõ ‚ü® F , ptt ‚ü©  ‚äÜ Œõ ‚ü® F' , ptt ‚ü©
  G (V ‚Ü¶ w) ‚ü® w‚ààF‚ÇÅX , neV ‚ü© = 
    ‚ü® lower (F‚äÜ (mem V) (mem V) (Œª d z ‚Üí z)) w w‚ààF‚ÇÅX , neV ‚ü©
  G ŒΩ v‚àà = tt

Œõ-ext-‚äÜ : ‚àÄ{F‚ÇÅ F‚ÇÇ : (ùí´ Value) ‚Üí (ùí´ Value)}
  ‚Üí (‚àÄ {X} ‚Üí F‚ÇÅ X ‚äÜ F‚ÇÇ X)
  ‚Üí Œõ ‚ü® F‚ÇÅ , ptt ‚ü© ‚äÜ Œõ ‚ü® F‚ÇÇ , ptt ‚ü©
Œõ-ext-‚äÜ {F‚ÇÅ} {F‚ÇÇ} F‚ÇÅ‚äÜF‚ÇÇ (V ‚Ü¶ w) ‚ü® w‚ààF‚ÇÅX , neV ‚ü© =
    ‚ü® F‚ÇÅ‚äÜF‚ÇÇ w w‚ààF‚ÇÅX , neV ‚ü©
Œõ-ext-‚äÜ {F‚ÇÅ} {F‚ÇÇ} F‚ÇÅ‚äÜF‚ÇÇ ŒΩ v‚àà = tt

Œõ-ext : ‚àÄ{F‚ÇÅ F‚ÇÇ : (ùí´ Value) ‚Üí (ùí´ Value)}
  ‚Üí (‚àÄ {X} ‚Üí F‚ÇÅ X ‚âÉ F‚ÇÇ X)
  ‚Üí Œõ ‚ü® F‚ÇÅ , ptt ‚ü© ‚âÉ Œõ ‚ü® F‚ÇÇ , ptt ‚ü©
Œõ-ext {F‚ÇÅ}{F‚ÇÇ} F‚ÇÅ‚âÉF‚ÇÇ = ‚ü® Œõ-ext-‚äÜ (proj‚ÇÅ F‚ÇÅ‚âÉF‚ÇÇ) , Œõ-ext-‚äÜ (proj‚ÇÇ F‚ÇÅ‚âÉF‚ÇÇ) ‚ü©

Œõ-cong : congruent (ŒΩ ‚ñ† ‚à∑ []) ‚ñ† Œõ
Œõ-cong ‚ü® F , _ ‚ü© ‚ü® F' , _ ‚ü© ‚ü® F‚âÉ , _ ‚ü© = lift ‚ü® G1 , G2 ‚ü©
  where
  G1 : Œõ ‚ü® F , _ ‚ü© ‚äÜ Œõ ‚ü® F' , _ ‚ü©
  G1 (V ‚Ü¶ w) ‚ü® w‚ààFV , neV ‚ü© = ‚ü® proj‚ÇÅ (lower
     (F‚âÉ (mem V) (mem V)
          ‚ü® (Œª x x‚ÇÅ ‚Üí x‚ÇÅ) , (Œª x x‚ÇÅ ‚Üí x‚ÇÅ) ‚ü©))
             w w‚ààFV , neV ‚ü©
  G1 ŒΩ tt = tt
  G2 : Œõ ‚ü® F' , ptt ‚ü© ‚äÜ Œõ ‚ü® F , ptt ‚ü©
  G2 (V ‚Ü¶ w) ‚ü® w‚ààF'V , neV ‚ü© = ‚ü® proj‚ÇÇ (lower 
     (F‚âÉ (mem V) (mem V) 
         ‚ü® (Œª x x‚ÇÅ ‚Üí x‚ÇÅ) , (Œª x x‚ÇÅ ‚Üí x‚ÇÅ) ‚ü©)) 
         w w‚ààF'V , neV ‚ü©
  G2 ŒΩ tt = tt

{- 
Œõn-mono : ‚àÄ n ‚Üí monotone (fv ‚à∑ FV ‚ä¢ŒΩ-n n (ŒΩ ‚ñ†) ‚à∑ replicate n ‚ñ†) ‚ñ† (Œõn n)
Œõn-mono zero = Œõ-mono
Œõn-mono (suc n) ‚ü® F , ‚ü® D , Ds ‚ü© ‚ü© ‚ü® F' , ‚ü® D' , Ds' ‚ü© ‚ü© ‚ü® F‚äÜ , ‚ü® D‚äÜ , Ds‚äÜ ‚ü© ‚ü© = lift G
  where 
  G : Œõn (suc n) ‚ü® F , ‚ü® D , Ds ‚ü© ‚ü© ‚äÜ Œõn (suc n) ‚ü® F' , ‚ü® D' , Ds' ‚ü© ‚ü©
  G ŒΩ tt = tt
  G (v , V ‚Ü¶ d) ‚ü® FV‚äÜD , ‚ü® neFV , d‚àà ‚ü© ‚ü© = 
     ‚ü® (Œª z z‚àà ‚Üí lower D‚äÜ z (FV‚äÜD z z‚àà)) , ‚ü® neFV , 
     lower (Œõn-mono n ‚ü® F (mem FV) , Ds ‚ü© 
                   ‚ü® F' (mem FV) , Ds' ‚ü© ‚ü® F‚äÜ (mem FV) (mem FV) (Œª d z ‚Üí z) , Ds‚äÜ ‚ü©)  
                   (FVs ‚ä¢ v , V ‚Ü¶ d) d‚àà ‚ü© ‚ü©
-}



pair-mono : monotone (‚ñ† ‚à∑ ‚ñ† ‚à∑ []) ‚ñ† pair
pair-mono ‚ü® D , ‚ü® E , _ ‚ü© ‚ü© ‚ü® D' , ‚ü® E' , _ ‚ü© ‚ü© ‚ü® lift D‚äÜ , ‚ü® lift E‚äÜ , _ ‚ü© ‚ü© = lift G
  where
  G : pair ‚ü® D , ‚ü® E , ptt ‚ü© ‚ü© ‚äÜ pair ‚ü® D' , ‚ü® E' , ptt ‚ü© ‚ü©
  G ‚¶Ö f , FV ‚¶Ü ‚ü® f‚ààD , ‚ü® FV‚äÜE , neFV ‚ü© ‚ü© = ‚ü® D‚äÜ f f‚ààD , ‚ü® (Œª d z ‚Üí E‚äÜ d (FV‚äÜE d z)) , neFV ‚ü© ‚ü©

pair-cong : congruent (‚ñ† ‚à∑ ‚ñ† ‚à∑ []) ‚ñ† pair
pair-cong ‚ü® D , ‚ü® E , _ ‚ü© ‚ü© ‚ü® D' , ‚ü® E' , _ ‚ü© ‚ü© 
       ‚ü® lift ‚ü® D<D' , D'<D ‚ü© , ‚ü® lift ‚ü® E<E' , E'<E ‚ü© , _ ‚ü© ‚ü© = lift G
  where
  G : pair ‚ü® D , ‚ü® E , ptt ‚ü© ‚ü© ‚âÉ pair ‚ü® D' , ‚ü® E' , ptt ‚ü© ‚ü©
  G = ‚ü® lower (pair-mono ‚ü® D , ‚ü® E , ptt ‚ü© ‚ü© ‚ü® D' , ‚ü® E' , ptt ‚ü© ‚ü© ‚ü® lift D<D' , ‚ü® lift E<E' , ptt ‚ü© ‚ü©) 
      , lower (pair-mono ‚ü® D' , ‚ü® E' , ptt ‚ü© ‚ü© ‚ü® D , ‚ü® E , ptt ‚ü© ‚ü© ‚ü® lift D'<D , ‚ü® lift E'<E , ptt ‚ü© ‚ü©) ‚ü©

car-mono : monotone (‚ñ† ‚à∑ []) ‚ñ† car
car-mono ‚ü® D , _ ‚ü© ‚ü® D' , _ ‚ü© ‚ü® (lift D‚äÜ) , _ ‚ü© = lift G
  where
  G : car ‚ü® D , ptt ‚ü© ‚äÜ car ‚ü® D' , ptt ‚ü©
  G u ‚ü® v , ‚ü® p‚àà , nev ‚ü© ‚ü© = ‚ü® v , ‚ü® D‚äÜ ‚¶Ö u , v ‚¶Ü p‚àà , nev ‚ü© ‚ü© 

car-cong : congruent (‚ñ† ‚à∑ []) ‚ñ† car
car-cong ‚ü® D , _ ‚ü© ‚ü® D' , _ ‚ü© ‚ü® (lift ‚ü® D<D' , D'<D ‚ü©) , _ ‚ü© = lift G
  where
  G : car ‚ü® D , ptt ‚ü© ‚âÉ car ‚ü® D' , ptt ‚ü©
  G = ‚ü® lower (car-mono ‚ü® D , ptt ‚ü© ‚ü® D' , ptt ‚ü© ‚ü® lift D<D' , ptt ‚ü©) 
      , lower (car-mono ‚ü® D' , ptt ‚ü© ‚ü® D , ptt ‚ü© ‚ü® lift D'<D , ptt ‚ü©) ‚ü©

cdr-mono : monotone (‚ñ† ‚à∑ []) ‚ñ† cdr
cdr-mono ‚ü® D , _ ‚ü© ‚ü® D' , _ ‚ü© ‚ü® (lift D‚äÜ) , _ ‚ü© = lift G
  where
  G : cdr ‚ü® D , _ ‚ü© ‚äÜ cdr ‚ü® D' , _ ‚ü©
  G v ‚ü® u , ‚ü® V , ‚ü® p‚àà , v‚ààV ‚ü© ‚ü© ‚ü© = ‚ü® u , ‚ü® V , ‚ü® D‚äÜ ‚¶Ö u , V ‚¶Ü p‚àà , v‚ààV ‚ü© ‚ü© ‚ü©

cdr-cong : congruent (‚ñ† ‚à∑ []) ‚ñ† cdr
cdr-cong ‚ü® D , _ ‚ü© ‚ü® D' , _ ‚ü© ‚ü® (lift ‚ü® D<D' , D'<D ‚ü©) , _ ‚ü© = lift G
  where
  G : cdr ‚ü® D , _ ‚ü© ‚âÉ cdr ‚ü® D' , _ ‚ü©
  G = ‚ü® lower (cdr-mono ‚ü® D , ptt ‚ü© ‚ü® D' , ptt ‚ü© ‚ü® lift D<D' , ptt ‚ü©) 
      , lower (cdr-mono ‚ü® D' , ptt ‚ü© ‚ü® D , ptt ‚ü© ‚ü® lift D'<D , ptt ‚ü©) ‚ü©


‚Ñí-mono : monotone (‚ñ† ‚à∑ []) ‚ñ† ‚Ñí
‚Ñí-mono ‚ü® D , _ ‚ü© ‚ü® D' , _ ‚ü© ‚ü® (lift D‚äÜ) , _ ‚ü© = lift G
  where
  G : ‚Ñí ‚ü® D , ptt ‚ü© ‚äÜ ‚Ñí ‚ü® D' , ptt ‚ü©
  G (left v) v‚àà = D‚äÜ v v‚àà

‚Ñí-cong : congruent (‚ñ† ‚à∑ []) ‚ñ† ‚Ñí
‚Ñí-cong ‚ü® D , _ ‚ü© ‚ü® D' , _ ‚ü© ‚ü® (lift ‚ü® D<D' , D'<D ‚ü©) , _ ‚ü© = lift G
  where
  G : ‚Ñí ‚ü® D , ptt ‚ü© ‚âÉ ‚Ñí ‚ü® D' , ptt ‚ü©
  G = ‚ü® lower (‚Ñí-mono ‚ü® D , ptt ‚ü© ‚ü® D' , ptt ‚ü© ‚ü® lift D<D' , ptt ‚ü©) 
      , lower (‚Ñí-mono ‚ü® D' , ptt ‚ü© ‚ü® D , ptt ‚ü© ‚ü® lift D'<D , ptt ‚ü©) ‚ü©

‚Ñõ-mono : monotone (‚ñ† ‚à∑ []) ‚ñ† ‚Ñõ
‚Ñõ-mono ‚ü® D , _ ‚ü© ‚ü® D' , _ ‚ü© ‚ü® (lift D‚äÜ) , _ ‚ü© = lift G
  where
  G : ‚Ñõ ‚ü® D , ptt ‚ü© ‚äÜ ‚Ñõ ‚ü® D' , ptt ‚ü©
  G (right v) v‚àà = D‚äÜ v v‚àà

‚Ñõ-cong : congruent (‚ñ† ‚à∑ []) ‚ñ† ‚Ñõ
‚Ñõ-cong ‚ü® D , _ ‚ü© ‚ü® D' , _ ‚ü© ‚ü® (lift ‚ü® D<D' , D'<D ‚ü©) , _ ‚ü© = lift G
  where
  G : ‚Ñõ ‚ü® D , ptt ‚ü© ‚âÉ ‚Ñõ ‚ü® D' , ptt ‚ü©
  G = ‚ü® lower (‚Ñõ-mono ‚ü® D , ptt ‚ü© ‚ü® D' , ptt ‚ü© ‚ü® lift D<D' , ptt ‚ü©) 
      , lower (‚Ñõ-mono ‚ü® D' , ptt ‚ü© ‚ü® D , ptt ‚ü© ‚ü® lift D'<D , ptt ‚ü©) ‚ü©


ùíû-mono : monotone (‚ñ† ‚à∑ ŒΩ ‚ñ† ‚à∑ ŒΩ ‚ñ† ‚à∑ []) ‚ñ† ùíû
ùíû-mono ‚ü® D , ‚ü® FL , ‚ü® FR , _ ‚ü© ‚ü© ‚ü© ‚ü® D' , ‚ü® FL' , ‚ü® FR' , _ ‚ü© ‚ü© ‚ü© 
       ‚ü® lift D‚äÜ , ‚ü® FL‚äÜ , ‚ü® FR‚äÜ , _ ‚ü© ‚ü© ‚ü© = lift G
  where 
  G : ùíû ‚ü® D , ‚ü® FL , ‚ü® FR , _ ‚ü© ‚ü© ‚ü© ‚äÜ ùíû ‚ü® D' , ‚ü® FL' , ‚ü® FR' , _ ‚ü© ‚ü© ‚ü©
  G d (inj‚ÇÅ ‚ü® v , ‚ü® V , ‚ü® V‚äÜ , d‚àà ‚ü© ‚ü© ‚ü©) = 
    inj‚ÇÅ ‚ü® v , ‚ü® V , ‚ü® (Œª d z ‚Üí D‚äÜ (left d) (V‚äÜ d z)) 
         , lower (FL‚äÜ (mem (v ‚à∑ V)) (mem (v ‚à∑ V)) (Œª d z ‚Üí z)) d d‚àà ‚ü© ‚ü© ‚ü©
  G d (inj‚ÇÇ ‚ü® v , ‚ü® V , ‚ü® V‚äÜ , d‚àà ‚ü© ‚ü© ‚ü©) = 
    inj‚ÇÇ ‚ü® v , ‚ü® V , ‚ü® (Œª d z ‚Üí D‚äÜ (right d) (V‚äÜ d z)) 
         , lower (FR‚äÜ (mem (v ‚à∑ V)) (mem (v ‚à∑ V)) (Œª d z ‚Üí z)) d d‚àà ‚ü© ‚ü© ‚ü©
{-
ùíû-cong : congruent (‚ñ† ‚à∑ ‚ñ† ‚à∑ ‚ñ† ‚à∑ []) ‚ñ† ùíû
ùíû-cong ‚ü® D , ‚ü® FL , ‚ü® FR , _ ‚ü© ‚ü© ‚ü© ‚ü® D' , ‚ü® FL' , ‚ü® FR' , _ ‚ü© ‚ü© ‚ü© 
       ‚ü® lift ‚ü® D<D' , D'<D ‚ü© , ‚ü® lift ‚ü® FL<FL' , FL'<FL ‚ü© , ‚ü® lift ‚ü® FR<FR' , FR'<FR ‚ü© , _ ‚ü© ‚ü© ‚ü© = lift G
  where
  G : ùíû ‚ü® D , ‚ü® FL , ‚ü® FR , ptt ‚ü© ‚ü© ‚ü© ‚âÉ ùíû ‚ü® D' , ‚ü® FL' , ‚ü® FR' , ptt ‚ü© ‚ü© ‚ü©
  G = ‚ü® lower (ùíû-mono ‚ü® D , ‚ü® FL , ‚ü® FR , ptt ‚ü© ‚ü© ‚ü© ‚ü® D' , ‚ü® FL' , ‚ü® FR' , ptt ‚ü© ‚ü© ‚ü© ‚ü® lift D<D' , ‚ü® lift FL<FL' , ‚ü® lift FR<FR' , ptt ‚ü© ‚ü© ‚ü©) 
      , lower (ùíû-mono ‚ü® D' , ‚ü® FL' , ‚ü® FR' , ptt ‚ü© ‚ü© ‚ü© ‚ü® D , ‚ü® FL , ‚ü® FR , ptt ‚ü© ‚ü© ‚ü© ‚ü® lift D'<D , ‚ü® lift FL'<FL , ‚ü® lift FR'<FR , ptt ‚ü© ‚ü© ‚ü©) ‚ü©
-}

proj-mono : ‚àÄ i ‚Üí monotone (‚ñ† ‚à∑ []) ‚ñ† (proj i)
proj-mono i ‚ü® D , _ ‚ü© ‚ü® D' , _ ‚ü© ‚ü® (lift D‚äÜ) , _ ‚ü© = lift G
  where
  G : proj i ‚ü® D , ptt ‚ü© ‚äÜ proj i ‚ü® D' , ptt ‚ü©
  G d ‚ü® vs , ‚ü® i< , ‚ü® vs‚àà , refl ‚ü© ‚ü© ‚ü© = ‚ü® vs , ‚ü® i< , ‚ü® D‚äÜ ‚à• vs ‚à• vs‚àà , refl ‚ü© ‚ü© ‚ü©

proj-cong : ‚àÄ i ‚Üí congruent (‚ñ† ‚à∑ []) ‚ñ† (proj i)
proj-cong i ‚ü® D , _ ‚ü© ‚ü® D' , _ ‚ü© ‚ü® (lift ‚ü® D<D' , D'<D ‚ü©) , _ ‚ü© = lift G
  where
  G : proj i ‚ü® D , _ ‚ü© ‚âÉ proj i ‚ü® D' , _ ‚ü©
  G = ‚ü® lower (proj-mono i ‚ü® D , ptt ‚ü© ‚ü® D' , ptt ‚ü© ‚ü® lift D<D' , ptt ‚ü©) 
      , lower (proj-mono i ‚ü® D' , ptt ‚ü© ‚ü® D , ptt ‚ü© ‚ü® lift D'<D , ptt ‚ü©) ‚ü©

ùíØ-cons-mono : monotone (‚ñ† ‚à∑ ‚ñ† ‚à∑ []) ‚ñ† ùíØ-cons
ùíØ-cons-mono ‚ü® D , ‚ü® E , _ ‚ü© ‚ü© ‚ü® D' , ‚ü® E' , _ ‚ü© ‚ü© ‚ü® lift D‚äÜ , ‚ü® lift E‚äÜ , _ ‚ü© ‚ü© = lift G
  where
  G : ùíØ-cons ‚ü® D , ‚ü® E , _ ‚ü© ‚ü© ‚äÜ ùíØ-cons ‚ü® D' , ‚ü® E' , _ ‚ü© ‚ü©
  G ‚à• d ‚à∑ ds ‚à• ‚ü® d‚àà , ds‚àà ‚ü© = ‚ü® D‚äÜ d d‚àà , E‚äÜ ‚à• ds ‚à• ds‚àà ‚ü©

ùíØ-mono : ‚àÄ n ‚Üí monotone (replicate n ‚ñ†) ‚ñ† (ùíØ n)
ùíØ-mono n = Dfold-pres _‚äÜ_ ‚ñ† ‚ñ† n ùíØ-cons ùíØ-cons ‚åà ‚à• [] ‚à• ‚åâ ‚åà ‚à• [] ‚à• ‚åâ  
           ùíØ-cons-mono (lift (Œª d z ‚Üí z))

{-
ùíØ-mono : ‚àÄ n ‚Üí monotone (replicate n ‚ñ†) ‚ñ† (ùíØ n)
ùíØ-mono zero = lift (Œª d z ‚Üí z)
ùíØ-mono (suc n) D D' (lift D‚äÜ) = 
  DComp-n-1-pres _‚äÜ_ (replicate n ‚ñ†) ‚ñ† ‚ñ† (ùíØ n) (ùíØ n) (ùíØ-cons D) (ùíØ-cons D') 
                 (ùíØ-mono n) (ùíØ-cons-mono D D' (lift D‚äÜ))
-}
{-
ùíú-cons-mono : monotone (‚ñ† ‚à∑ ‚ñ† ‚à∑ []) ‚ñ† ùíú-cons
ùíú-cons-mono ‚ü® D , ‚ü® E , _ ‚ü© ‚ü© ‚ü® D' , ‚ü® E' , _ ‚ü© ‚ü© ‚ü® lift D‚äÜ , ‚ü® lift E‚äÜ , _ ‚ü© ‚ü© = lift G
  where
  G : ùíú-cons ‚ü® D , ‚ü® E , _ ‚ü© ‚ü© ‚äÜ ùíú-cons ‚ü® D' , ‚ü® E' , _ ‚ü© ‚ü©
  G (v , V ‚Ü¶ w) ‚ü® fv‚àà , d‚àà ‚ü© = 
    ‚ü® D‚äÜ fv fv‚àà , E‚äÜ (V ‚Ü¶ w) d‚àà ‚ü©

ùíú-mono : ‚àÄ n ‚Üí monotone (‚ñ† ‚à∑ replicate n ‚ñ†) ‚ñ† (ùíú n)
ùíú-mono n ‚ü® F , Ds ‚ü© ‚ü® F' , Ds' ‚ü© ‚ü® (lift F‚äÜ) , Ds‚äÜ ‚ü© = 
  Dfold-pres _‚äÜ_ ‚ñ† ‚ñ† n ùíú-cons ùíú-cons F F' ùíú-cons-mono (lift F‚äÜ) Ds Ds' Ds‚äÜ
-}

{-
ùíú-mono : ‚àÄ n ‚Üí monotone (‚ñ† ‚à∑ replicate n ‚ñ†) ‚ñ† (ùíú n)
ùíú-mono zero F F' F‚äÜ = F‚äÜ
ùíú-mono (suc n) F F' (lift F‚äÜ) D D' (lift D‚äÜ) = 
  DComp-n-1-pres _‚äÜ_ (replicate n ‚ñ†) ‚ñ† ‚ñ† (ùíú n F) (ùíú n F') (ùíú-cons D) (ùíú-cons D') 
    (ùíú-mono n F F' (lift F‚äÜ)) (ùíú-cons-mono D D' (lift D‚äÜ))
-}


{-

ùíØ'-mono : ‚àÄ{n}(Ds Es : Œ† n (ùí´ Value)) ‚Üí Ds ‚´É Es ‚Üí ùíØ' n Ds ‚äÜ ùíØ' n Es
ùíØ'-mono {zero} _ _ Ds‚äÜEs v v‚àà = v‚àà
ùíØ'-mono {suc n} ‚ü® D , Ds ‚ü© ‚ü® E , Es ‚ü© ‚ü® D‚äÜE , Ds‚äÜEs ‚ü© ‚à• v ‚à∑ vs ‚à•
    ‚ü® v‚ààD , vs‚ààùíØDs ‚ü© = ‚ü® (D‚äÜE v v‚ààD) , (ùíØ'-mono Ds Es Ds‚äÜEs ‚à• vs ‚à• vs‚ààùíØDs) ‚ü©

ùíØ-mono : ‚àÄ n ‚Üí monotone (replicate n ‚ñ†) ‚ñ† (ùíØ n)
ùíØ-mono n = curry-rel n _‚äÜ_ (ùíØ' n) (ùíØ' n) (ùíØ'-mono {n})

ùíØ'-cong : ‚àÄ {n} (Ds Es : Œ† n (ùí´ Value)) ‚Üí Ds ‚©≠ Es ‚Üí ùíØ' n Ds ‚âÉ ùíØ' n Es
ùíØ'-cong {n} Ds Es Ds=Es with ‚©≠‚áí‚äÜ Ds=Es
... | ‚ü® Ds‚äÜEs , Es‚äÜDs ‚ü© =    
  ‚ü® ùíØ'-mono Ds Es Ds‚äÜEs , ùíØ'-mono Es Ds Es‚äÜDs ‚ü©

ùíØ-cong : ‚àÄ n ‚Üí congruent (replicate n ‚ñ†) ‚ñ† (ùíØ n)
ùíØ-cong n = curry-rel n _‚âÉ_ (ùíØ' n) (ùíØ' n) (ùíØ'-cong {n})

Œõ'-mono : ‚àÄ n F G ‚Üí result-rel-pres _‚äÜ_ (ŒΩ ‚ñ†) F G ‚Üí ‚àÄ (Ds Es : Œ† n (ùí´ Value)) 
                  ‚Üí rel-Œ† _‚äÜ_ Ds Es ‚Üí Œõ' n Ds F ‚äÜ Œõ' n Es G
Œõ'-mono n F G F‚äÜ Ds Es Ds‚äÜ ŒΩ d‚àà = d‚àà
Œõ'-mono n F G F‚äÜ Ds Es Ds‚äÜ (V ‚Ü¶ w) ‚ü® w‚àà , ‚ü® Vne , ‚ü® refl , fvs‚äÜDs ‚ü© ‚ü© ‚ü© = 
      ‚ü® lower (F‚äÜ (mem (v ‚à∑ V)) (mem (v ‚à∑ V)) (Œª x z ‚Üí z)) w w‚àà 
      , ‚ü® Vne , ‚ü® refl , helper fvs Ds Es Ds‚äÜ fvs‚äÜDs ‚ü© ‚ü© ‚ü©
  where
  helper : ‚àÄ fvs (Ds Es : Œ† (length fvs) (ùí´ Value))
      ‚Üí rel-Œ† _‚äÜ_ Ds Es
      ‚Üí rel-Œ† _‚äÜ_ (Œ†-map mem (toŒ† fvs)) Ds
      ‚Üí rel-Œ† _‚äÜ_ (Œ†-map mem (toŒ† fvs)) Es
  helper [] Ds Es Ds‚äÜEs fvs‚äÜDs = tt
  helper (fv ‚à∑ fvs) ‚ü® D , Ds ‚ü© ‚ü® E , Es ‚ü© ‚ü® D‚äÜE , Ds‚äÜEs ‚ü© ‚ü® fv‚äÜD , fvs‚äÜDs ‚ü© = 
    ‚ü® (Œª d z ‚Üí D‚äÜE d (fv‚äÜD d z)) , helper fvs Ds Es Ds‚äÜEs fvs‚äÜDs ‚ü©

Œõ‚Ä≤-mono : ‚àÄ n ‚Üí monotone (ŒΩ ‚ñ† ‚à∑ replicate n ‚ñ†) ‚ñ† (Œõ‚Ä≤ n)
Œõ‚Ä≤-mono n F G F‚äÜ = curry-rel n _‚äÜ_ (Œª z ‚Üí Œõ' n z F) (Œª z ‚Üí Œõ' n z G) (Œõ'-mono n F G F‚äÜ)

-}



{- Consistency ----------------------------------------------------------------}

‚ãÜ-consis : consistent _~_ (‚ñ† ‚à∑ ‚ñ† ‚à∑ []) ‚ñ† ‚ãÜ
‚ãÜ-consis ‚ü® D , ‚ü® E , _ ‚ü© ‚ü© ‚ü® D' , ‚ü® E' , _ ‚ü© ‚ü© ‚ü® lift D~ , ‚ü® lift E~ , _ ‚ü© ‚ü© = lift G
  where
  G : Every _~_ (‚ãÜ ‚ü® D , ‚ü® E , ptt ‚ü© ‚ü©) (‚ãÜ ‚ü® D' , ‚ü® E' , ptt ‚ü© ‚ü©)
  G u w ‚ü® V , ‚ü® u‚ààD , ‚ü® V<E , neV ‚ü© ‚ü© ‚ü©
        ‚ü® V' , ‚ü® w‚ààD' , ‚ü® V<E' , neV' ‚ü© ‚ü© ‚ü©
        with D~ (V ‚Ü¶ u) (V' ‚Ü¶ w) u‚ààD w‚ààD'
  ... | inj‚ÇÅ x = ‚ä•-elim (x (Every‚áí‚âà V V' (Every-‚äÜ E~ V<E V<E')))
  ... | inj‚ÇÇ y = proj‚ÇÇ y

Œõ-consis : consistent _~_ (ŒΩ ‚ñ† ‚à∑ []) ‚ñ† Œõ
Œõ-consis ‚ü® F , _ ‚ü© ‚ü® F' , _ ‚ü© ‚ü® F~ , _ ‚ü© = lift G
  where
  G : Every _~_ (Œõ ‚ü® F , ptt ‚ü©) (Œõ ‚ü® F' , ptt ‚ü©)
  G ŒΩ (V ‚Ü¶ w) tt _ = tt
  G ŒΩ ŒΩ tt _ = tt
  G (V ‚Ü¶ w) ŒΩ w‚ààF‚ÇÅX tt = tt
  G (V ‚Ü¶ w) (V' ‚Ü¶ w') 
    ‚ü® w‚ààF‚ÇÅX , neV ‚ü© ‚ü® w‚ààF‚ÇÅX' , neV' ‚ü© with V ‚âà? V'
  ... | yes V‚âàV' = 
    inj‚ÇÇ ‚ü® V‚âàV' , lower (F~ (mem V) (mem V') (‚âà‚áíEvery V V' V‚âàV')) w w' w‚ààF‚ÇÅX w‚ààF‚ÇÅX' ‚ü©
  ... | no ¬¨V‚âàV' = inj‚ÇÅ ¬¨V‚âàV'

pair-consis : consistent _~_ (‚ñ† ‚à∑ ‚ñ† ‚à∑ []) ‚ñ† pair
pair-consis ‚ü® D , ‚ü® E , _ ‚ü© ‚ü© ‚ü® D' , ‚ü® E' , _ ‚ü© ‚ü© ‚ü® lift D~ , ‚ü® lift E~ , _ ‚ü© ‚ü© = lift G
  where
  G : Every _~_ (pair ‚ü® D , ‚ü® E , ptt ‚ü© ‚ü©) (pair ‚ü® D' , ‚ü® E' , ptt ‚ü© ‚ü©)
  G ‚¶Ö u , V ‚¶Ü ‚¶Ö u' , V' ‚¶Ü ‚ü® u‚àà , V‚äÜ ‚ü© ‚ü® u'‚àà , V'‚äÜ ‚ü© = 
    ‚ü® D~ u u' u‚àà u'‚àà 
      , Every‚áí‚âà V V' (Œª a b z z‚ÇÅ ‚Üí E~ a b (proj‚ÇÅ V‚äÜ a z) (proj‚ÇÅ V'‚äÜ b z‚ÇÅ)) ‚ü©

car-consis : consistent _~_ (‚ñ† ‚à∑ []) ‚ñ† car
car-consis ‚ü® D , _ ‚ü© ‚ü® D' , _ ‚ü© ‚ü® (lift D~) , _ ‚ü© = lift G
  where
  G : Every _~_ (car ‚ü® D , ptt ‚ü©) (car ‚ü® D' , ptt ‚ü©)
  G u u' ‚ü® V , ‚ü® p‚àà , neV ‚ü© ‚ü© ‚ü® V' , ‚ü® p'‚àà , neV' ‚ü© ‚ü© 
   with D~ ‚¶Ö u , V ‚¶Ü ‚¶Ö u' , V' ‚¶Ü p‚àà p'‚àà
  ... | ‚ü® u~ , v~ ‚ü© = u~

cdr-consis : consistent _~_ (‚ñ† ‚à∑ []) ‚ñ† cdr
cdr-consis ‚ü® D , _ ‚ü© ‚ü® D' , _ ‚ü© ‚ü® (lift D~) , _ ‚ü© = lift G
  where
  G : Every _~_ (cdr ‚ü® D , ptt ‚ü©) (cdr ‚ü® D' , ptt ‚ü©)
  G v v' ‚ü® u , ‚ü® V , ‚ü® p‚àà , v‚ààV ‚ü© ‚ü© ‚ü© ‚ü® u' , ‚ü® V' , ‚ü® p'‚àà , v'‚ààV' ‚ü© ‚ü© ‚ü©
    with D~ ‚¶Ö u , V ‚¶Ü ‚¶Ö u' , V' ‚¶Ü p‚àà p'‚àà
  ... | ‚ü® u~ , v~ ‚ü© = ‚âà‚áíEvery V V' v~ v v' v‚ààV v'‚ààV'

‚Ñí-consis : consistent _~_ (‚ñ† ‚à∑ []) ‚ñ† ‚Ñí
‚Ñí-consis ‚ü® D , _ ‚ü© ‚ü® D' , _ ‚ü© ‚ü® (lift D~) , _ ‚ü© = lift G
  where
  G : Every _~_ (‚Ñí ‚ü® D , ptt ‚ü©) (‚Ñí ‚ü® D' , ptt ‚ü©)
  G (left u) (left v) U‚àà V‚àà 
    = D~ u v U‚àà V‚àà

‚Ñõ-consis : consistent _~_ (‚ñ† ‚à∑ []) ‚ñ†¬†‚Ñõ
‚Ñõ-consis ‚ü® D , _ ‚ü© ‚ü® D' , _ ‚ü© ‚ü® (lift D~) , _ ‚ü© = lift G
  where
  G : Every _~_ (‚Ñõ ‚ü® D , ptt ‚ü©) (‚Ñõ ‚ü® D' , ptt ‚ü©)
  G (right u) (right v) U‚àà V‚àà 
    = D~ u v U‚àà V‚àà



ùíû-consis : consistent _~_ (‚ñ† ‚à∑ ŒΩ ‚ñ† ‚à∑ ŒΩ ‚ñ† ‚à∑ []) ‚ñ† ùíû
ùíû-consis ‚ü® D , ‚ü® FL , ‚ü® FR , _ ‚ü© ‚ü© ‚ü© ‚ü® D' , ‚ü® FL' , ‚ü® FR' , _ ‚ü© ‚ü© ‚ü© 
       ‚ü® lift D~ , ‚ü® FL~ , ‚ü® FR~ , _ ‚ü© ‚ü© ‚ü© = lift G
  where 
  G : Every _~_ (ùíû ‚ü® D , ‚ü® FL , ‚ü® FR , ptt ‚ü© ‚ü© ‚ü©) (ùíû ‚ü® D' , ‚ü® FL' , ‚ü® FR' , ptt ‚ü© ‚ü© ‚ü©)
  G u w (inj‚ÇÅ ‚ü® v , ‚ü® V , ‚ü® V‚äÜ , u‚àà ‚ü© ‚ü© ‚ü© ) (inj‚ÇÅ ‚ü® v' , ‚ü® V' , ‚ü® V‚äÜ' , w‚àà ‚ü© ‚ü© ‚ü©)
    = lower (FL~ (mem (v ‚à∑ V)) (mem (v' ‚à∑ V')) V‚âàV') u w u‚àà w‚àà
    where
    V‚âàV' : ‚àÄ d d' ‚Üí d ‚àà mem (v ‚à∑ V) ‚Üí d' ‚àà mem (v' ‚à∑ V') ‚Üí d ~ d'
    V‚âàV' d d' d‚àà d'‚àà = D~ (left d) (left d') (V‚äÜ d d‚àà) (V‚äÜ' d' d'‚àà)
  G u w (inj‚ÇÅ ‚ü® v , ‚ü® V , ‚ü® V‚äÜ , u‚àà ‚ü© ‚ü© ‚ü©) (inj‚ÇÇ ‚ü® v' , ‚ü® V' , ‚ü® V‚äÜ' , w‚àà ‚ü© ‚ü© ‚ü©) = 
    ‚ä•-elim (D~ (left v) (right v') (V‚äÜ v (here refl)) (V‚äÜ' v' (here refl)))
  G u w (inj‚ÇÇ ‚ü® v , ‚ü® V , ‚ü® V‚äÜ , u‚àà ‚ü© ‚ü© ‚ü©) (inj‚ÇÅ ‚ü® v' , ‚ü® V' , ‚ü® V‚äÜ' , w‚àà ‚ü© ‚ü© ‚ü©) = 
    ‚ä•-elim (D~ (right v) (left v') (V‚äÜ v (here refl)) (V‚äÜ' v' (here refl)))
  G u w (inj‚ÇÇ ‚ü® v , ‚ü® V , ‚ü® V‚äÜ , u‚àà ‚ü© ‚ü© ‚ü©) (inj‚ÇÇ ‚ü® v' , ‚ü® V' , ‚ü® V‚äÜ' , w‚àà ‚ü© ‚ü© ‚ü©)
    = lower (FR~ (mem (v ‚à∑ V)) (mem (v' ‚à∑ V')) V‚âàV') u w u‚àà w‚àà
    where
    V‚âàV' : ‚àÄ d d' ‚Üí d ‚àà mem (v ‚à∑ V) ‚Üí d' ‚àà mem (v' ‚à∑ V') ‚Üí d ~ d'
    V‚âàV' d d' d‚àà d'‚àà = D~ (right d) (right d') (V‚äÜ d d‚àà) (V‚äÜ' d' d'‚àà)

nth-~ : ‚àÄ i us vs ‚Üí ‚à• us ‚à• ~ ‚à• vs ‚à• ‚Üí 
    i < length us ‚Üí i < length vs ‚Üí 
    nth us i ~ nth vs i
nth-~ zero (x ‚à∑ us) (x‚ÇÅ ‚à∑ vs) us~vs i<us i<vs = proj‚ÇÅ us~vs
nth-~ (suc i) (x ‚à∑ us) (x‚ÇÅ ‚à∑ vs) ‚ü® fst , snd ‚ü© i<us i<vs = 
  nth-~ i us vs snd (‚â§-pred i<us) (‚â§-pred i<vs)

proj-consis : ‚àÄ i ‚Üí consistent _~_ (‚ñ† ‚à∑ []) ‚ñ† (proj i)
proj-consis i ‚ü® D , _ ‚ü© ‚ü® D' , _ ‚ü© ‚ü® (lift D~) , _ ‚ü© = lift G
  where
  G : Every _~_ (proj i ‚ü® D , ptt ‚ü©) (proj i ‚ü® D' , ptt ‚ü©)
  G u v ‚ü® us , ‚ü® i< , ‚ü® us‚àà , refl ‚ü© ‚ü© ‚ü© 
       ‚ü® vs , ‚ü® i<' , ‚ü® vs‚àà , refl ‚ü© ‚ü© ‚ü© 
    with D~ ‚à• us ‚à• ‚à• vs ‚à• us‚àà vs‚àà 
  ... | q = nth-~ i us vs q i< i<'

‚Ñ¨-consis : ‚àÄ B k ‚Üí consistent _~_ [] ‚ñ† (‚Ñ¨ B k)
‚Ñ¨-consis B k _ _ _ = lift G
  where 
  G : Every _~_ (‚Ñ¨ B k ptt) (‚Ñ¨ B k ptt)
  G (const {B'} k) (const {B''} k') d‚àà d'‚àà with base-eq? B B' | base-eq? B B''
  ... | yes refl | yes refl with base-eq? B B
  ... | yes refl = trans (sym d‚àà) d'‚àà
  ... | no neq = ‚ä•-elim (neq refl)

ùìÖ-consis : ‚àÄ P f ‚Üí consistent _~_ [] ‚ñ† (ùìÖ P f)
ùìÖ-consis P f _ _ _ = lift (G P f)
  where
  G : ‚àÄ P f ‚Üí Every _~_ (ùìÖ P f ptt) (ùìÖ P f ptt)
  G (base x) f (const {B} k) (const {B'} k') u‚àà v‚àà with base-eq? x B | base-eq? x B'
  ... | yes refl | yes refl with base-eq? x x
  ... | yes refl = trans (sym u‚àà) v‚àà
  ... | no neq = ‚ä•-elim (neq refl)
  G (x ‚áí P) f (.(const k ‚à∑ []) ‚Ü¶ u) (.(const k' ‚à∑ []) ‚Ü¶ v) 
    ‚ü® k , ‚ü® refl , u‚àà ‚ü© ‚ü© ‚ü® k' , ‚ü® refl , v‚àà ‚ü© ‚ü© with base-eq? x x | base-rep-eq? k k' 
  ... | no neq | q = ‚ä•-elim (neq refl )
  ... | yes refl | no neq = inj‚ÇÅ (Œª z ‚Üí H (head (proj‚ÇÅ z)))
    where
    H : const k ~ const k' ‚Üí False
    H z with base-eq? x x | z
    ... | no neq | q = ‚ä•-elim (neq refl)
    ... | yes refl | q = neq q
  ... | yes refl | yes refl = inj‚ÇÇ ‚ü® ‚ü® H ‚à∑ [] , tt ‚ü© , G P (f k) u v u‚àà v‚àà ‚ü©
    where
    H : const k ~ const k
    H with base-eq? x x
    ... | no neq = ‚ä•-elim (neq refl)
    ... | yes refl = refl
  G (x ‚áí P) f (V ‚Ü¶ u) ŒΩ u‚àà v‚àà = tt
  G (x ‚áí P) f ŒΩ (V ‚Ü¶ w) u‚àà v‚àà = tt
  G (x ‚áí P) f ŒΩ ŒΩ u‚àà v‚àà = tt


ùíØ-cons-consis : consistent _~_ (‚ñ† ‚à∑ ‚ñ† ‚à∑ []) ‚ñ† ùíØ-cons
ùíØ-cons-consis ‚ü® D , ‚ü® E , _ ‚ü© ‚ü© ‚ü® D' , ‚ü® E' , _ ‚ü© ‚ü© ‚ü® lift D~ , ‚ü® lift E~ , _ ‚ü© ‚ü© = lift G
  where
  G : Every _~_ (ùíØ-cons ‚ü® D , ‚ü® E , _ ‚ü© ‚ü©) (ùíØ-cons ‚ü® D' , ‚ü® E' , _ ‚ü© ‚ü©)
  G ‚à• u ‚à∑ us ‚à• ‚à• v ‚à∑ vs ‚à• ‚ü® u‚àà , us‚àà ‚ü© ‚ü® v‚àà , vs‚àà ‚ü© = ‚ü® D~ u v u‚àà v‚àà , E~ ‚à• us ‚à• ‚à• vs ‚à• us‚àà vs‚àà ‚ü©


ùíØ-consis : ‚àÄ n ‚Üí consistent _~_ (replicate n ‚ñ†) ‚ñ† (ùíØ n)
ùíØ-consis n = Dfold-pres (Every _~_) ‚ñ† ‚ñ† n ùíØ-cons ùíØ-cons ‚åà ‚à• [] ‚à• ‚åâ ‚åà ‚à• [] ‚à• ‚åâ  
           ùíØ-cons-consis (lift G)
  where
  G : (x x‚ÇÅ : Value) (x‚ÇÇ : x ‚â° ‚à• [] ‚à•) (x‚ÇÉ : x‚ÇÅ ‚â° ‚à• [] ‚à•) ‚Üí x ~ x‚ÇÅ 
  G .(‚à• [] ‚à•) .(‚à• [] ‚à•) refl refl = tt

{-
ùíú-cons-consis : consistent _~_ (‚ñ† ‚à∑ ‚ñ† ‚à∑ []) ‚ñ† ùíú-cons
ùíú-cons-consis ‚ü® D , ‚ü® E , _ ‚ü© ‚ü© ‚ü® D' , ‚ü® E' , _ ‚ü© ‚ü© ‚ü® lift D~ , ‚ü® lift E~ , _ ‚ü© ‚ü© = lift G
  where
  G : Every _~_ (ùíú-cons ‚ü® D , ‚ü® E , _ ‚ü© ‚ü©) (ùíú-cons ‚ü® D' , ‚ü® E' , _ ‚ü© ‚ü©)
  G (v , V ‚Ü¶ w) (v , V' ‚Ü¶ w') ‚ü® fvs‚äÜ , u‚àà ‚ü© ‚ü® fvs'‚äÜ , v‚àà ‚ü©
     = E~ (V ‚Ü¶ w) (v ‚à∑ V' ‚Ü¶ w') u‚àà v‚àà

ùíú-consis : ‚àÄ n ‚Üí consistent _~_ (‚ñ† ‚à∑ replicate n ‚ñ†) ‚ñ† (ùíú n)
ùíú-consis n ‚ü® F , Ds ‚ü© ‚ü® F' , Ds' ‚ü© ‚ü® F~ , Ds~ ‚ü© = 
  Dfold-pres (Every _~_) ‚ñ† ‚ñ† n ùíú-cons ùíú-cons F F' ùíú-cons-consis F~ Ds Ds' Ds~
-}


{- Continuity -----------------------------------------------------------------}

{- Bear in mind that Continuity is a property related to environments.
   That is, it involves some  evaluation function  
   
   continuity is the property that whenever a value is in a Dation,
   then there exists a finite environment for which that value is still in the denotation.
   -}






{-

-}

{- More Equations ----------------------------------------------------------}

{-

-}


{- 



{- Basic Properties of Dational Operators ---------------------------------}

k‚àà‚Ñòk : ‚àÄ{B}{k} ‚Üí const {B} k ‚àà ‚Ñò (base B) k
k‚àà‚Ñòk {B}{k}
    with base-eq? B B
... | yes refl = refl
... | no neq = neq refl

k‚Ä≤‚àà‚Ñòk‚áíP‚â°B : ‚àÄ{P B}{k}{k‚Ä≤} ‚Üí const {B} k‚Ä≤ ‚àà ‚Ñò P k ‚Üí P ‚â° base B
k‚Ä≤‚àà‚Ñòk‚áíP‚â°B {base B‚Ä≤} {B} {k} {k‚Ä≤} k‚Ä≤‚àà‚Ñòk
    with base-eq? B‚Ä≤ B
... | yes refl = refl
... | no neq = ‚ä•-elim k‚Ä≤‚àà‚Ñòk

k‚Ä≤‚àà‚Ñòk‚áík‚Ä≤‚â°k : ‚àÄ{B}{k}{k‚Ä≤} ‚Üí const {B} k‚Ä≤ ‚àà ‚Ñò (base B) k ‚Üí k‚Ä≤ ‚â° k
k‚Ä≤‚àà‚Ñòk‚áík‚Ä≤‚â°k {B}{k}{k‚Ä≤} m
    with base-eq? B B
... | yes refl = sym m
... | no neq = ‚ä•-elim m

v‚àà‚Ñ¨k‚áív‚â°k : ‚àÄ{v}{B}{k} ‚Üí v ‚àà ‚Ñ¨ B k ‚Üí v ‚â° const {B} k
v‚àà‚Ñ¨k‚áív‚â°k {const {B‚Ä≤} k‚Ä≤} {B} {k} v‚àà
    with base-eq? B B‚Ä≤
... | yes refl rewrite v‚àà = refl
... | no neq = ‚ä•-elim v‚àà

v‚àà‚Ñòk‚áív‚â°k : ‚àÄ{v}{B}{k} ‚Üí v ‚àà ‚Ñò (base B) k ‚Üí v ‚â° const {B} k
v‚àà‚Ñòk‚áív‚â°k {const {B‚Ä≤} k‚Ä≤} {B} {k} v‚àà = v‚àà‚Ñ¨k‚áív‚â°k v‚àà 

v‚ààùíØ‚áív‚â°‚à•vs‚à• : ‚àÄ{n}{Ds}{v}
  ‚Üí v ‚àà ùíØ n Ds
  ‚Üí Œ£[ vs ‚àà List Value ] v ‚â° ‚à• vs ‚à•
v‚ààùíØ‚áív‚â°‚à•vs‚à• {zero} {Ds} {‚à• x ‚à•} v‚àà = ‚ü® x , refl ‚ü©
v‚ààùíØ‚áív‚â°‚à•vs‚à• {suc n} {Ds} {‚à• x ‚à•} v‚àà = ‚ü® x , refl ‚ü©

NE-Œ†‚áíùíØ : ‚àÄ{n}{Ds : Œ† n (ùí´ Value)}
   ‚Üí NE-Œ† Ds
   ‚Üí Œ£[ vs ‚àà List Value ] ùíØ n Ds ‚à• vs ‚à•
NE-Œ†‚áíùíØ {zero} {ptt} NE-Ds = ‚ü® [] , tt ‚ü©
NE-Œ†‚áíùíØ {suc n} {‚ü® D , Ds ‚ü©} ‚ü® ‚ü® v , v‚ààD ‚ü© , NE-Ds ‚ü©
    with NE-Œ†‚áíùíØ {n} {Ds} NE-Ds
... | ‚ü® vs , vs‚äÜ ‚ü© = ‚ü® v ‚à∑ vs , ‚ü® v‚ààD , vs‚äÜ ‚ü© ‚ü©

NE-Œ†‚áíNE-ùíØ : ‚àÄ{n}{Ds : Œ† n (ùí´ Value)}
   ‚Üí NE-Œ† Ds
   ‚Üí nonempty (ùíØ n Ds)
NE-Œ†‚áíNE-ùíØ{n}{Ds} NE-Ds
    with NE-Œ†‚áíùíØ NE-Ds
... | ‚ü® vs , vs‚ààùíØDs ‚ü© = ‚ü® ‚à• vs ‚à• , vs‚ààùíØDs ‚ü©



{- Abstraction followed by Application is the identity ------------------------}

continuous : (F : ùí´ Value ‚Üí ùí´ Value) ‚Üí Set‚ÇÅ
continuous F = ‚àÄ X E ‚Üí mem E ‚äÜ F X ‚Üí nonempty X
    ‚Üí Œ£[ D ‚àà List Value ] mem D ‚äÜ X  √ó  mem E ‚äÜ F (mem D)  √ó  D ‚â¢ []

monotone : (F : ùí´ Value ‚Üí ùí´ Value) ‚Üí Set‚ÇÅ
monotone F = ‚àÄ D‚ÇÅ D‚ÇÇ ‚Üí D‚ÇÅ ‚äÜ D‚ÇÇ ‚Üí F D‚ÇÅ ‚äÜ F D‚ÇÇ

Œõ-‚ñ™-id : ‚àÄ {F : ùí´ Value ‚Üí ùí´ Value}{X : ùí´ Value}
  ‚Üí continuous F ‚Üí monotone F ‚Üí nonempty X
  ‚Üí (Œõ F) ‚ñ™ X ‚âÉ F X
Œõ-‚ñ™-id {F}{X} Fcont Fmono NE-X = ‚ü® (Œõ-‚ñ™-‚äÜ Fmono) , (‚äÜ-Œõ-‚ñ™ Fcont NE-X) ‚ü©
  where
  Œõ-‚ñ™-‚äÜ : ‚àÄ {F : ùí´ Value ‚Üí ùí´ Value}{X : ùí´ Value}
    ‚Üí monotone F  ‚Üí  (Œõ F) ‚ñ™ X ‚äÜ F X
  Œõ-‚ñ™-‚äÜ {F} {X} Fmono w ‚ü® V , ‚ü® fvs , ‚ü® ‚ü® w‚ààFV , _ ‚ü© , ‚ü® V<X , V‚â¢[] ‚ü© ‚ü© ‚ü© ‚ü© =
      Fmono (mem (v ‚à∑ V)) X V<X w w‚ààFV

  ‚äÜ-Œõ-‚ñ™ : ‚àÄ {F : ùí´ Value ‚Üí ùí´ Value}{X : ùí´ Value}
    ‚Üí continuous F  ‚Üí nonempty X ‚Üí  F X ‚äÜ (Œõ F) ‚ñ™ X
  ‚äÜ-Œõ-‚ñ™ {F}{X} Fcont NE-X w w‚ààFX 
      with Fcont X (w ‚à∑ []) (Œª { d (here refl) ‚Üí w‚ààFX }) NE-X
  ... | ‚ü® D , ‚ü® D<X , ‚ü® w‚ààFD , NE-D ‚ü© ‚ü© ‚ü© = {!!}
  {-
        ‚ü® D , ‚ü® [] , ‚ü® ‚ü® w‚ààFD w (here refl) , NE-D ‚ü© , ‚ü® D<X , NE-D ‚ü© ‚ü© ‚ü© ‚ü©
  -}
  
{- Primitive Abstraction followed by Application is the identity --------------}

‚Ñò-‚ñ™-‚âÉ : ‚àÄ{B}{P}{f}{k}  ‚Üí  (‚Ñò (B ‚áí P) f) ‚ñ™ (‚Ñò (base B) k) ‚âÉ ‚Ñò P (f k)
‚Ñò-‚ñ™-‚âÉ {B}{P}{f}{k} = ‚ü® fwd , back ‚ü©
  where
  fwd : ‚Ñò (B ‚áí P) f ‚ñ™ ‚Ñò (base B) k ‚äÜ ‚Ñò P (f k)
  fwd w ‚ü® V , ‚ü® fvs , ‚ü® ‚ü® k‚Ä≤ , ‚ü® refl , w‚ààfk‚Ä≤ ‚ü© ‚ü© , ‚ü® k‚Ä≤‚ààpk , _ ‚ü© ‚ü© ‚ü© ‚ü©
      with k‚Ä≤‚ààpk (const k‚Ä≤) (here refl)
  ... | pkk‚Ä≤ rewrite k‚Ä≤‚àà‚Ñòk‚áík‚Ä≤‚â°k pkk‚Ä≤ = w‚ààfk‚Ä≤
  back : ‚Ñò P (f k) ‚äÜ ‚Ñò (B ‚áí P) f ‚ñ™ ‚Ñò (base B) k
  back w w‚ààfk = ‚ü® (const k ‚à∑ []) , ‚ü® [] , ‚ü® ‚ü® k , ‚ü® refl , w‚ààfk ‚ü© ‚ü© ,
                ‚ü® (Œª {d (here refl) ‚Üí k‚àà‚Ñòk}) , (Œª ()) ‚ü© ‚ü© ‚ü© ‚ü©

{- Cons is a Congruence  ------------------------------------------------------}



Œ†-append-‚äÜ : ‚àÄ{n}{m}{Ds Ds‚Ä≤ : Œ† n (ùí´ Value)}{Es Es‚Ä≤ : Œ† m (ùí´ Value)}
   ‚Üí Ds ‚´É Ds‚Ä≤ ‚Üí Es ‚´É Es‚Ä≤
   ‚Üí Œ†-append Ds Es ‚´É Œ†-append Ds‚Ä≤ Es‚Ä≤
Œ†-append-‚äÜ {zero} {m} {Ds} {Ds‚Ä≤} {Es} {Es‚Ä≤} Ds‚äÜDs‚Ä≤ Es‚äÜEs‚Ä≤ = Es‚äÜEs‚Ä≤
Œ†-append-‚äÜ {suc n} {m} {‚ü® D , Ds ‚ü©} {‚ü® D‚Ä≤ , Ds‚Ä≤ ‚ü©} {Es} {Es‚Ä≤} ‚ü® D‚äÜD‚Ä≤ , Ds‚äÜDs‚Ä≤ ‚ü©
    Es‚äÜEs‚Ä≤ = ‚ü® D‚äÜD‚Ä≤ , Œ†-append-‚äÜ Ds‚äÜDs‚Ä≤ Es‚äÜEs‚Ä≤ ‚ü©

Œ†-append-‚©≠ : ‚àÄ{n}{m}{Ds Ds‚Ä≤ : Œ† n (ùí´ Value)}{Es Es‚Ä≤ : Œ† m (ùí´ Value)}
   ‚Üí Ds ‚©≠ Ds‚Ä≤ ‚Üí Es ‚©≠ Es‚Ä≤
   ‚Üí Œ†-append Ds Es ‚©≠ Œ†-append Ds‚Ä≤ Es‚Ä≤
Œ†-append-‚©≠ {zero} {m} {Ds} {Ds‚Ä≤} Ds=Ds‚Ä≤ Es=Es‚Ä≤ = Es=Es‚Ä≤
Œ†-append-‚©≠ {suc n} {m} {‚ü® D , Ds ‚ü©} {‚ü® D‚Ä≤ , Ds‚Ä≤ ‚ü©} ‚ü® D=D‚Ä≤ , Ds=Ds‚Ä≤ ‚ü© Es=Es‚Ä≤ =
    ‚ü® D=D‚Ä≤ , Œ†-append-‚©≠ Ds=Ds‚Ä≤ Es=Es‚Ä≤ ‚ü©

{- Cons and Car  --------------------------------------------------------------}

car-of-cons-‚äÜ : ‚àÄ{D‚ÇÅ D‚ÇÇ : ùí´ Value}
  ‚Üí car („Äò D‚ÇÅ , D‚ÇÇ „Äô) ‚äÜ D‚ÇÅ
car-of-cons-‚äÜ {D‚ÇÅ} {D‚ÇÇ} u ‚ü® v , ‚ü® u‚ààD‚ÇÅ , v‚ààD‚ÇÇ ‚ü© ‚ü© = u‚ààD‚ÇÅ

car-of-cons : ‚àÄ{D‚ÇÅ D‚ÇÇ : ùí´ Value}
  ‚Üí nonempty D‚ÇÇ
  ‚Üí car („Äò D‚ÇÅ , D‚ÇÇ „Äô) ‚âÉ D‚ÇÅ
car-of-cons {D‚ÇÅ}{D‚ÇÇ} ‚ü® v , v‚ààD‚ÇÇ ‚ü© =
    ‚ü® car-of-cons-‚äÜ , (Œª u u‚ààD‚ÇÅ ‚Üí ‚ü® v , ‚ü® u‚ààD‚ÇÅ , v‚ààD‚ÇÇ ‚ü© ‚ü©) ‚ü©

cdr-of-cons-‚äÜ : ‚àÄ{D‚ÇÅ D‚ÇÇ : ùí´ Value}
  ‚Üí cdr „Äò D‚ÇÅ , D‚ÇÇ „Äô ‚äÜ D‚ÇÇ
cdr-of-cons-‚äÜ {D‚ÇÅ} {D‚ÇÇ} v ‚ü® u , ‚ü® u‚ààD‚ÇÅ , v‚ààD‚ÇÇ ‚ü© ‚ü© = v‚ààD‚ÇÇ

cdr-of-cons : ‚àÄ{D‚ÇÅ D‚ÇÇ : ùí´ Value}
  ‚Üí nonempty D‚ÇÅ
  ‚Üí cdr „Äò D‚ÇÅ , D‚ÇÇ „Äô ‚âÉ D‚ÇÇ
cdr-of-cons {D‚ÇÅ}{D‚ÇÇ} ‚ü® u , u‚ààD‚ÇÅ ‚ü© =
    ‚ü® cdr-of-cons-‚äÜ , (Œª v v‚ààD‚ÇÇ ‚Üí ‚ü® u , ‚ü® u‚ààD‚ÇÅ , v‚ààD‚ÇÇ ‚ü© ‚ü©) ‚ü©

{- Project from a Tuple -------------------------------------------------------}

ùíØ-nth-0 : ‚àÄ{n}{D}{Ds}
   ‚Üí NE-Œ† Ds
   ‚Üí proj (ùíØ (suc n) ‚ü® D , Ds ‚ü©) 0 ‚âÉ D
ùíØ-nth-0 {n}{D}{Ds} NE-Ds = ‚ü® G , H ‚ü©
  where
  G : proj (ùíØ (suc n) ‚ü® D , Ds ‚ü©) 0 ‚äÜ D
  G .v ‚ü® v ‚à∑ vs , ‚ü® lt , ‚ü® ‚ü® v‚ààD , ‚à•vs‚à•‚ààùíØDs ‚ü© , refl ‚ü© ‚ü© ‚ü© = v‚ààD

  H : D ‚äÜ proj (ùíØ (suc n) ‚ü® D , Ds ‚ü©) 0
  H v v‚ààD
      with NE-Œ†‚áíùíØ NE-Ds
  ... | ‚ü® vs , vs‚äÜ ‚ü© = ‚ü® (v ‚à∑ vs) , ‚ü® s‚â§s z‚â§n , ‚ü® ‚ü® v‚ààD , vs‚äÜ ‚ü© , refl ‚ü© ‚ü© ‚ü©

ùíØ-nth-suc : ‚àÄ{i}{n}{D}{Ds}
   ‚Üí nonempty D ‚Üí NE-Œ† Ds
   ‚Üí proj (ùíØ (suc n) ‚ü® D , Ds ‚ü©) (suc i)
   ‚âÉ proj (ùíØ n Ds) i
ùíØ-nth-suc {i}{n}{D}{Ds} ‚ü® u , u‚ààD ‚ü© NE-Ds = ‚ü® G , H ‚ü©
  where
  G : proj (ùíØ (suc n) ‚ü® D , Ds ‚ü©) (suc i) ‚äÜ proj (ùíØ n Ds) i
  G u ‚ü® v ‚à∑ vs , ‚ü® s‚â§s lt , ‚ü® ‚ü® v‚ààD , ‚à•vs‚à•‚ààùíØDs ‚ü© , refl ‚ü© ‚ü© ‚ü© =
      ‚ü® vs , ‚ü® lt , ‚ü® ‚à•vs‚à•‚ààùíØDs , refl ‚ü© ‚ü© ‚ü©
  H : proj (ùíØ n Ds) i ‚äÜ proj (ùíØ (suc n) ‚ü® D , Ds ‚ü©) (suc i)
  H v ‚ü® vs , ‚ü® lt , ‚ü® vs‚äÜDs , eq ‚ü© ‚ü© ‚ü© =
    ‚ü® (u ‚à∑ vs) , ‚ü® s‚â§s lt , ‚ü® ‚ü® u‚ààD , vs‚äÜDs ‚ü© , eq ‚ü© ‚ü© ‚ü©

{- Case, Left, and Right ------------------------------------------------------}



‚Ñí-ùíû : ‚àÄ{D : ùí´ Value}{F G : ùí´ Value ‚Üí ùí´ Value}
   ‚Üí continuous F ‚Üí monotone F ‚Üí nonempty D
   ‚Üí ùíû (‚Ñí D) (Œõ F) (Œõ G) ‚âÉ F D
‚Ñí-ùíû {D}{F}{G} Fcont Fmono NE-D = ‚ü® fwd , back ‚ü©
  where
  fwd : ùíû (‚Ñí D) (Œõ F) (Œõ G) ‚äÜ F D
  fwd v (inj‚ÇÅ ‚ü® V , ‚ü® fvs , ‚ü® ‚ü® _ , V‚äÜD ‚ü© , ‚ü® v‚ààF[V] , V‚â¢[] ‚ü© ‚ü© ‚ü© ‚ü©) =
      Fmono (mem (v ‚à∑ V)) D V‚äÜD v v‚ààF[V]

  back : F D ‚äÜ ùíû (‚Ñí D) (Œõ F) (Œõ G)
  back v v‚ààF[D]
      with Fcont D (v ‚à∑ []) (Œª{d (here refl) ‚Üí v‚ààF[D]}) NE-D
  ... | ‚ü® E , ‚ü® E‚äÜD , ‚ü® v‚ààFE , NE-E ‚ü© ‚ü© ‚ü© = {!!}
  {-
      inj‚ÇÅ ‚ü® E , ‚ü® [] , ‚ü® ‚ü® NE-E , E‚äÜD ‚ü© , ‚ü® v‚ààFE v (here refl) , NE-E ‚ü© ‚ü© ‚ü© ‚ü©
-}

‚Ñõ-ùíû : ‚àÄ{D : ùí´ Value}{F G : ùí´ Value ‚Üí ùí´ Value}
   ‚Üí continuous G ‚Üí monotone G ‚Üí nonempty D
   ‚Üí ùíû (‚Ñõ D) (Œõ F) (Œõ G) ‚âÉ G D
‚Ñõ-ùíû {D}{F}{G} Gcont Gmono NE-D = ‚ü® fwd , back ‚ü©
  where
  fwd : ùíû (‚Ñõ D) (Œõ F) (Œõ G) ‚äÜ G D
  fwd v (inj‚ÇÇ ‚ü® V , ‚ü® fvs , ‚ü® ‚ü® _ , V‚äÜD ‚ü© , ‚ü® v‚ààG[V] , V‚â¢[] ‚ü© ‚ü© ‚ü© ‚ü©) =
      Gmono (mem (v ‚à∑ V)) D V‚äÜD v v‚ààG[V]

  back : G D ‚äÜ ùíû (‚Ñõ D) (Œõ F) (Œõ G)
  back v v‚ààG[D]
      with Gcont D (v ‚à∑ []) (Œª{d (here refl) ‚Üí v‚ààG[D]}) NE-D
  ... | ‚ü® E , ‚ü® E‚äÜD , ‚ü® v‚ààGE , NE-E ‚ü© ‚ü© ‚ü© = {!!}
  {-
      inj‚ÇÇ ‚ü® E , ‚ü® [] , ‚ü® ‚ü® NE-E , E‚äÜD ‚ü© , ‚ü® v‚ààGE v (here refl) , NE-E ‚ü© ‚ü© ‚ü© ‚ü©
  -}














{- Environments ---------------------------------------------------------------}

Env : Set‚ÇÅ
Env = Var ‚Üí ùí´ Value

nonempty-env : Env ‚Üí Set
nonempty-env œÅ = ‚àÄ x ‚Üí nonempty (œÅ x)

infix 5 _‚äÜ‚Çë_
_‚äÜ‚Çë_ : Env ‚Üí Env ‚Üí Set
œÅ‚ÇÅ ‚äÜ‚Çë œÅ‚ÇÇ = ‚àÄ x ‚Üí œÅ‚ÇÅ x ‚äÜ œÅ‚ÇÇ x

‚äÜ‚Çë-trans : ‚àÄ{œÅ‚ÇÅ œÅ‚ÇÇ œÅ‚ÇÉ} ‚Üí œÅ‚ÇÅ ‚äÜ‚Çë œÅ‚ÇÇ ‚Üí œÅ‚ÇÇ ‚äÜ‚Çë œÅ‚ÇÉ ‚Üí œÅ‚ÇÅ ‚äÜ‚Çë œÅ‚ÇÉ
‚äÜ‚Çë-trans {œÅ‚ÇÅ}{œÅ‚ÇÇ}{œÅ‚ÇÉ} r12 r23 x = Œª d z ‚Üí r23 x d (r12 x d z)

extend-nonempty-env : ‚àÄ{œÅ}{X}
   ‚Üí nonempty-env œÅ  ‚Üí  nonempty X  ‚Üí  nonempty-env (X ‚Ä¢ œÅ)
extend-nonempty-env {œÅ} {X} NE-œÅ NE-X zero = NE-X
extend-nonempty-env {œÅ} {X} NE-œÅ V‚â¢[] (suc x) = NE-œÅ x

env-ext : ‚àÄ{œÅ œÅ‚Ä≤}{X} ‚Üí œÅ ‚äÜ‚Çë œÅ‚Ä≤ ‚Üí (x : Var) ‚Üí (X ‚Ä¢ œÅ) x ‚äÜ (X ‚Ä¢ œÅ‚Ä≤) x
env-ext œÅ<œÅ‚Ä≤ zero d d‚àà = d‚àà
env-ext œÅ<œÅ‚Ä≤ (suc x) = œÅ<œÅ‚Ä≤ x

{- environments whose codomain are finite nonempty sets -}
finite-env : Env ‚Üí Set
finite-env œÅ = ‚àÄ x ‚Üí Œ£[ E ‚àà List Value ] œÅ x ‚âÉ mem E √ó E ‚â¢ []

infix 6 _‚äî‚Çë_
_‚äî‚Çë_ : Env ‚Üí Env ‚Üí Env
(œÅ‚ÇÅ ‚äî‚Çë œÅ‚ÇÇ) x v = œÅ‚ÇÅ x v ‚äé œÅ‚ÇÇ x v

join-finite-env : ‚àÄ{œÅ‚ÇÅ œÅ‚ÇÇ}  ‚Üí finite-env œÅ‚ÇÅ  ‚Üí  finite-env œÅ‚ÇÇ
   ‚Üí finite-env (œÅ‚ÇÅ ‚äî‚Çë œÅ‚ÇÇ)
join-finite-env {œÅ‚ÇÅ}{œÅ‚ÇÇ} f1 f2 x
    with f1 x
... | ‚ü® E1 , ‚ü® œÅ‚ÇÅ=E1 , NE-E1 ‚ü© ‚ü©
    with f2 x
... | ‚ü® E2 , ‚ü® œÅ‚ÇÇ=E2 , NE-E2 ‚ü© ‚ü© =
    ‚ü® (E1 ++ E2) , ‚ü® ‚ü® G , (H {E1} Œª d z ‚Üí z) ‚ü© ,
      (Œª E12=[] ‚Üí NE-E1 (++-conicalÀ° E1 E2 E12=[])) ‚ü© ‚ü©
    where
    G : (v : Value) ‚Üí œÅ‚ÇÅ x v ‚äé œÅ‚ÇÇ x v ‚Üí mem (E1 ++ E2) v
    G v (inj‚ÇÅ œÅ1x) = ‚àà-++‚Å∫À° ((proj‚ÇÅ œÅ‚ÇÅ=E1) v œÅ1x)
    G v (inj‚ÇÇ œÅ2x) = ‚àà-++‚Å∫ ≥ E1 ((proj‚ÇÅ œÅ‚ÇÇ=E2) v œÅ2x)

    H : ‚àÄ{E} ‚Üí mem E ‚äÜ mem E1 ‚Üí mem (E ++ E2) ‚äÜ (Œª v ‚Üí œÅ‚ÇÅ x v ‚äé œÅ‚ÇÇ x v)
    H {[]} E<E1 v v‚ààE++E2 = inj‚ÇÇ ((proj‚ÇÇ œÅ‚ÇÇ=E2) v v‚ààE++E2)
    H {x ‚à∑ E} E<E1 .x (here refl) = inj‚ÇÅ ((proj‚ÇÇ œÅ‚ÇÅ=E1) x (E<E1 x (here refl)))
    H {x ‚à∑ E} E<E1 v (there v‚ààE++E2) =
       H (Œª v z ‚Üí E<E1 v (there z)) v v‚ààE++E2

join-lub : ‚àÄ{œÅ œÅ‚ÇÅ œÅ‚ÇÇ} ‚Üí œÅ‚ÇÅ ‚äÜ‚Çë œÅ ‚Üí œÅ‚ÇÇ ‚äÜ‚Çë œÅ ‚Üí œÅ‚ÇÅ ‚äî‚Çë œÅ‚ÇÇ ‚äÜ‚Çë œÅ
join-lub {œÅ} {œÅ‚ÇÅ} {œÅ‚ÇÇ} œÅ‚ÇÅ‚äÜœÅ œÅ‚ÇÇ‚äÜœÅ x v (inj‚ÇÅ v‚ààœÅ‚ÇÅx) = œÅ‚ÇÅ‚äÜœÅ x v v‚ààœÅ‚ÇÅx
join-lub {œÅ} {œÅ‚ÇÅ} {œÅ‚ÇÇ} œÅ‚ÇÅ‚äÜœÅ œÅ‚ÇÇ‚äÜœÅ x v (inj‚ÇÇ v‚ààœÅ‚ÇÇx) = œÅ‚ÇÇ‚äÜœÅ x v v‚ààœÅ‚ÇÇx

join-‚äÜ-left : ‚àÄ{œÅ‚ÇÅ œÅ‚ÇÇ} ‚Üí œÅ‚ÇÅ ‚äÜ‚Çë œÅ‚ÇÅ ‚äî‚Çë œÅ‚ÇÇ
join-‚äÜ-left {œÅ‚ÇÅ}{œÅ‚ÇÇ} = Œª x d z ‚Üí inj‚ÇÅ z

join-‚äÜ-right : ‚àÄ{œÅ‚ÇÅ œÅ‚ÇÇ} ‚Üí œÅ‚ÇÇ ‚äÜ‚Çë œÅ‚ÇÅ ‚äî‚Çë œÅ‚ÇÇ
join-‚äÜ-right {œÅ‚ÇÅ}{œÅ‚ÇÇ} = Œª x d z ‚Üí inj‚ÇÇ z

monotone-env : (Env ‚Üí ùí´ Value) ‚Üí Set‚ÇÅ
monotone-env D = ‚àÄ {œÅ œÅ‚Ä≤} ‚Üí (‚àÄ x ‚Üí œÅ x ‚äÜ œÅ‚Ä≤ x)  ‚Üí  D œÅ ‚äÜ D œÅ‚Ä≤

{- Relations on Results and Products ------------------------------------------}

rel-results : ‚àÄ{‚Ñì}{T : Set ‚Ñì}
   ‚Üí (‚àÄ b ‚Üí Result T b ‚Üí Result T b ‚Üí Set‚ÇÅ)
   ‚Üí ‚àÄ bs ‚Üí Tuple bs (Result T) ‚Üí Tuple bs (Result T) ‚Üí Set‚ÇÅ
rel-results R [] xs ys = Lift (lsuc lzero) True
rel-results R (b ‚à∑ bs) ‚ü® x , xs ‚ü© ‚ü® y , ys ‚ü© =
    (R b x y) √ó (rel-results R bs xs ys)

‚äÜ-result : ‚àÄ b ‚Üí Result (ùí´ Value) b ‚Üí Result (ùí´ Value) b ‚Üí Set‚ÇÅ
‚äÜ-result ‚ñ† x y = Lift (lsuc lzero) (x ‚äÜ y)
‚äÜ-result ŒΩ b) f g = ‚àÄ X ‚Üí ‚äÜ-result b (f X) (g X)
‚äÜ-result (‚àÅ b) x y = ‚äÜ-result b x y

‚äÜ-results = rel-results ‚äÜ-result

‚äÜ-result‚áí‚äÜ : ‚àÄ D E ‚Üí ‚äÜ-result ‚ñ† D E ‚Üí D ‚äÜ E
‚äÜ-result‚áí‚äÜ D E (lift D‚äÜE) = D‚äÜE

rel-results‚áírel-Œ† : ‚àÄ{n}{xs ys : Œ† n (ùí´ Value)}
    {R : ‚àÄ b ‚Üí Result (ùí´ Value) b ‚Üí Result (ùí´ Value) b ‚Üí Set‚ÇÅ}
    {R‚Ä≤ : ùí´ Value ‚Üí ùí´ Value ‚Üí Set}
  ‚Üí (‚àÄ x y ‚Üí R ‚ñ† x y ‚Üí R‚Ä≤ x y)
  ‚Üí rel-results R (replicate n ‚ñ†) xs ys
  ‚Üí rel-Œ† R‚Ä≤ xs ys
rel-results‚áírel-Œ† {zero} R‚áíR‚Ä≤ (ptt) = tt
rel-results‚áírel-Œ† {suc n}{‚ü® x , xs ‚ü©}{‚ü® y , ys ‚ü©} R‚áíR‚Ä≤ ‚ü® Rxy , R[xs,ys] ‚ü© =
    ‚ü® R‚áíR‚Ä≤ x y Rxy , (rel-results‚áírel-Œ† R‚áíR‚Ä≤ R[xs,ys]) ‚ü©


{- Continuous -----------------------------------------------------------------}

continuous-‚àà : (Env ‚Üí ùí´ Value) ‚Üí Env ‚Üí Value ‚Üí Set‚ÇÅ
continuous-‚àà D œÅ v = v ‚àà D œÅ
   ‚Üí Œ£[ œÅ‚Ä≤ ‚àà Env ] finite-env œÅ‚Ä≤ √ó œÅ‚Ä≤ ‚äÜ‚Çë œÅ  √ó v ‚àà D œÅ‚Ä≤

continuous-env : (Env ‚Üí ùí´ Value) ‚Üí Env ‚Üí Set‚ÇÅ
continuous-env D œÅ = ‚àÄ v ‚Üí v ‚àà D œÅ
                     ‚Üí Œ£[ œÅ‚Ä≤ ‚àà Env ] finite-env œÅ‚Ä≤ √ó œÅ‚Ä≤ ‚äÜ‚Çë œÅ  √ó v ‚àà D œÅ‚Ä≤

{- creates an environment that maps each variable x to
   a singleton set of some element in œÅ x.  -}
initial-finite-env : (œÅ : Env) ‚Üí (NE-œÅ : nonempty-env œÅ) ‚Üí Env
initial-finite-env œÅ NE-œÅ x
    with NE-œÅ x
... | ‚ü® v , v‚ààœÅx ‚ü© = ‚åà v ‚åâ

initial-fin : (œÅ : Env) ‚Üí (NE-œÅ : nonempty-env œÅ)
   ‚Üí finite-env (initial-finite-env œÅ NE-œÅ)
initial-fin œÅ NE-œÅ x
    with NE-œÅ x
... | ‚ü® v , v‚ààœÅx ‚ü© =
      ‚ü® v ‚à∑ [] ,
      ‚ü® ‚ü® (Œª {w refl ‚Üí (here refl)}) , (Œª {w (here refl) ‚Üí refl}) ‚ü© , (Œª ()) ‚ü© ‚ü©

initial-fin-‚äÜ : (œÅ : Env) ‚Üí (NE-œÅ : nonempty-env œÅ)
  ‚Üí initial-finite-env œÅ NE-œÅ ‚äÜ‚Çë œÅ
initial-fin-‚äÜ œÅ NE-œÅ x v v‚ààinitial
    with NE-œÅ x
... | ‚ü® w , w‚ààœÅx ‚ü© rewrite v‚ààinitial = w‚ààœÅx

{- single-env maps x to D and any other variable y to something in œÅ y. -}
single-env : Var ‚Üí ùí´ Value ‚Üí (œÅ : Env) ‚Üí (NE-œÅ : nonempty-env œÅ) ‚Üí Env
single-env x D œÅ NE-œÅ y
    with x ‚âü y
... | yes refl = D
... | no neq
    with NE-œÅ y
... | ‚ü® v , v‚ààœÅy ‚ü© = ‚åà v ‚åâ    

single-fin : ‚àÄ{v}{x}{œÅ}{NE-œÅ} ‚Üí finite-env (single-env x ‚åà v ‚åâ œÅ NE-œÅ)
single-fin {v}{x}{œÅ}{NE-œÅ} y
    with x ‚âü y
... | yes refl =
    ‚ü® v ‚à∑ [] ,
    ‚ü® ‚ü® (Œª{v‚ÇÅ refl ‚Üí (here refl)}) , (Œª{v‚ÇÅ (here refl) ‚Üí refl}) ‚ü© , (Œª ()) ‚ü© ‚ü©
... | no neq
    with NE-œÅ y
... | ‚ü® w , w‚ààœÅy ‚ü© =
    ‚ü® w ‚à∑ [] ,
    ‚ü® ‚ü® (Œª{v‚ÇÅ refl ‚Üí here refl}) , (Œª{v‚ÇÅ (here refl) ‚Üí refl}) ‚ü© , (Œª ()) ‚ü© ‚ü©

single-‚äÜ : ‚àÄ{œÅ x v}{NE-œÅ : nonempty-env œÅ}
  ‚Üí  v ‚àà œÅ x  ‚Üí  single-env x ‚åà v ‚åâ œÅ NE-œÅ ‚äÜ‚Çë œÅ
single-‚äÜ {œÅ}{x}{v}{NE-œÅ} v‚ààœÅx y w sing 
    with x ‚âü y
... | yes refl rewrite sing = v‚ààœÅx
... | no neq
    with NE-œÅ y
... | ‚ü® u , u‚ààœÅy ‚ü© rewrite sing = u‚ààœÅy

v‚ààsingle[xv]x : ‚àÄ{v}{x}{œÅ}{NE-œÅ} ‚Üí v ‚àà single-env x ‚åà v ‚åâ œÅ NE-œÅ x
v‚ààsingle[xv]x {v}{x}
    with x ‚âü x
... | yes refl = refl
... | no neq = ‚ä•-elim (neq refl)

continuous-‚àà‚áí‚äÜ : ‚àÄ E œÅ (NE-œÅ : nonempty-env œÅ)
   ‚Üí monotone-env E
   ‚Üí ‚àÄ V ‚Üí mem V ‚äÜ E œÅ
   ‚Üí (‚àÄ v ‚Üí v ‚àà mem V ‚Üí continuous-‚àà E œÅ v)
   ‚Üí Œ£[ œÅ‚Ä≤ ‚àà Env ] finite-env œÅ‚Ä≤ √ó œÅ‚Ä≤ ‚äÜ‚Çë œÅ  √ó mem V ‚äÜ E œÅ‚Ä≤
continuous-‚àà‚áí‚äÜ E œÅ NE-œÅ mE [] V‚äÜE ‚àÄv‚ààV‚áícont =
   ‚ü® initial-finite-env œÅ NE-œÅ , ‚ü® initial-fin œÅ NE-œÅ ,
   ‚ü® initial-fin-‚äÜ œÅ NE-œÅ , (Œª d ()) ‚ü© ‚ü© ‚ü©
continuous-‚àà‚áí‚äÜ E œÅ NE-œÅ mE (v ‚à∑ V) v‚à∑V‚äÜEœÅ v‚ààV‚áícont
    with continuous-‚àà‚áí‚äÜ E œÅ NE-œÅ mE V (Œª d z ‚Üí v‚à∑V‚äÜEœÅ d (there z))
                (Œª w w‚ààV w‚ààMœÅ ‚Üí v‚ààV‚áícont w (there w‚ààV) w‚ààMœÅ)
... | ‚ü® œÅ‚ÇÅ , ‚ü® fœÅ‚ÇÅ , ‚ü® œÅ‚ÇÅ‚äÜœÅ , V‚äÜEœÅ‚ÇÅ ‚ü© ‚ü© ‚ü©
    with v‚ààV‚áícont v (here refl) (v‚à∑V‚äÜEœÅ v (here refl))
... | ‚ü® œÅ‚ÇÇ , ‚ü® fœÅ‚ÇÇ , ‚ü® œÅ‚ÇÇ‚äÜœÅ , v‚ààEœÅ‚ÇÇ ‚ü© ‚ü© ‚ü© =    
    ‚ü® œÅ‚ÇÉ , ‚ü® (join-finite-env fœÅ‚ÇÅ fœÅ‚ÇÇ) , ‚ü® (join-lub œÅ‚ÇÅ‚äÜœÅ œÅ‚ÇÇ‚äÜœÅ) ,
    G ‚ü© ‚ü© ‚ü©
    where
    œÅ‚ÇÉ = œÅ‚ÇÅ ‚äî‚Çë œÅ‚ÇÇ
    G : (d : Value) ‚Üí mem (v ‚à∑ V) d ‚Üí d ‚àà E œÅ‚ÇÉ
    G d (here refl) = mE {œÅ‚ÇÇ}{œÅ‚ÇÉ} join-‚äÜ-right v v‚ààEœÅ‚ÇÇ
    G d (there m) = mE {œÅ‚ÇÅ}{œÅ‚ÇÉ} join-‚äÜ-left d (V‚äÜEœÅ‚ÇÅ d m)

‚ñ™-continuous : ‚àÄ{D E : Env ‚Üí ùí´ Value}{œÅ}{NE-œÅ : nonempty-env œÅ}{w}
  ‚Üí w ‚àà (D œÅ) ‚ñ™ (E œÅ)
  ‚Üí continuous-env D œÅ ‚Üí continuous-env E œÅ
  ‚Üí monotone-env D ‚Üí monotone-env E
  ‚Üí Œ£[ œÅ‚ÇÉ ‚àà Env ] finite-env œÅ‚ÇÉ √ó œÅ‚ÇÉ ‚äÜ‚Çë œÅ √ó w ‚àà (D œÅ‚ÇÉ) ‚ñ™ (E œÅ‚ÇÉ)
‚ñ™-continuous {D}{E}{œÅ}{NE-œÅ}{w} ‚ü® V , ‚ü® fvs , ‚ü® V‚Ü¶w‚ààDœÅ , ‚ü® V‚äÜEœÅ , V‚â¢[] ‚ü© ‚ü© ‚ü© ‚ü©
    IH-D IH-E mD mE
    with IH-D (V ‚Ü¶ w) V‚Ü¶w‚ààDœÅ 
... | ‚ü® œÅ‚ÇÅ , ‚ü® fœÅ‚ÇÅ , ‚ü® œÅ‚ÇÅ‚äÜœÅ , V‚Ü¶w‚ààDœÅ‚ÇÅ ‚ü© ‚ü© ‚ü©
    with ((continuous-‚àà‚áí‚äÜ E œÅ NE-œÅ mE) V V‚äÜEœÅ (Œª v v‚ààV ‚Üí IH-E v))
... | ‚ü® œÅ‚ÇÇ , ‚ü® fœÅ‚ÇÇ , ‚ü® œÅ‚ÇÇ‚äÜœÅ , V‚äÜEœÅ‚ÇÇ ‚ü© ‚ü© ‚ü© =
   ‚ü® œÅ‚ÇÉ , ‚ü® join-finite-env fœÅ‚ÇÅ fœÅ‚ÇÇ , ‚ü® join-lub œÅ‚ÇÅ‚äÜœÅ œÅ‚ÇÇ‚äÜœÅ , w‚ààD‚ñ™EœÅ‚ÇÉ ‚ü© ‚ü© ‚ü© 
    where
    œÅ‚ÇÉ = œÅ‚ÇÅ ‚äî‚Çë œÅ‚ÇÇ
    œÅ‚ÇÅ‚äÜœÅ‚ÇÉ = Œª x v z ‚Üí inj‚ÇÅ z
    V‚Ü¶w‚ààDœÅ‚ÇÉ : (V ‚Ü¶ w ‚àà D œÅ‚ÇÉ
    V‚Ü¶w‚ààDœÅ‚ÇÉ = mD œÅ‚ÇÅ‚äÜœÅ‚ÇÉ (V ‚Ü¶ w) V‚Ü¶w‚ààDœÅ‚ÇÅ
    œÅ‚ÇÇ‚äÜœÅ‚ÇÑ = Œª x v z ‚Üí inj‚ÇÇ z
    V‚äÜEœÅ‚ÇÉ : mem V ‚äÜ E œÅ‚ÇÉ
    V‚äÜEœÅ‚ÇÉ v v‚ààV = mE œÅ‚ÇÇ‚äÜœÅ‚ÇÑ v (V‚äÜEœÅ‚ÇÇ v v‚ààV)
    w‚ààD‚ñ™EœÅ‚ÇÉ : w ‚àà (D œÅ‚ÇÉ) ‚ñ™ (E œÅ‚ÇÉ)
    w‚ààD‚ñ™EœÅ‚ÇÉ = ‚ü® V , ‚ü® fvs , ‚ü® V‚Ü¶w‚ààDœÅ‚ÇÉ , ‚ü® V‚äÜEœÅ‚ÇÉ , V‚â¢[] ‚ü© ‚ü© ‚ü© ‚ü©

Œõ-continuous : ‚àÄ{E : Env  ‚Üí ùí´ Value}{œÅ}{NE-œÅ}{v}
  ‚Üí v ‚àà Œõ (Œª D ‚Üí E (D ‚Ä¢ œÅ))
  ‚Üí (‚àÄ V ‚Üí V ‚â¢ [] ‚Üí continuous-env E (mem V ‚Ä¢ œÅ))
  ‚Üí monotone-env E
  ‚Üí Œ£[ œÅ‚Ä≤ ‚àà Env ] finite-env œÅ‚Ä≤ √ó œÅ‚Ä≤ ‚äÜ‚Çë œÅ √ó v ‚àà Œõ (Œª D ‚Üí E (D ‚Ä¢ œÅ‚Ä≤))
Œõ-continuous {E}{œÅ}{NE-œÅ(V ‚Ü¶ w} ‚ü® w‚ààEV‚Ä¢œÅ , ‚ü® V‚â¢[] , fvs‚â°[] ‚ü© ‚ü© IH mE
    with IH V V‚â¢[] w w‚ààEV‚Ä¢œÅ
... | ‚ü® œÅ‚Ä≤ , ‚ü® fœÅ‚Ä≤ , ‚ü® œÅ‚Ä≤‚äÜV‚Ä¢œÅ , w‚ààEœÅ‚Ä≤ ‚ü© ‚ü© ‚ü© =
    ‚ü® (Œª x ‚Üí œÅ‚Ä≤ (suc x)) , ‚ü® (Œª x ‚Üí fœÅ‚Ä≤ (suc x)) , ‚ü® (Œª x ‚Üí œÅ‚Ä≤‚äÜV‚Ä¢œÅ (suc x)) ,
    ‚ü® mE{œÅ‚Ä≤}{mem V ‚Ä¢ (Œª x ‚Üí œÅ‚Ä≤ (suc x))} G w w‚ààEœÅ‚Ä≤ , ‚ü® V‚â¢[] , {!!} ‚ü© ‚ü© ‚ü© ‚ü© ‚ü©
    where G : (x : Var) ‚Üí œÅ‚Ä≤ x ‚äÜ (mem V ‚Ä¢ (Œª x‚ÇÅ ‚Üí œÅ‚Ä≤ (suc x‚ÇÅ))) x
          G zero v v‚ààœÅ‚Ä≤x = œÅ‚Ä≤‚äÜV‚Ä¢œÅ 0 v v‚ààœÅ‚Ä≤x
          G (suc x) v v‚ààœÅ‚Ä≤x = v‚ààœÅ‚Ä≤x
Œõ-continuous {E}{œÅ}{NE-œÅ}{fv ‚à∑ FV ‚ä¢ŒΩ} v‚ààŒõ IH mE =
  ‚ü® initial-finite-env œÅ NE-œÅ , ‚ü® initial-fin œÅ NE-œÅ , ‚ü® initial-fin-‚äÜ œÅ NE-œÅ ,
      tt ‚ü© ‚ü© ‚ü©

cons-continuous : ‚àÄ{D E : Env ‚Üí ùí´ Value}{œÅ}{NE-œÅ : nonempty-env œÅ}{w : Value}
  ‚Üí w ‚àà „Äò D œÅ , E œÅ „Äô
  ‚Üí continuous-env D œÅ ‚Üí continuous-env E œÅ ‚Üí monotone-env D ‚Üí monotone-env E
  ‚Üí Œ£[ œÅ‚ÇÉ ‚àà Env ] finite-env œÅ‚ÇÉ √ó œÅ‚ÇÉ ‚äÜ‚Çë œÅ √ó w ‚àà „Äò D œÅ‚ÇÉ , E œÅ‚ÇÉ „Äô
cons-continuous {D} {E} {œÅ} {NE-œÅ} {‚¶Ö u , v ‚¶Ü} ‚ü® u‚ààDœÅ , v‚ààEœÅ ‚ü© cD cE mD mE
    with cD u u‚ààDœÅ 
... | ‚ü® œÅ‚ÇÅ , ‚ü® fœÅ‚ÇÅ , ‚ü® œÅ‚ÇÅ‚äÜœÅ , u‚ààDœÅ‚ÇÅ ‚ü© ‚ü© ‚ü©
    with cE v v‚ààEœÅ 
... | ‚ü® œÅ‚ÇÇ , ‚ü® fœÅ‚ÇÇ , ‚ü® œÅ‚ÇÇ‚äÜœÅ , v‚ààEœÅ‚ÇÇ ‚ü© ‚ü© ‚ü© =
    ‚ü® œÅ‚ÇÉ , ‚ü® join-finite-env fœÅ‚ÇÅ fœÅ‚ÇÇ , ‚ü® join-lub œÅ‚ÇÅ‚äÜœÅ œÅ‚ÇÇ‚äÜœÅ ,
    ‚ü® u‚ààDœÅ‚ÇÉ , v‚ààDœÅ‚ÇÉ ‚ü© ‚ü© ‚ü© ‚ü©
    where
    œÅ‚ÇÉ = œÅ‚ÇÅ ‚äî‚Çë œÅ‚ÇÇ
    œÅ‚ÇÅ‚äÜœÅ‚ÇÉ = Œª x v z ‚Üí inj‚ÇÅ z
    u‚ààDœÅ‚ÇÉ = mD œÅ‚ÇÅ‚äÜœÅ‚ÇÉ u u‚ààDœÅ‚ÇÅ
    œÅ‚ÇÇ‚äÜœÅ‚ÇÉ = Œª x v z ‚Üí inj‚ÇÇ z
    v‚ààDœÅ‚ÇÉ = mE œÅ‚ÇÇ‚äÜœÅ‚ÇÉ v v‚ààEœÅ‚ÇÇ

car-continuous : ‚àÄ{D : Env ‚Üí ùí´ Value}{œÅ}{NE-œÅ : nonempty-env œÅ}{u : Value}
  ‚Üí u ‚àà car (D œÅ) ‚Üí continuous-env D œÅ ‚Üí monotone-env D
  ‚Üí Œ£[ œÅ‚ÇÉ ‚àà Env ] finite-env œÅ‚ÇÉ √ó œÅ‚ÇÉ ‚äÜ‚Çë œÅ √ó u ‚àà car (D œÅ‚ÇÉ)
car-continuous {D} {œÅ} {NE-œÅ} {u} ‚ü® v , uv‚ààDœÅ ‚ü© cD mD
    with cD ‚¶Ö u , v ‚¶Ü uv‚ààDœÅ 
... | ‚ü® œÅ‚ÇÅ , ‚ü® fœÅ‚ÇÅ , ‚ü® œÅ‚ÇÅ‚äÜœÅ , uv‚ààDœÅ‚ÇÅ ‚ü© ‚ü© ‚ü© =
      ‚ü® œÅ‚ÇÅ , ‚ü® fœÅ‚ÇÅ , ‚ü® œÅ‚ÇÅ‚äÜœÅ , ‚ü® v , mD (Œª x d z ‚Üí z) ‚¶Ö u , v ‚¶Ü uv‚ààDœÅ‚ÇÅ ‚ü© ‚ü© ‚ü© ‚ü©

cdr-continuous : ‚àÄ{D : Env ‚Üí ùí´ Value}{œÅ}{NE-œÅ : nonempty-env œÅ}{u : Value}
  ‚Üí u ‚àà cdr (D œÅ) ‚Üí continuous-env D œÅ ‚Üí monotone-env D
  ‚Üí Œ£[ œÅ‚ÇÉ ‚àà Env ] finite-env œÅ‚ÇÉ √ó œÅ‚ÇÉ ‚äÜ‚Çë œÅ √ó u ‚àà cdr (D œÅ‚ÇÉ)
cdr-continuous {D} {œÅ} {NE-œÅ} {v} ‚ü® u , uv‚ààDœÅ ‚ü© cD mD
    with cD ‚¶Ö u , v ‚¶Ü uv‚ààDœÅ 
... | ‚ü® œÅ‚ÇÅ , ‚ü® fœÅ‚ÇÅ , ‚ü® œÅ‚ÇÅ‚äÜœÅ , uv‚ààDœÅ‚ÇÅ ‚ü© ‚ü© ‚ü© =
      ‚ü® œÅ‚ÇÅ , ‚ü® fœÅ‚ÇÅ , ‚ü® œÅ‚ÇÅ‚äÜœÅ , ‚ü® u , mD (Œª x d z ‚Üí z) ‚¶Ö u , v ‚¶Ü uv‚ààDœÅ‚ÇÅ ‚ü© ‚ü© ‚ü© ‚ü©

mono-envs : ‚àÄ{n} ‚Üí (Env ‚Üí Œ† n (ùí´ Value)) ‚Üí Set‚ÇÅ
mono-envs {n} Ds = ‚àÄ{œÅ œÅ‚Ä≤} ‚Üí œÅ ‚äÜ‚Çë œÅ‚Ä≤ ‚Üí ‚äÜ-results (replicate n ‚ñ†) (Ds œÅ) (Ds œÅ‚Ä≤)

continuous-envs : ‚àÄ{n} ‚Üí (Env ‚Üí Œ† n (ùí´ Value)) ‚Üí Env ‚Üí Set‚ÇÅ
continuous-envs {n} Ds œÅ = ‚àÄ v ‚Üí v ‚àà ùíØ n (Ds œÅ)
                     ‚Üí Œ£[ œÅ‚Ä≤ ‚àà Env ] finite-env œÅ‚Ä≤ √ó œÅ‚Ä≤ ‚äÜ‚Çë œÅ  √ó v ‚àà ùíØ n (Ds œÅ‚Ä≤)

next-Ds : ‚àÄ{n} ‚Üí (Env ‚Üí Œ† (suc n) (ùí´ Value)) ‚Üí (Env ‚Üí Œ† n (ùí´ Value))
next-Ds Ds œÅ
    with Ds œÅ
... | ‚ü® D , Ds‚Ä≤ ‚ü© = Ds‚Ä≤

next-Ds-proj‚ÇÇ : ‚àÄ{n}{Ds : Env ‚Üí Œ† (suc n) (ùí´ Value)}{œÅ}
   ‚Üí next-Ds Ds œÅ ‚â° proj‚ÇÇ (Ds œÅ)
next-Ds-proj‚ÇÇ {n} {Ds} {œÅ}
    with Ds œÅ
... | ‚ü® a , b ‚ü© = refl

next-mono-envs : ‚àÄ{n}{Ds : Env ‚Üí Œ† (suc n) (ùí´ Value)}
   ‚Üí mono-envs Ds ‚Üí mono-envs (next-Ds Ds)
next-mono-envs {zero} {Ds} mDs {œÅ} {œÅ‚Ä≤} _ = ptt
next-mono-envs {suc n} {Ds} mDs {œÅ} {œÅ‚Ä≤} œÅ‚äÜœÅ‚Ä≤
    with Ds œÅ | Ds œÅ‚Ä≤ | mDs {œÅ} {œÅ‚Ä≤} œÅ‚äÜœÅ‚Ä≤
... | ‚ü® DœÅ , DsœÅ ‚ü© | ‚ü® DœÅ‚Ä≤ , DsœÅ‚Ä≤ ‚ü© | ‚ü® _ , mDs‚Ä≤ ‚ü© = mDs‚Ä≤

proj‚ÇÅ-mono-envs : ‚àÄ{n}{Ds : Env ‚Üí Œ† (suc n) (ùí´ Value)}{œÅ}{œÅ‚Ä≤}
   ‚Üí œÅ ‚äÜ‚Çë œÅ‚Ä≤  ‚Üí mono-envs Ds ‚Üí proj‚ÇÅ (Ds œÅ) ‚äÜ proj‚ÇÅ (Ds œÅ‚Ä≤)
proj‚ÇÅ-mono-envs {n}{Ds}{œÅ}{œÅ‚Ä≤} œÅ‚äÜœÅ‚Ä≤ mDs
    with Ds œÅ | mDs {œÅ}{œÅ‚Ä≤} œÅ‚äÜœÅ‚Ä≤
... | ‚ü® DœÅ , DsœÅ ‚ü© | ‚ü® lift mD , _ ‚ü© = mD

next-NE-Ds : ‚àÄ{n}{Ds : Env ‚Üí Œ† (suc n) (ùí´ Value)}{œÅ}
  ‚Üí NE-Œ† (Ds œÅ)
  ‚Üí NE-Œ† (next-Ds Ds œÅ)
next-NE-Ds{n}{Ds}{œÅ} NE-Ds
    with Ds œÅ | NE-Ds
... | ‚ü® DœÅ , DsœÅ ‚ü© | ‚ü® NE-D , NE-Ds‚Ä≤ ‚ü© = NE-Ds‚Ä≤

next-cont-envs : ‚àÄ{n}{Ds : Env ‚Üí Œ† (suc n) (ùí´ Value)}
     {œÅ}{NE-œÅ : nonempty-env œÅ}{w}
   ‚Üí proj‚ÇÅ (Ds œÅ) w
   ‚Üí continuous-envs Ds œÅ
   ‚Üí continuous-envs (next-Ds Ds) œÅ
next-cont-envs {n} {Ds} {œÅ}{NE-œÅ}{w} w‚ààDsœÅ cDs u u‚àà
    with Ds œÅ | cDs | u‚àà 
... | ‚ü® D , Ds‚Ä≤ ‚ü© | cDDs | u‚àà‚Ä≤ 
    with v‚ààùíØ‚áív‚â°‚à•vs‚à• u‚àà‚Ä≤
... | ‚ü® vs , refl ‚ü©
    with cDDs ‚à• w ‚à∑ vs ‚à• ‚ü® w‚ààDsœÅ , u‚àà‚Ä≤ ‚ü©
... | ‚ü® œÅ‚Ä≤ , ‚ü® fœÅ‚Ä≤ , ‚ü® œÅ‚Ä≤‚äÜœÅ , ‚ü® aaa , vs‚ààDsœÅ‚Ä≤ ‚ü© ‚ü© ‚ü© ‚ü© =
    ‚ü® œÅ‚Ä≤ , ‚ü® fœÅ‚Ä≤ , ‚ü® œÅ‚Ä≤‚äÜœÅ , vs‚ààDsœÅ‚Ä≤ ‚ü© ‚ü© ‚ü©

ùíØ-continuous : ‚àÄ{n}{Ds : Env ‚Üí Œ† n (ùí´ Value)}{œÅ}{NE-œÅ : nonempty-env œÅ}
    {u : Value}
  ‚Üí u ‚àà ùíØ n (Ds œÅ) ‚Üí continuous-envs Ds œÅ ‚Üí mono-envs Ds
  ‚Üí Œ£[ œÅ‚ÇÉ ‚àà Env ] finite-env œÅ‚ÇÉ √ó œÅ‚ÇÉ ‚äÜ‚Çë œÅ √ó u ‚àà ùíØ n (Ds œÅ‚ÇÉ)
ùíØ-continuous {zero} {Ds} {œÅ} {NE-œÅ} {u} u‚ààùíØDs cDs mDs 
    with Ds (initial-finite-env œÅ NE-œÅ) | u
... | ptt | ‚à• [] ‚à• =
  ‚ü® (initial-finite-env œÅ NE-œÅ) , ‚ü® initial-fin œÅ NE-œÅ ,
  ‚ü® initial-fin-‚äÜ œÅ NE-œÅ , tt ‚ü© ‚ü© ‚ü©
ùíØ-continuous {suc n} {Ds} {œÅ} {NE-œÅ} {‚à• v ‚à∑ vs ‚à•} ‚ü® v‚ààDœÅ , vs‚ààùíØDsœÅ ‚ü© cDs mDs 
    with ùíØ-continuous{n}{next-Ds Ds}{œÅ}{NE-œÅ}{‚à• vs ‚à•}
       (subst (Œª X ‚Üí ‚à• vs ‚à• ‚àà ùíØ n X) (sym (next-Ds-proj‚ÇÇ{n}{Ds}{œÅ})) vs‚ààùíØDsœÅ)
       (next-cont-envs{NE-œÅ = NE-œÅ}{w = v} v‚ààDœÅ cDs)
       (Œª {œÅ}{œÅ‚Ä≤} ‚Üí next-mono-envs mDs {œÅ}{œÅ‚Ä≤})
... | ‚ü® œÅ‚ÇÅ , ‚ü® fœÅ‚ÇÅ , ‚ü® œÅ‚ÇÅ‚äÜœÅ , vs‚ààùíØDsœÅ‚ÇÅ ‚ü© ‚ü© ‚ü©
    with cDs ‚à• v ‚à∑ vs ‚à• ‚ü® v‚ààDœÅ , vs‚ààùíØDsœÅ ‚ü© 
... | ‚ü® œÅ‚ÇÇ , ‚ü® fœÅ‚ÇÇ , ‚ü® œÅ‚ÇÇ‚äÜœÅ , ‚ü® v‚ààDœÅ‚ÇÇ , vs‚ààDsœÅ‚ÇÇ ‚ü© ‚ü© ‚ü© ‚ü©
    with  mDs {œÅ‚ÇÅ}{œÅ‚ÇÅ ‚äî‚Çë œÅ‚ÇÇ} (Œª x d z ‚Üí inj‚ÇÅ z)
... | ‚ü® _ , DsœÅ‚ÇÅ‚äÜDsœÅ‚ÇÉ ‚ü© 
    with  mDs {œÅ‚ÇÇ}{œÅ‚ÇÅ ‚äî‚Çë œÅ‚ÇÇ} (Œª x d z ‚Üí inj‚ÇÇ z)
... | ‚ü® lift DœÅ‚ÇÇ‚äÜDœÅ‚ÇÉ , _ ‚ü© =
    let v‚ààDœÅ‚ÇÉ = DœÅ‚ÇÇ‚äÜDœÅ‚ÇÉ v v‚ààDœÅ‚ÇÇ in
    let vs‚ààDsœÅ‚ÇÉ = ùíØ-mono-‚äÜ (rel-results‚áírel-Œ† ‚äÜ-result‚áí‚äÜ DsœÅ‚ÇÅ‚äÜDsœÅ‚ÇÉ)
                            ‚à• vs ‚à• vs‚ààùíØDsœÅ‚ÇÅ in
    ‚ü® œÅ‚ÇÉ , ‚ü® (join-finite-env fœÅ‚ÇÅ fœÅ‚ÇÇ) , ‚ü® (join-lub œÅ‚ÇÅ‚äÜœÅ œÅ‚ÇÇ‚äÜœÅ) ,
    ‚ü® v‚ààDœÅ‚ÇÉ , vs‚ààDsœÅ‚ÇÉ ‚ü© ‚ü© ‚ü© ‚ü©
    where
    œÅ‚ÇÉ = œÅ‚ÇÅ ‚äî‚Çë œÅ‚ÇÇ

proj-continuous : ‚àÄ{D : Env ‚Üí ùí´ Value}{œÅ}{NE-œÅ : nonempty-env œÅ}{u : Value}{i}
  ‚Üí u ‚àà proj (D œÅ) i ‚Üí continuous-env D œÅ ‚Üí monotone-env D
  ‚Üí Œ£[ œÅ‚ÇÉ ‚àà Env ] finite-env œÅ‚ÇÉ √ó œÅ‚ÇÉ ‚äÜ‚Çë œÅ √ó u ‚àà proj (D œÅ‚ÇÉ) i
proj-continuous {D} {œÅ} {NE-œÅ} {u} {i} ‚ü® vs , ‚ü® lt , ‚ü® vs‚ààDœÅ , refl ‚ü© ‚ü© ‚ü© cD mD
    with cD ‚à• vs ‚à• vs‚ààDœÅ
... | ‚ü® œÅ‚Ä≤ , ‚ü® fœÅ‚Ä≤ , ‚ü® œÅ‚Ä≤‚äÜœÅ , vs‚ààDœÅ‚Ä≤ ‚ü© ‚ü© ‚ü© =     
    ‚ü® œÅ‚Ä≤ , ‚ü® fœÅ‚Ä≤ , ‚ü® œÅ‚Ä≤‚äÜœÅ ,
    ‚ü® vs , ‚ü® lt , ‚ü® mD (Œª x d z ‚Üí z) ‚à• vs ‚à• vs‚ààDœÅ‚Ä≤ , refl ‚ü© ‚ü© ‚ü© ‚ü© ‚ü© ‚ü©

‚Ñí-continuous : ‚àÄ{D : Env ‚Üí ùí´ Value}{œÅ}{NE-œÅ : nonempty-env œÅ}{u : Value}
  ‚Üí u ‚àà ‚Ñí (D œÅ)  ‚Üí  continuous-env D œÅ  ‚Üí  monotone-env D
  ‚Üí Œ£[ œÅ‚ÇÉ ‚àà Env ] finite-env œÅ‚ÇÉ √ó œÅ‚ÇÉ ‚äÜ‚Çë œÅ √ó u ‚àà ‚Ñí (D œÅ‚ÇÉ)
‚Ñí-continuous {D} {œÅ} {NE-œÅ} {left U} ‚ü® U‚â¢[] , U‚äÜDœÅ ‚ü© cD mD
    with continuous-‚àà‚áí‚äÜ D œÅ NE-œÅ mD U U‚äÜDœÅ (Œª v v‚ààDœÅ ‚Üí cD v)
... | ‚ü® œÅ‚ÇÅ , ‚ü® fœÅ‚ÇÅ , ‚ü® œÅ‚ÇÅ‚äÜœÅ , U‚äÜDœÅ‚ÇÅ ‚ü© ‚ü© ‚ü© =
    ‚ü® œÅ‚ÇÅ , ‚ü® fœÅ‚ÇÅ , ‚ü® œÅ‚ÇÅ‚äÜœÅ , ‚ü® U‚â¢[] , U‚äÜDœÅ‚ÇÅ ‚ü© ‚ü© ‚ü© ‚ü©

‚Ñõ-continuous : ‚àÄ{D : Env ‚Üí ùí´ Value}{œÅ}{NE-œÅ : nonempty-env œÅ}{u : Value}
  ‚Üí u ‚àà ‚Ñõ (D œÅ)  ‚Üí  continuous-env D œÅ  ‚Üí  monotone-env D
  ‚Üí Œ£[ œÅ‚ÇÉ ‚àà Env ] finite-env œÅ‚ÇÉ √ó œÅ‚ÇÉ ‚äÜ‚Çë œÅ √ó u ‚àà ‚Ñõ (D œÅ‚ÇÉ)
‚Ñõ-continuous {D} {œÅ} {NE-œÅ} {right U} ‚ü® U‚â¢[] , U‚äÜDœÅ ‚ü© cD mD
    with continuous-‚àà‚áí‚äÜ D œÅ NE-œÅ mD U U‚äÜDœÅ (Œª v v‚ààDœÅ ‚Üí cD v)
... | ‚ü® œÅ‚ÇÅ , ‚ü® fœÅ‚ÇÅ , ‚ü® œÅ‚ÇÅ‚äÜœÅ , U‚äÜDœÅ‚ÇÅ ‚ü© ‚ü© ‚ü© =
    ‚ü® œÅ‚ÇÅ , ‚ü® fœÅ‚ÇÅ , ‚ü® œÅ‚ÇÅ‚äÜœÅ , ‚ü® U‚â¢[] , U‚äÜDœÅ‚ÇÅ ‚ü© ‚ü© ‚ü© ‚ü©

ùíû-continuous : ‚àÄ{D E F : Env ‚Üí ùí´ Value}{œÅ : Env}{NE-œÅ : nonempty-env œÅ}{u}
  ‚Üí u ‚àà ùíû (D œÅ) (Œõ (Œª X ‚Üí E (X ‚Ä¢ œÅ))) (Œõ (Œª X ‚Üí F (X ‚Ä¢ œÅ)))
  ‚Üí continuous-env D œÅ ‚Üí monotone-env D
  ‚Üí (‚àÄ V ‚Üí V ‚â¢ [] ‚Üí continuous-env E (mem V ‚Ä¢ œÅ)) ‚Üí monotone-env E
  ‚Üí (‚àÄ V ‚Üí V ‚â¢ [] ‚Üí continuous-env F (mem V ‚Ä¢ œÅ)) ‚Üí monotone-env F
  ‚Üí Œ£[ œÅ‚Ä≤ ‚àà Env ] finite-env œÅ‚Ä≤ √ó œÅ‚Ä≤ ‚äÜ‚Çë œÅ
      √ó u ‚àà ùíû (D œÅ‚Ä≤) (Œõ (Œª X ‚Üí E (X ‚Ä¢ œÅ‚Ä≤))) (Œõ (Œª X ‚Üí F (X ‚Ä¢ œÅ‚Ä≤)))
ùíû-continuous {D}{E}{F} {œÅ} {NE-œÅ} {w}
    (inj‚ÇÅ ‚ü® V , ‚ü® fvs , ‚ü® inlV‚ààD , ‚ü® w‚ààEV‚Ä¢œÅ , ‚ü® V‚â¢[] , fvs‚â°[] ‚ü© ‚ü© ‚ü© ‚ü© ‚ü©)
    cD mD cE mE cF mF 
    with cD (left v) inlV‚ààD
... | ‚ü® œÅ‚ÇÅ , ‚ü® fœÅ‚ÇÅ , ‚ü® œÅ‚ÇÅ‚äÜœÅ , inlV‚ààDœÅ‚ÇÅ ‚ü© ‚ü© ‚ü©
    with cE V V‚â¢[] w w‚ààEV‚Ä¢œÅ
... | ‚ü® œÅ‚ÇÇ , ‚ü® fœÅ‚ÇÇ , ‚ü® œÅ‚ÇÇ‚äÜV‚Ä¢œÅ , w‚ààEœÅ‚ÇÇ ‚ü© ‚ü© ‚ü© =
    ‚ü® œÅ‚ÇÉ , ‚ü® join-finite-env fœÅ‚ÇÅ fœÅ‚ÇÇ‚Ä≤ , ‚ü® join-lub œÅ‚ÇÅ‚äÜœÅ œÅ‚ÇÇ‚Ä≤‚äÜœÅ , u‚ààùíûœÅ‚ÇÉ ‚ü© ‚ü© ‚ü©
    where
    œÅ‚ÇÇ‚Ä≤ = (Œª x ‚Üí œÅ‚ÇÇ (suc x))
    œÅ‚ÇÉ = œÅ‚ÇÅ ‚äî‚Çë œÅ‚ÇÇ‚Ä≤ 
    fœÅ‚ÇÇ‚Ä≤ : finite-env œÅ‚ÇÇ‚Ä≤
    fœÅ‚ÇÇ‚Ä≤ x = fœÅ‚ÇÇ (suc x)
    œÅ‚ÇÇ‚Ä≤‚äÜœÅ : œÅ‚ÇÇ‚Ä≤ ‚äÜ‚Çë œÅ
    œÅ‚ÇÇ‚Ä≤‚äÜœÅ x = œÅ‚ÇÇ‚äÜV‚Ä¢œÅ (suc x)
    G : (x : ‚Ñï) (d : Value) ‚Üí œÅ‚ÇÇ x d ‚Üí (mem V ‚Ä¢ œÅ‚ÇÉ) x d
    G zero d d‚ààœÅ‚ÇÇx = œÅ‚ÇÇ‚äÜV‚Ä¢œÅ zero d d‚ààœÅ‚ÇÇx
    G (suc x) d d‚ààœÅ‚ÇÇx = inj‚ÇÇ d‚ààœÅ‚ÇÇx
    u‚ààùíûœÅ‚ÇÉ = inj‚ÇÅ ‚ü® V , ‚ü® fvs , ‚ü® (mD (Œª x d z ‚Üí inj‚ÇÅ z) (left v) inlV‚ààDœÅ‚ÇÅ) ,
                  ‚ü® (mE G w w‚ààEœÅ‚ÇÇ) ,
                    ‚ü® V‚â¢[] , {!!} ‚ü© ‚ü© ‚ü© ‚ü© ‚ü©
ùíû-continuous {D}{E}{F} {œÅ} {NE-œÅ} {w}
    (inj‚ÇÇ ‚ü® V , ‚ü® fvs , ‚ü® inrV‚ààD , ‚ü® w‚ààFV‚Ä¢œÅ , ‚ü® V‚â¢[] , fvs‚â°[] ‚ü© ‚ü© ‚ü© ‚ü© ‚ü©)
    cD mD cE mE cF mF 
    with cD (right v) inrV‚ààD
... | ‚ü® œÅ‚ÇÅ , ‚ü® fœÅ‚ÇÅ , ‚ü® œÅ‚ÇÅ‚äÜœÅ , inrV‚ààDœÅ‚ÇÅ ‚ü© ‚ü© ‚ü©
    with cF V V‚â¢[] w w‚ààFV‚Ä¢œÅ
... | ‚ü® œÅ‚ÇÇ , ‚ü® fœÅ‚ÇÇ , ‚ü® œÅ‚ÇÇ‚äÜV‚Ä¢œÅ , w‚ààFœÅ‚ÇÇ ‚ü© ‚ü© ‚ü© =
    ‚ü® œÅ‚ÇÉ , ‚ü® join-finite-env fœÅ‚ÇÅ fœÅ‚ÇÇ‚Ä≤ , ‚ü® join-lub œÅ‚ÇÅ‚äÜœÅ œÅ‚ÇÇ‚Ä≤‚äÜœÅ , u‚ààùíûœÅ‚ÇÉ ‚ü© ‚ü© ‚ü©
    where
    œÅ‚ÇÇ‚Ä≤ = (Œª x ‚Üí œÅ‚ÇÇ (suc x))
    œÅ‚ÇÉ = œÅ‚ÇÅ ‚äî‚Çë œÅ‚ÇÇ‚Ä≤ 
    fœÅ‚ÇÇ‚Ä≤ : finite-env œÅ‚ÇÇ‚Ä≤
    fœÅ‚ÇÇ‚Ä≤ x = fœÅ‚ÇÇ (suc x)
    œÅ‚ÇÇ‚Ä≤‚äÜœÅ : œÅ‚ÇÇ‚Ä≤ ‚äÜ‚Çë œÅ
    œÅ‚ÇÇ‚Ä≤‚äÜœÅ x = œÅ‚ÇÇ‚äÜV‚Ä¢œÅ (suc x)
    G : (x : ‚Ñï) (d : Value) ‚Üí œÅ‚ÇÇ x d ‚Üí (mem V ‚Ä¢ œÅ‚ÇÉ) x d
    G zero d d‚ààœÅ‚ÇÇx = œÅ‚ÇÇ‚äÜV‚Ä¢œÅ zero d d‚ààœÅ‚ÇÇx
    G (suc x) d d‚ààœÅ‚ÇÇx = inj‚ÇÇ d‚ààœÅ‚ÇÇx
    u‚ààùíûœÅ‚ÇÉ = inj‚ÇÇ ‚ü® V , ‚ü® fvs , ‚ü® (mD (Œª x d z ‚Üí inj‚ÇÅ z) (right v) inrV‚ààDœÅ‚ÇÅ) ,
                  ‚ü® (mF G w w‚ààFœÅ‚ÇÇ) ,
                    ‚ü® V‚â¢[] , {!!} ‚ü© ‚ü© ‚ü© ‚ü© ‚ü©



-}