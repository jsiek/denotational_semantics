open import Lambda
open import Utilities using (_iff_)
open Reduction
  using (_‚Äî‚Ü†_; terminates; _‚âÖ_)

open import ValueBCD
open import Data.List using (List; []; _‚à∑_; length)
open import EvalCallByName
open Lambda.ASTMod
   using (`_; _‚¶Ö_‚¶Ü; Subst; Ctx; plug;
          exts; cons; bind; nil; rename; ‚ü™_‚ü´; subst-zero; _[_]; rename-id;
          WF; WF-var; WF-op; WF-cons; WF-nil; WF-ast; WF-bind; WF-Ctx; WF-plug;
          ctx-depth)
open import Structures
open import ModelCallByName
open import ValueStructAux value_struct
open import OrderingAux value_struct ordering
open import ConsistentAux value_struct ordering consistent
open import LambdaDenot value_struct ordering _‚óè_ ‚Ñ±
open import Compositionality
open DenotAux value_struct ordering _‚óè_ ‚Ñ± consistent model_curry_apply
open import SoundnessCallByName using (soundness)

import Relation.Binary.PropositionalEquality as Eq
open Eq using (_‚â°_; _‚â¢_; refl; trans; sym; cong; cong‚ÇÇ; cong-app)
open Eq.‚â°-Reasoning
open import Data.Nat using (‚Ñï; zero; suc; _<_; s‚â§s)
open import Data.Product using (_√ó_; Œ£; Œ£-syntax; ‚àÉ; ‚àÉ-syntax; proj‚ÇÅ; proj‚ÇÇ)
  renaming (_,_ to ‚ü®_,_‚ü©)
open import Data.Sum
open import Data.Empty using (‚ä•-elim) renaming (‚ä• to Bot)
open import Data.Unit
open import Relation.Nullary using (¬¨_)
open import Relation.Nullary.Negation using (contradiction)
open import Relation.Nullary using (Dec; yes; no)

module AdequacyCallByName where

ùïç : Value ‚Üí Clos ‚Üí Set
ùîº : Value ‚Üí Clos ‚Üí Set

ùïç v (clos (` x‚ÇÅ) Œ≥) = Bot
ùïç v (clos (app ‚¶Ö cons M (cons M‚ÇÅ nil) ‚¶Ü) Œ≥) = Bot
ùïç ‚ä• (clos (lam ‚¶Ö cons (bind (ast M)) nil ‚¶Ü) Œ≥) = ‚ä§
ùïç (v ‚Ü¶ w) (clos (lam ‚¶Ö cons (bind (ast N)) nil ‚¶Ü) Œ≥) =
    (‚àÄ{c : Clos} ‚Üí ùîº v c ‚Üí AboveFun w ‚Üí Œ£[ c' ‚àà Clos ]
        (Œ≥ ,' c) ‚ä¢ N ‚áì c'  √ó  ùïç w c')
ùïç (u ‚äî v) (clos (lam ‚¶Ö cons (bind (ast N)) nil ‚¶Ü) Œ≥) =
   ùïç u (clos (∆õ N) Œ≥) √ó ùïç v (clos (∆õ N) Œ≥)

ùîº v (clos M Œ≥') = AboveFun v ‚Üí Œ£[ c ‚àà Clos ] Œ≥' ‚ä¢ M ‚áì c √ó ùïç v c

data ùîæ : Env ‚Üí ClosEnv ‚Üí Set where
  ùîæ-‚àÖ : ùîæ `‚àÖ ‚àÖ'
  ùîæ-ext : ‚àÄ{Œ≥ : Env}{Œ≥' : ClosEnv}{v c}
        ‚Üí ùîæ Œ≥ Œ≥' ‚Üí ùîº v c 
        ‚Üí ùîæ (Œ≥ `, v) (Œ≥' ,' c)

{-
ùîæ : Env ‚Üí ClosEnv ‚Üí Set
ùîæ Œ≥ Œ≥' = ‚àÄ{x : Var} ‚Üí ùîº (Œ≥ x) (nth Œ≥' x)

ùîæ-‚àÖ : ùîæ `‚àÖ ‚àÖ'
ùîæ-‚àÖ {()}

ùîæ-ext : ‚àÄ{Œ≥ : Env}{Œ≥' : ClosEnv}{v c}
      ‚Üí ùîæ Œ≥ Œ≥' ‚Üí ùîº v c ‚Üí ùîæ (Œ≥ `, v) (Œ≥' ,' c)
ùîæ-ext {Œ≥} {Œ≥'} g e {0} = e
ùîæ-ext {Œ≥} {Œ≥'} g e {suc x} = g
-}

ùîæ‚Üíùîº : (Œ≥ : Env) ‚Üí (Œ≥' : ClosEnv)
    ‚Üí ùîæ Œ≥ Œ≥'
    ‚Üí (x : Var) ‚Üí (lt : x < length Œ≥')
    ‚Üí ùîº (Œ≥ x) (nth Œ≥' x)
ùîæ‚Üíùîº .(Œª x‚ÇÅ ‚Üí ‚ä•) .[] ùîæ-‚àÖ x ()
ùîæ‚Üíùîº .(_ `, _) .(_ ‚à∑ _) (ùîæ-ext ùîæŒ≥Œ≥' ùîºvc) zero (s‚â§s lt) = ùîºvc
ùîæ‚Üíùîº Œ≥‚ÇÇ (c ‚à∑ Œ≥') (ùîæ-ext {Œ≥}{Œ≥'}{v}{c} ùîæŒ≥Œ≥' ùîºvc) (suc x) (s‚â§s lt) =
    ùîæ‚Üíùîº Œ≥ Œ≥' ùîæŒ≥Œ≥' x lt

data WHNF : Term ‚Üí Set where
  ∆õ_ : ‚àÄ {N : Term}
     ‚Üí WHNF (∆õ N)

ùïç‚ÜíWHNF : ‚àÄ{Œ≥ : ClosEnv}{M : Term}{v}
       ‚Üí ùïç v (clos M Œ≥) ‚Üí WHNF M
ùïç‚ÜíWHNF {M = ` x} {v} ()
ùïç‚ÜíWHNF {M = lam ‚¶Ö cons (bind (ast N)) nil ‚¶Ü} {v} vc = ∆õ_
ùïç‚ÜíWHNF {M = app ‚¶Ö cons (ast L) (cons (ast M) nil) ‚¶Ü} {v} ()

ùïç‚äî-intro : ‚àÄ{c u v}
         ‚Üí ùïç u c ‚Üí ùïç v c
           ---------------
         ‚Üí ùïç (u ‚äî v) c
ùïç‚äî-intro {clos (` x) Œ≥} () vc
ùïç‚äî-intro {clos (lam ‚¶Ö cons (bind (ast N)) nil ‚¶Ü) Œ≥} uc vc = ‚ü® uc , vc ‚ü©
ùïç‚äî-intro {clos (app ‚¶Ö cons (ast L) (cons (ast M) nil) ‚¶Ü) Œ≥} () vc

not-AboveFun-ùïç : ‚àÄ{v : Value}{Œ≥' : ClosEnv}{N : Term }
    ‚Üí ¬¨ AboveFun v
      -------------------
    ‚Üí ùïç v (clos (lam ‚¶Ö cons (bind (ast N)) nil ‚¶Ü) Œ≥')
not-AboveFun-ùïç {‚ä•} af = tt
not-AboveFun-ùïç {v ‚Ü¶ v'} af = ‚ä•-elim (contradiction ‚ü® v , ‚ü® v' , ‚äë-refl ‚ü© ‚ü© af)
not-AboveFun-ùïç {v‚ÇÅ ‚äî v‚ÇÇ} af
    with not-AboveFun-‚äî-inv af
... | ‚ü® af1 , af2 ‚ü© = ‚ü® not-AboveFun-ùïç af1 , not-AboveFun-ùïç af2 ‚ü©


sub-ùïç : ‚àÄ{c : Clos}{v v'} ‚Üí ùïç v c ‚Üí v' ‚äë v ‚Üí ùïç v' c
sub-ùîº : ‚àÄ{c : Clos}{v v'} ‚Üí ùîº v c ‚Üí v' ‚äë v ‚Üí ùîº v' c


sub-ùïç {clos (` x) Œ≥} {v} () lt
sub-ùïç {clos (app ‚¶Ö cons L (cons M nil) ‚¶Ü) Œ≥} () lt
sub-ùïç {clos (lam ‚¶Ö cons (bind (ast N)) nil ‚¶Ü) Œ≥} vc ‚äë-‚ä• = tt
sub-ùïç {clos (lam ‚¶Ö cons (bind (ast N)) nil ‚¶Ü) Œ≥} vc (‚äë-conj-L lt1 lt2) =
    ‚ü® (sub-ùïç vc lt1) , sub-ùïç vc lt2 ‚ü©
sub-ùïç {clos (lam ‚¶Ö cons (bind (ast N)) nil ‚¶Ü) Œ≥} ‚ü® vv1 , vv2 ‚ü© (‚äë-conj-R1 lt) =
    sub-ùïç vv1 lt
sub-ùïç {clos (lam ‚¶Ö cons (bind (ast N)) nil ‚¶Ü) Œ≥} ‚ü® vv1 , vv2 ‚ü© (‚äë-conj-R2 lt) =
    sub-ùïç vv2 lt
sub-ùïç {clos (lam ‚¶Ö cons (bind (ast N)) nil ‚¶Ü) Œ≥} vc (‚äë-trans {v = v‚ÇÇ} lt1 lt2) =
    sub-ùïç (sub-ùïç vc lt2) lt1
sub-ùïç {clos (lam ‚¶Ö cons (bind (ast N)) nil ‚¶Ü) Œ≥} vc (‚äë-fun lt1 lt2) ev1 sf
    with vc (sub-ùîº ev1 lt1) (AboveFun-‚äë sf lt2)
... | ‚ü® c , ‚ü® Nc , v4 ‚ü© ‚ü© = ‚ü® c , ‚ü® Nc , sub-ùïç v4 lt2 ‚ü© ‚ü©
sub-ùïç {clos (lam ‚¶Ö cons (bind (ast N)) nil ‚¶Ü) Œ≥} {v ‚Ü¶ w ‚äî v ‚Ü¶ w'} ‚ü® vcw , vcw' ‚ü©
    ‚äë-dist ev1c sf
    with AboveFun? w | AboveFun? w'
... | yes af2 | yes af3
    with vcw ev1c af2 | vcw' ev1c af3
... | ‚ü® clos L Œ¥ , ‚ü® L‚áìc‚ÇÇ , ùïçw ‚ü© ‚ü©
    | ‚ü® c‚ÇÉ , ‚ü® L‚áìc‚ÇÉ , ùïçw' ‚ü© ‚ü© rewrite ‚áì-determ L‚áìc‚ÇÉ L‚áìc‚ÇÇ with ùïç‚ÜíWHNF ùïçw
... | ∆õ_ =
      ‚ü® clos L Œ¥ , ‚ü® L‚áìc‚ÇÇ , ‚ü® ùïçw , ùïçw' ‚ü© ‚ü© ‚ü©
sub-ùïç {c} {v ‚Ü¶ w ‚äî v ‚Ü¶ w'} ‚ü® vcw , vcw' ‚ü© ‚äë-dist ev1c sf
    | yes af2 | no naf3
    with vcw ev1c af2
... | ‚ü® clos L Œ≥‚ÇÅ , ‚ü® L‚áìc2 , ùïçw ‚ü© ‚ü©
    with ùïç‚ÜíWHNF ùïçw
... | ∆õ_ {N = N'} =
      let ùïçw' = not-AboveFun-ùïç{w'}{Œ≥‚ÇÅ}{N'} naf3 in
      ‚ü® clos (lam ‚¶Ö cons (bind (ast N')) nil ‚¶Ü) Œ≥‚ÇÅ , ‚ü® L‚áìc2 , ùïç‚äî-intro ùïçw ùïçw' ‚ü© ‚ü©
sub-ùïç {c} {v ‚Ü¶ w ‚äî v ‚Ü¶ w'} ‚ü® vcw , vcw' ‚ü© ‚äë-dist ev1c sf
    | no naf2 | yes af3
    with vcw' ev1c af3
... | ‚ü® clos L Œ≥‚ÇÅ , ‚ü® L‚áìc3 , ùïçw'c ‚ü© ‚ü© 
    with ùïç‚ÜíWHNF ùïçw'c
... | ∆õ_ {N = N'} =
      let ùïçwc = not-AboveFun-ùïç{w}{Œ≥‚ÇÅ}{N'} naf2 in
      ‚ü® clos (lam ‚¶Ö cons (bind (ast N')) nil ‚¶Ü) Œ≥‚ÇÅ , ‚ü® L‚áìc3 , ùïç‚äî-intro ùïçwc ùïçw'c ‚ü© ‚ü©
sub-ùïç {c} {v ‚Ü¶ w ‚äî v ‚Ü¶ w'} ‚ü® vcw , vcw' ‚ü© Dist‚äë ev1c ‚ü® v' , ‚ü® w'' , lt ‚ü© ‚ü©
    | no naf2 | no naf3
    with AboveFun-‚äî ‚ü® v' , ‚ü® w'' , lt ‚ü© ‚ü©
... | inj‚ÇÅ af2 = ‚ä•-elim (contradiction af2 naf2)
... | inj‚ÇÇ af3 = ‚ä•-elim (contradiction af3 naf3)


sub-ùîº {clos M Œ≥} {v} {v'} ùîºv v'‚äëv fv'
    with ùîºv (AboveFun-‚äë fv' v'‚äëv)
... | ‚ü® c , ‚ü® M‚áìc , ùïçv ‚ü© ‚ü© =
      ‚ü® c , ‚ü® M‚áìc , sub-ùïç ùïçv v'‚äëv ‚ü© ‚ü©

kth-x : ‚àÄ{Œ≥' : ClosEnv}{x : Var}
     ‚Üí Œ£[ Œ¥ ‚àà ClosEnv ] Œ£[ M ‚àà Term ]
           nth Œ≥' x ‚â° clos M Œ¥
kth-x{Œ≥' = Œ≥'}{x = x} with nth Œ≥' x
... | clos M Œ¥ = ‚ü® Œ¥ , ‚ü® M , refl ‚ü© ‚ü©

‚Ñ∞‚Üíùîº : ‚àÄ{Œ≥ : Env}{Œ≥' : ClosEnv}{M : Term}{v}{wf : WF (length Œ≥') M }
            ‚Üí ùîæ Œ≥ Œ≥' ‚Üí ‚Ñ∞ M Œ≥ v ‚Üí ùîº v (clos M Œ≥')
‚Ñ∞‚Üíùîº {Œ≥} {Œ≥'} {` x} {v}{WF-var x lt} ùîæŒ≥Œ≥' v‚äëŒ≥x fŒ≥x
    with kth-x{Œ≥'}{x} | ùîæ‚Üíùîº Œ≥ Œ≥' ùîæŒ≥Œ≥' x lt
... | ‚ü® Œ¥ , ‚ü® M' , eq ‚ü© ‚ü© | ùîæŒ≥Œ≥'x
    rewrite eq
    with ùîæŒ≥Œ≥'x (AboveFun-‚äë fŒ≥x v‚äëŒ≥x)
... | ‚ü® c , ‚ü® M'‚áìc , ùïçŒ≥x ‚ü© ‚ü© =
      ‚ü® c , ‚ü® (‚áì-var eq M'‚áìc) , sub-ùïç ùïçŒ≥x v‚äëŒ≥x ‚ü© ‚ü©
‚Ñ∞‚Üíùîº {Œ≥}{Œ≥'}{lam ‚¶Ö cons (bind (ast N)) nil ‚¶Ü}{v}{WF-op (WF-cons (WF-bind (WF-ast wfN)) WF-nil)} ùîæŒ≥Œ≥' ‚Ñ∞MŒ≥v fŒ≥x = G ‚Ñ∞MŒ≥v fŒ≥x
  where
  G : ‚àÄ{v}
    ‚Üí ‚Ñ± (‚Ñ∞ N) Œ≥ v
    ‚Üí AboveFun v
    ‚Üí Œ£[ c ‚àà Clos ] (Œ≥' ‚ä¢ lam ‚¶Ö cons (bind (ast N)) nil ‚¶Ü ‚áì c) √ó ùïç v c
  G {‚ä•} tt fv = ‚ä•-elim (AboveFun‚ä• fv)
  G {v ‚Ü¶ w} ‚Ñ±‚Ñ∞NŒ≥v fv =
      ‚ü® (clos (lam ‚¶Ö cons (bind (ast N)) nil ‚¶Ü) Œ≥') , ‚ü® ‚áì-lam , E ‚ü© ‚ü©
    where E : {c : Clos} ‚Üí ùîº v c ‚Üí AboveFun w
            ‚Üí Œ£[ c' ‚àà Clos ] (Œ≥' ,' c) ‚ä¢ N ‚áì c'  √ó  ùïç w c'
          E {c} ùîºvc fw = ‚Ñ∞‚Üíùîº {wf = wfN} (ùîæ-ext ùîæŒ≥Œ≥' ùîºvc) ‚Ñ±‚Ñ∞NŒ≥v fw
  G {v‚ÇÅ ‚äî v‚ÇÇ} ‚ü® d‚ÇÅ , d‚ÇÇ ‚ü© fv
      with AboveFun? v‚ÇÅ | AboveFun? v‚ÇÇ
  ... | yes fv1 | yes fv2
      with G d‚ÇÅ fv1 | G d‚ÇÇ fv2 
  ... | ‚ü® c‚ÇÅ , ‚ü® M‚áìc‚ÇÅ , ùïçv‚ÇÅ ‚ü© ‚ü© | ‚ü® c‚ÇÇ , ‚ü® M‚áìc‚ÇÇ , ùïçv‚ÇÇ ‚ü© ‚ü©
      rewrite ‚áì-determ M‚áìc‚ÇÇ M‚áìc‚ÇÅ =
      ‚ü® c‚ÇÅ , ‚ü® M‚áìc‚ÇÅ , ùïç‚äî-intro ùïçv‚ÇÅ ùïçv‚ÇÇ ‚ü© ‚ü©
  G {v‚ÇÅ ‚äî v‚ÇÇ} ‚ü® d‚ÇÅ , d‚ÇÇ ‚ü© fv | yes fv1 | no nfv2
      with G d‚ÇÅ fv1 
  ... | ‚ü® clos M' Œ≥‚ÇÅ , ‚ü® M‚áìc‚ÇÅ , ùïçv‚ÇÅ ‚ü© ‚ü©
      with ùïç‚ÜíWHNF ùïçv‚ÇÅ
  ... | ∆õ_ {N = N} =
      let ùïçv‚ÇÇ = not-AboveFun-ùïç{v‚ÇÇ}{Œ≥‚ÇÅ}{N} nfv2 in
      ‚ü® clos (lam ‚¶Ö cons (bind (ast N)) nil ‚¶Ü) Œ≥‚ÇÅ , ‚ü® M‚áìc‚ÇÅ , ùïç‚äî-intro ùïçv‚ÇÅ ùïçv‚ÇÇ ‚ü© ‚ü©
  G {v‚ÇÅ ‚äî v‚ÇÇ} ‚ü® d‚ÇÅ , d‚ÇÇ ‚ü© fv | no nfv1  | yes fv2
      with G d‚ÇÇ fv2
  ... | ‚ü® clos M' Œ≥‚ÇÅ , ‚ü® M'‚áìc‚ÇÇ , ùïç2c ‚ü© ‚ü©
      with ùïç‚ÜíWHNF ùïç2c
  ... | ∆õ_ {N = N} =
      let ùïç1c = not-AboveFun-ùïç{v‚ÇÅ}{Œ≥‚ÇÅ}{N} nfv1 in
      ‚ü® clos (lam ‚¶Ö cons (bind (ast N)) nil ‚¶Ü) Œ≥‚ÇÅ , ‚ü® M'‚áìc‚ÇÇ , ùïç‚äî-intro ùïç1c ùïç2c ‚ü© ‚ü©
  G {v‚ÇÅ ‚äî v‚ÇÇ} ‚Ñ±‚Ñ∞NŒ≥v fv12 | no nfv1  | no nfv2
      with AboveFun-‚äî fv12
  ... | inj‚ÇÅ fv1 = ‚ä•-elim (contradiction fv1 nfv1)
  ... | inj‚ÇÇ fv2 = ‚ä•-elim (contradiction fv2 nfv2)
‚Ñ∞‚Üíùîº {Œ≥}{Œ≥'}{app ‚¶Ö cons (ast L) (cons (ast M) nil) ‚¶Ü}{v}{wf}ùîæŒ≥Œ≥' (inj‚ÇÅ v‚äë‚ä•) fŒ≥x =
   ‚ä•-elim (contradiction (AboveFun-‚äë fŒ≥x v‚äë‚ä•) AboveFun‚ä• )
‚Ñ∞‚Üíùîº {Œ≥} {Œ≥'} {app ‚¶Ö cons (ast L) (cons (ast M) nil) ‚¶Ü} {v}
    {WF-op (WF-cons (WF-ast wfL) (WF-cons (WF-ast wfM) WF-nil))} ùîæŒ≥Œ≥'
   (inj‚ÇÇ ‚ü® v‚ÇÅ , ‚ü® d‚ÇÅ , d‚ÇÇ ‚ü© ‚ü© ) fv
    with ‚Ñ∞‚Üíùîº {wf = wfL} ùîæŒ≥Œ≥' d‚ÇÅ ‚ü® v‚ÇÅ , ‚ü® v , ‚äë-refl ‚ü© ‚ü©
... | ‚ü® clos L' Œ¥ , ‚ü® L‚áìL' , ùïçv‚ÇÅ‚Ü¶v ‚ü© ‚ü© 
    with ùïç‚ÜíWHNF ùïçv‚ÇÅ‚Ü¶v
... | ∆õ_ {N = N} 
    with ùïçv‚ÇÅ‚Ü¶v {clos M Œ≥'} (‚Ñ∞‚Üíùîº {wf = wfM} ùîæŒ≥Œ≥' d‚ÇÇ) fv
... | ‚ü® c' , ‚ü® N‚áìc' , ùïçv ‚ü© ‚ü© =
    ‚ü® c' , ‚ü® ‚áì-app L‚áìL' N‚áìc' , ùïçv ‚ü© ‚ü©

adequacy : ‚àÄ{M : Term}{N : Term}{wf : WF 0 M}
         ‚Üí ‚Ñ∞ M ‚âÉ ‚Ñ∞ (lam ‚¶Ö cons (bind (ast N)) nil ‚¶Ü)
           ----------------------------------------------------------
         ‚Üí Œ£[ N‚Ä≤ ‚àà Term ] Œ£[ Œ≥ ‚àà ClosEnv ]
             ‚àÖ' ‚ä¢ M ‚áì clos (lam ‚¶Ö cons (bind (ast N‚Ä≤)) nil ‚¶Ü) Œ≥
adequacy{M}{N}{wf} eq
    with ‚Ñ∞‚Üíùîº {wf = wf} ùîæ-‚àÖ
              ((proj‚ÇÇ (eq `‚àÖ (‚ä• ‚Ü¶ ‚ä•) (Œª x ‚Üí tt) tt)) (‚Ñ∞-‚ä•{M = N}))
              ‚ü® ‚ä• , ‚ü® ‚ä• , ‚äë-refl ‚ü© ‚ü©
... | ‚ü® clos M‚Ä≤ Œ≥ , ‚ü® M‚áìc , Vc ‚ü© ‚ü©
    with ùïç‚ÜíWHNF Vc
... | ∆õ_ {N = N‚Ä≤} = 
    ‚ü® N‚Ä≤ , ‚ü® Œ≥ , M‚áìc ‚ü© ‚ü©

reduce‚Üícbn : ‚àÄ {M : Term} {N : Term}{wf : WF 0 M}
           ‚Üí M ‚Äî‚Ü† lam ‚¶Ö cons (bind (ast N)) nil ‚¶Ü
           ‚Üí Œ£[ N‚Ä≤ ‚àà Term ] Œ£[ Œ¥ ‚àà ClosEnv ] 
             ‚àÖ' ‚ä¢ M ‚áì clos (lam ‚¶Ö cons (bind (ast N‚Ä≤)) nil ‚¶Ü) Œ¥
reduce‚Üícbn {M}{N}{wf} M‚Äî‚Ü†∆õN = adequacy {M}{N}{wf} (soundness M‚Äî‚Ü†∆õN)


cbn‚Üîreduce : ‚àÄ {M : Term}{wf : WF 0 M}
           ‚Üí (Œ£[ N ‚àà Term ] (M ‚Äî‚Ü† lam ‚¶Ö cons (bind (ast N)) nil ‚¶Ü))
             iff
             (Œ£[ N‚Ä≤ ‚àà Term ] Œ£[ Œ¥ ‚àà ClosEnv ]
               ‚àÖ' ‚ä¢ M ‚áì clos (lam ‚¶Ö cons (bind (ast N‚Ä≤)) nil ‚¶Ü) Œ¥)
cbn‚Üîreduce {M}{wf} = ‚ü® (Œª x ‚Üí reduce‚Üícbn{wf = wf} (proj‚ÇÇ x)) ,
                   (Œª x ‚Üí cbn‚Üíreduce (proj‚ÇÇ (proj‚ÇÇ x))) ‚ü©

denot-equal-terminates : ‚àÄ {M N : Term} {C : Ctx}
    {wfC : WF-Ctx 0 C} {wfN : WF (ctx-depth C) N}
  ‚Üí ‚Ñ∞ M ‚âÉ ‚Ñ∞ N  ‚Üí  terminates (plug C M)
    -----------------------------------
  ‚Üí terminates (plug C N)
denot-equal-terminates {M}{N}{C}{wfC}{wfM} ‚Ñ∞M‚âÉ‚Ñ∞N ‚ü® N‚Ä≤ , CM‚Äî‚Ü†∆õN‚Ä≤ ‚ü© =
  let ‚Ñ∞CM‚âÉ‚Ñ∞∆õN‚Ä≤ = soundness CM‚Äî‚Ü†∆õN‚Ä≤ in
  let ‚Ñ∞CM‚âÉ‚Ñ∞CN = compositionality{C = C} ‚Ñ∞M‚âÉ‚Ñ∞N in
  let ‚Ñ∞CN‚âÉ‚Ñ∞∆õN‚Ä≤ = ‚âÉ-trans (‚âÉ-sym ‚Ñ∞CM‚âÉ‚Ñ∞CN) ‚Ñ∞CM‚âÉ‚Ñ∞∆õN‚Ä≤ in
    cbn‚Üíreduce (proj‚ÇÇ (proj‚ÇÇ (adequacy{N = N‚Ä≤}{WF-plug wfC wfM} ‚Ñ∞CN‚âÉ‚Ñ∞∆õN‚Ä≤)))

denot-equal-contex-equal : ‚àÄ {M N : Term}
  ‚Üí ‚Ñ∞ M ‚âÉ ‚Ñ∞ N
    ---------
  ‚Üí M ‚âÖ N
denot-equal-contex-equal{M}{N} eq {C}{wfC}{wfM}{wfN} =
   ‚ü® (Œª tm ‚Üí denot-equal-terminates{M = M}{wfC = wfC}{wfN = wfN} eq tm) ,
     (Œª tn ‚Üí denot-equal-terminates{M = N}{wfC = wfC}{wfN = wfM} (‚âÉ-sym eq) tn) ‚ü©

