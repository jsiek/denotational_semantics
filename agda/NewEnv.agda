open import Data.Empty using (‚ä•-elim) renaming (‚ä• to False)
open import Data.List using (List ; _‚à∑_ ; []; _++_; length; replicate)
open import Data.List.Properties using (++-conicalÀ°)
open import Data.List.Membership.Propositional renaming (_‚àà_ to _‚ãµ_)
open import Data.List.Membership.Propositional.Properties
  using (‚àà-++‚Å∫À°; ‚àà-++‚Å∫ ≥)
open import Data.List.Relation.Unary.Any using (here; there) 
open import Data.Nat using (‚Ñï; zero; suc; _‚âü_; _<_; s‚â§s; _+_)
open import Data.Product using (_√ó_; Œ£; Œ£-syntax; proj‚ÇÅ; proj‚ÇÇ)
    renaming (_,_ to ‚ü®_,_‚ü©)
open import Data.Sum using (_‚äé_; inj‚ÇÅ; inj‚ÇÇ)
open import Data.Unit using (tt) renaming (‚ä§ to True)
open import Data.Unit.Polymorphic using () renaming (tt to ptt; ‚ä§ to pTrue)
open import Level renaming (zero to lzero; suc to lsuc; _‚äî_ to _l‚äî_)
open import Relation.Binary.PropositionalEquality
    using (_‚â°_; _‚â¢_; refl; sym; subst)
open import Relation.Nullary using (¬¨_; Dec; yes; no)

open import Primitives
open import ScopedTuple hiding (ùí´)
open import SetsAsPredicates
open import Syntax hiding (‚åà_‚åâ)
open import NewSigUtil
open import NewSyntaxUtil
open import NewDOpSig
open import Utilities using (extensionality)
open import NewDenotProperties

module NewEnv where



{- ================ Set-valued environments ================================ -}

Env : (A : Set) ‚Üí Set‚ÇÅ
Env A = Var ‚Üí ùí´ A

nonempty-env : ‚àÄ {A} ‚Üí Env A ‚Üí Set
nonempty-env œÅ = ‚àÄ x ‚Üí nonempty (œÅ x)

infix 5 _~‚Çë[_]_
_~‚Çë[_]_ : ‚àÄ {A}{B} ‚Üí Env A ‚Üí (R : ùí´ A ‚Üí ùí´ B ‚Üí Set) ‚Üí Env B ‚Üí Set
œÅ ~‚Çë[ R ] œÅ' = ‚àÄ x ‚Üí R (œÅ x) (œÅ' x)

infix 5 _‚äÜ‚Çë_
_‚äÜ‚Çë_ : ‚àÄ {A} ‚Üí Env A ‚Üí Env A ‚Üí Set
œÅ‚ÇÅ ‚äÜ‚Çë œÅ‚ÇÇ = œÅ‚ÇÅ ~‚Çë[ _‚äÜ_ ] œÅ‚ÇÇ

‚äÜ‚Çë-trans : ‚àÄ{A}{œÅ‚ÇÅ œÅ‚ÇÇ œÅ‚ÇÉ : Env A} ‚Üí œÅ‚ÇÅ ‚äÜ‚Çë œÅ‚ÇÇ ‚Üí œÅ‚ÇÇ ‚äÜ‚Çë œÅ‚ÇÉ ‚Üí œÅ‚ÇÅ ‚äÜ‚Çë œÅ‚ÇÉ
‚äÜ‚Çë-trans {œÅ‚ÇÅ}{œÅ‚ÇÇ}{œÅ‚ÇÉ} r12 r23 x = Œª d z ‚Üí r23 x d (r12 x d z)

‚àÄ‚Çë : ‚àÄ {A} (P : ùí´ A ‚Üí Set) ‚Üí Env A ‚Üí Set
‚àÄ‚Çë P œÅ = ‚àÄ i ‚Üí P (œÅ i)

‚àÄ‚Çë-ext : ‚àÄ {A œÅ D} P ‚Üí ‚àÄ‚Çë {A} P œÅ ‚Üí P D ‚Üí ‚àÄ‚Çë P (D ‚Ä¢ œÅ)
‚àÄ‚Çë-ext P PœÅ PD zero = PD
‚àÄ‚Çë-ext P PœÅ PD (suc i) = PœÅ i

extend-nonempty-env : ‚àÄ{A}{œÅ : Env A}{X}
   ‚Üí nonempty-env œÅ  ‚Üí  nonempty X  ‚Üí  nonempty-env (X ‚Ä¢ œÅ)
extend-nonempty-env {œÅ} {X} NE-œÅ NE-X zero = NE-X
extend-nonempty-env {œÅ} {X} NE-œÅ V‚â¢[] (suc x) = NE-œÅ x

‚Ä¢-~ : ‚àÄ {A}{B}{œÅ : Env A}{œÅ' : Env B}{D : ùí´ A}{E : ùí´ B} R
        ‚Üí œÅ ~‚Çë[ R ] œÅ' ‚Üí R D E ‚Üí (D ‚Ä¢ œÅ) ~‚Çë[ R ] (E ‚Ä¢ œÅ')
‚Ä¢-~ {A} {B} {œÅ} {œÅ'} {D} {E} R œÅ~œÅ' D~E zero = D~E
‚Ä¢-~ {A} {B} {œÅ} {œÅ'} {D} {E} R œÅ~œÅ' D~E (suc x) = œÅ~œÅ' x

env-ext : ‚àÄ{A}{œÅ œÅ‚Ä≤ : Env A}{X} ‚Üí œÅ ‚äÜ‚Çë œÅ‚Ä≤ ‚Üí (x : Var) ‚Üí (X ‚Ä¢ œÅ) x ‚äÜ (X ‚Ä¢ œÅ‚Ä≤) x
env-ext œÅ<œÅ‚Ä≤ zero d d‚àà = d‚àà
env-ext œÅ<œÅ‚Ä≤ (suc x) = œÅ<œÅ‚Ä≤ x

finiteNE : ‚àÄ {A} ‚Üí ùí´ A ‚Üí Set
finiteNE {A} S = Œ£[ V ‚àà List A ] S ‚âÉ (mem V) √ó V ‚â¢ []

{- environments whose codomain are finite nonempty sets -}
finiteNE-env : ‚àÄ {A} ‚Üí Env A ‚Üí Set
finiteNE-env {A} œÅ = ‚àÄ x ‚Üí finiteNE (œÅ x)

extend-finiteNE-env : ‚àÄ {A}{œÅ : Env A}{X}
  ‚Üí finiteNE-env œÅ ‚Üí finiteNE X ‚Üí finiteNE-env (X ‚Ä¢ œÅ)
extend-finiteNE-env fin-œÅ fin-X zero = fin-X
extend-finiteNE-env fin-œÅ fin-X (suc i) = fin-œÅ i

infix 6 _‚äî‚Çë_
_‚äî‚Çë_ : ‚àÄ {A} ‚Üí Env A ‚Üí Env A ‚Üí Env A
(œÅ‚ÇÅ ‚äî‚Çë œÅ‚ÇÇ) x v = œÅ‚ÇÅ x v ‚äé œÅ‚ÇÇ x v

join-finiteNE-env : ‚àÄ{A} {œÅ‚ÇÅ œÅ‚ÇÇ : Env A} ‚Üí finiteNE-env œÅ‚ÇÅ  ‚Üí  finiteNE-env œÅ‚ÇÇ
   ‚Üí finiteNE-env (œÅ‚ÇÅ ‚äî‚Çë œÅ‚ÇÇ)
join-finiteNE-env {A}{œÅ‚ÇÅ}{œÅ‚ÇÇ} f1 f2 x
    with f1 x
... | ‚ü® E1 , ‚ü® œÅ‚ÇÅ=E1 , NE-E1 ‚ü© ‚ü©
    with f2 x
... | ‚ü® E2 , ‚ü® œÅ‚ÇÇ=E2 , NE-E2 ‚ü© ‚ü© =
    ‚ü® (E1 ++ E2) , ‚ü® ‚ü® G , (H {E1} Œª d z ‚Üí z) ‚ü© ,
      (Œª E12=[] ‚Üí NE-E1 (++-conicalÀ° E1 E2 E12=[])) ‚ü© ‚ü©
    where
    G : (v : A ) ‚Üí œÅ‚ÇÅ x v ‚äé œÅ‚ÇÇ x v ‚Üí mem (E1 ++ E2) v
    G v (inj‚ÇÅ œÅ1x) = ‚àà-++‚Å∫À° ((proj‚ÇÅ œÅ‚ÇÅ=E1) v œÅ1x)
    G v (inj‚ÇÇ œÅ2x) = ‚àà-++‚Å∫ ≥ E1 ((proj‚ÇÅ œÅ‚ÇÇ=E2) v œÅ2x)

    H : ‚àÄ{E} ‚Üí mem E ‚äÜ mem E1 ‚Üí mem (E ++ E2) ‚äÜ (Œª v ‚Üí œÅ‚ÇÅ x v ‚äé œÅ‚ÇÇ x v)
    H {[]} E<E1 v v‚ààE++E2 = inj‚ÇÇ ((proj‚ÇÇ œÅ‚ÇÇ=E2) v v‚ààE++E2)
    H {x ‚à∑ E} E<E1 .x (here refl) = inj‚ÇÅ ((proj‚ÇÇ œÅ‚ÇÅ=E1) x (E<E1 x (here refl)))
    H {x ‚à∑ E} E<E1 v (there v‚ààE++E2) =
       H (Œª v z ‚Üí E<E1 v (there z)) v v‚ààE++E2

join-lub : ‚àÄ{A}{œÅ œÅ‚ÇÅ œÅ‚ÇÇ : Env A} ‚Üí œÅ‚ÇÅ ‚äÜ‚Çë œÅ ‚Üí œÅ‚ÇÇ ‚äÜ‚Çë œÅ ‚Üí œÅ‚ÇÅ ‚äî‚Çë œÅ‚ÇÇ ‚äÜ‚Çë œÅ
join-lub {œÅ} {œÅ‚ÇÅ} {œÅ‚ÇÇ} œÅ‚ÇÅ‚äÜœÅ œÅ‚ÇÇ‚äÜœÅ x v (inj‚ÇÅ v‚ààœÅ‚ÇÅx) = œÅ‚ÇÅ‚äÜœÅ x v v‚ààœÅ‚ÇÅx
join-lub {œÅ} {œÅ‚ÇÅ} {œÅ‚ÇÇ} œÅ‚ÇÅ‚äÜœÅ œÅ‚ÇÇ‚äÜœÅ x v (inj‚ÇÇ v‚ààœÅ‚ÇÇx) = œÅ‚ÇÇ‚äÜœÅ x v v‚ààœÅ‚ÇÇx

join-‚äÜ-left : ‚àÄ{A}{œÅ‚ÇÅ œÅ‚ÇÇ : Env A} ‚Üí œÅ‚ÇÅ ‚äÜ‚Çë œÅ‚ÇÅ ‚äî‚Çë œÅ‚ÇÇ
join-‚äÜ-left {œÅ‚ÇÅ}{œÅ‚ÇÇ} = Œª x d z ‚Üí inj‚ÇÅ z

join-‚äÜ-right : ‚àÄ{A}{œÅ‚ÇÅ œÅ‚ÇÇ : Env A} ‚Üí œÅ‚ÇÇ ‚äÜ‚Çë œÅ‚ÇÅ ‚äî‚Çë œÅ‚ÇÇ
join-‚äÜ-right {œÅ‚ÇÅ}{œÅ‚ÇÇ} = Œª x d z ‚Üí inj‚ÇÇ z

monotone-env : ‚àÄ {A} ‚Üí (Env A ‚Üí ùí´ A) ‚Üí Set‚ÇÅ
monotone-env D = ‚àÄ {œÅ œÅ‚Ä≤} ‚Üí (‚àÄ x ‚Üí œÅ x ‚äÜ œÅ‚Ä≤ x)  ‚Üí  D œÅ ‚äÜ D œÅ‚Ä≤


{- creates an environment that maps each variable x to
   a singleton set of some element in œÅ x.  -}
initial-finiteNE-env : ‚àÄ {A} (œÅ : Env A) ‚Üí (NE-œÅ : nonempty-env œÅ) ‚Üí Env A
initial-finiteNE-env œÅ NE-œÅ x
    with NE-œÅ x
... | ‚ü® v , v‚ààœÅx ‚ü© = ‚åà v ‚åâ

initial-fin : ‚àÄ {A} (œÅ : Env A) ‚Üí (NE-œÅ : nonempty-env œÅ)
   ‚Üí finiteNE-env (initial-finiteNE-env œÅ NE-œÅ)
initial-fin œÅ NE-œÅ x
    with NE-œÅ x
... | ‚ü® v , v‚ààœÅx ‚ü© =
      ‚ü® v ‚à∑ [] ,
      ‚ü® ‚ü® (Œª {w refl ‚Üí (here refl)}) , (Œª {w (here refl) ‚Üí refl}) ‚ü© , (Œª ()) ‚ü© ‚ü©

initial-fin-‚äÜ : ‚àÄ {A} (œÅ : Env A) ‚Üí (NE-œÅ : nonempty-env œÅ)
  ‚Üí initial-finiteNE-env œÅ NE-œÅ ‚äÜ‚Çë œÅ
initial-fin-‚äÜ œÅ NE-œÅ x v v‚ààinitial
    with NE-œÅ x
... | ‚ü® w , w‚ààœÅx ‚ü© rewrite v‚ààinitial = w‚ààœÅx

{- single-env maps x to D and any other variable y to something in œÅ y. -}
single-env : ‚àÄ {A} Var ‚Üí ùí´ A ‚Üí (œÅ : Env A) ‚Üí (NE-œÅ : nonempty-env œÅ) ‚Üí Env A
single-env x D œÅ NE-œÅ y
    with x ‚âü y
... | yes refl = D
... | no neq
    with NE-œÅ y
... | ‚ü® v , v‚ààœÅy ‚ü© = ‚åà v ‚åâ    

single-fin : ‚àÄ{A}{v}{x}{œÅ : Env A}{NE-œÅ} ‚Üí finiteNE-env (single-env x ‚åà v ‚åâ œÅ NE-œÅ)
single-fin {A}{v}{x}{œÅ}{NE-œÅ} y
    with x ‚âü y
... | yes refl =
    ‚ü® v ‚à∑ [] ,
    ‚ü® ‚ü® (Œª{v‚ÇÅ refl ‚Üí (here refl)}) , (Œª{v‚ÇÅ (here refl) ‚Üí refl}) ‚ü© , (Œª ()) ‚ü© ‚ü©
... | no neq
    with NE-œÅ y
... | ‚ü® w , w‚ààœÅy ‚ü© =
    ‚ü® w ‚à∑ [] ,
    ‚ü® ‚ü® (Œª{v‚ÇÅ refl ‚Üí here refl}) , (Œª{v‚ÇÅ (here refl) ‚Üí refl}) ‚ü© , (Œª ()) ‚ü© ‚ü©

single-‚äÜ : ‚àÄ{A}{œÅ x v}{NE-œÅ : nonempty-env {A} œÅ}
  ‚Üí  v ‚àà œÅ x  ‚Üí  single-env x ‚åà v ‚åâ œÅ NE-œÅ ‚äÜ‚Çë œÅ
single-‚äÜ {A}{œÅ}{x}{v}{NE-œÅ} v‚ààœÅx y w sing 
    with x ‚âü y
... | yes refl rewrite sing = v‚ààœÅx
... | no neq
    with NE-œÅ y
... | ‚ü® u , u‚ààœÅy ‚ü© rewrite sing = u‚ààœÅy

v‚ààsingle[xv]x : ‚àÄ{A}{v}{x}{œÅ : Env A}{NE-œÅ} ‚Üí v ‚àà single-env x ‚åà v ‚åâ œÅ NE-œÅ x
v‚ààsingle[xv]x {A}{v}{x}
    with x ‚âü x
... | yes refl = refl
... | no neq = ‚ä•-elim (neq refl)