module ClosureConversion where

open import Primitives
open import ISWIM
open ASTMod using (FV?)

open import Data.Bool using (Bool; true; false; _‚à®_)
open import Data.Empty using (‚ä•-elim) renaming (‚ä• to False)
open import Data.List using (List; []; _‚à∑_; _++_; length; replicate)
open import Data.Nat using (‚Ñï; zero; suc; _‚â§_; _<_; _‚âü_; _+_; s‚â§s)
open import Data.Nat.Properties
  using (‚â§-refl; ‚â§-trans; n‚â§1+n; +-identity ≥; ‚â§-step)
open import Data.Product using (_√ó_; Œ£; Œ£-syntax; ‚àÉ; ‚àÉ-syntax; proj‚ÇÅ; proj‚ÇÇ)
  renaming (_,_ to ‚ü®_,_‚ü©)
open import Data.Sum using (_‚äé_; inj‚ÇÅ; inj‚ÇÇ)
open import Data.Unit using (tt) renaming (‚ä§ to True)
open import Relation.Binary.PropositionalEquality
  using (_‚â°_; _‚â¢_; refl; sym; cong; cong‚ÇÇ; inspect; [_])
open Relation.Binary.PropositionalEquality.‚â°-Reasoning
  using (begin_; _‚â°‚ü®‚ü©_; _‚â°‚ü®_‚ü©_; _‚àé)
open import Relation.Nullary using (Dec; yes; no)

import Syntax
open import ValueConst
open import ValueStructAux value_struct
open import OrderingAux value_struct ordering
open import Consistency
open import ConsistentAux value_struct ordering consistent
open import CurryConst
open import ModelCurryConst
open import ModelCallByValue value_struct ordering consistent ‚Ñ± model_curry

{-

  Target intermediate language of closure conversion

-}

data IROp : Set where
  fun : ‚Ñï ‚Üí IROp   {- number of parameters -}
  close : ‚Ñï ‚Üí IROp
  ir-app : IROp
  ir-lit : (p : Prim) ‚Üí rep p ‚Üí IROp

IR-sig : IROp ‚Üí List ‚Ñï
IR-sig (fun n) = n ‚à∑ []
IR-sig (close n) = replicate (suc n) 0
IR-sig ir-app = 0 ‚à∑ 0 ‚à∑ []
IR-sig (ir-lit p k) = []

open Syntax using (Rename; _‚Ä¢_; ‚Üë; ‚¶â_‚¶ä)
module IRMod = Syntax.OpSig IROp IR-sig
open IRMod renaming (ABT to IR; `_ to ^_; _‚¶Ö_‚¶Ü to node; cons to ir-cons;
   nil to ir-nil; ast to ir-ast; bind to ir-bind; rename to ir-rename;
   WF to ir-WF; FV? to ir-FV?; WF-op to ir-WF-op; WF-cons to ir-WF-cons;
   WF-nil to ir-WF-nil; WF-ast to ir-WF-ast; WF-bind to ir-WF-bind) public
open IRMod using ( _‚®ü_; exts-cons-shift; bind-ast)

pattern # p k = node (ir-lit p k) ir-nil 
pattern ∆ë n N = node (fun n) (ir-cons N ir-nil)
pattern ‚ü™_,_,_‚ü´ f n fvs = node (close n) (ir-cons (ir-ast f) fvs)
pattern _Àô_ L M = node ir-app (ir-cons (ir-ast L) (ir-cons (ir-ast M) ir-nil))

num-FV : (n i : ‚Ñï) ‚Üí Term ‚Üí ‚Ñï
num-FV n 0 M = 0
num-FV n (suc i) M
    with FV? M n
... | true = suc (num-FV (suc n) i M )
... | false = num-FV (suc n) i M 

{-

  The compressor function produces a renaming that maps all the free
  variables (above 0) in a term into a contiguous sequence of numbers
  (above 0).

-}

compressor : (n i k : ‚Ñï) ‚Üí (M : Term) ‚Üí Rename
compressor n 0 k M = ‚Üë k
compressor n (suc i) k M
    with FV? M n
... | true = k ‚Ä¢ compressor (suc n) i (suc k) M 
... | false = k ‚Ä¢ compressor (suc n) i k M 

test-M : Term
test-M = (` 2) ¬∑ (` 5)

test-cmp : Rename
test-cmp = 0 ‚Ä¢ compressor 1 5 1 test-M

_ : rename test-cmp test-M ‚â° (` 1 ) ¬∑ (` 2)
_ = refl

_ : num-FV 1 5 test-M ‚â° 2
_ = refl

{-

 Closure conversion 

 -}

convert-clos : (M : Term) ‚Üí ‚àÄ{Œì} ‚Üí WF Œì M ‚Üí IR
convert-clos (` x) {Œì} wfM = ^ x
convert-clos (∆õ N) {Œì} (WF-op (WF-cons (WF-bind (WF-ast wfN)) WF-nil)) =
  let œÅ = compressor 1 Œì 1 N in
  let N‚Ä≤ = ir-rename œÅ (convert-clos N {suc Œì} wfN) in
  let nfv = num-FV 1 Œì N in
  let fun = ∆ë nfv (add-binds nfv N‚Ä≤) in
  ‚ü™ fun , nfv , fv-refs 1 Œì 1 N ‚ü´

  where
  add-binds : (n : ‚Ñï) ‚Üí IR ‚Üí Arg n
  add-binds zero N = ir-ast N
  add-binds (suc n) N = ir-bind (add-binds n N)

  fv-refs : (n i k : ‚Ñï) ‚Üí (M : Term) ‚Üí Args (replicate (num-FV n i M) 0)
  fv-refs n zero k M = ir-nil
  fv-refs n (suc i) k M
      with FV? M n
  ... | true = ir-cons (ir-ast (^ n)) (fv-refs (suc n) i (suc k) M)
  ... | false = fv-refs (suc n) i k M

convert-clos (L ¬∑ M) {Œì}
   (WF-op (WF-cons (WF-ast wfL) (WF-cons (WF-ast wfM) WF-nil))) =
   let L‚Ä≤ = convert-clos L wfL in
   let M‚Ä≤ = convert-clos M wfM in
   L‚Ä≤ Àô M‚Ä≤
convert-clos ($ p k) {Œì} wf = # p k

{-

 Semantics of the target language

 -}

‚Ñ≥ : IR ‚Üí Denotation
‚Ñ≥ (# P k) Œ≥ v = ‚Ñò {P} k v
‚Ñ≥ (^ x) Œ≥ v = v ‚äë Œ≥ x
‚Ñ≥ (∆ë n bN) =
    curry-n n bN
    where
    curry-n : (n : ‚Ñï) ‚Üí Arg n ‚Üí Denotation
    curry-n 0 (ir-ast N) = ‚Ñ≥ N
    curry-n (suc n) (ir-bind bN) = ‚Ñ± (curry-n n bN)
‚Ñ≥ ‚ü™ L , n , As ‚ü´ =
    apply-n n (‚Ñ≥ L) As
    where
    apply-n : (n : ‚Ñï) ‚Üí Denotation ‚Üí Args (replicate n 0) ‚Üí Denotation
    apply-n zero D ir-nil = D
    apply-n (suc n) D (ir-cons (ir-ast M) As) =
        let D‚Ä≤ = D ‚óè ‚Ñ≥ M in
        apply-n n D‚Ä≤ As
‚Ñ≥ (L Àô M) = (‚Ñ≥ L) ‚óè (‚Ñ≥ M)

{-

  A lower-level intermediate language that represents
  closures as tuples.

-}

data IR2Op : Set where
  ir2-fun : ‚Ñï ‚Üí IR2Op
  tuple-nil : IR2Op
  tuple-cons : IR2Op
  ir2-car : IR2Op
  ir2-cdr : IR2Op
  ir2-app : IR2Op
  ir2-lit : (p : Prim) ‚Üí rep p ‚Üí IR2Op

IR2-sig : IR2Op ‚Üí List ‚Ñï
IR2-sig (ir2-fun n) = n ‚à∑ []
IR2-sig tuple-nil = []
IR2-sig tuple-cons = 0 ‚à∑ 0 ‚à∑ []
IR2-sig ir2-car = 0 ‚à∑ []
IR2-sig ir2-cdr = 0 ‚à∑ []
IR2-sig ir2-app = 0 ‚à∑ 0 ‚à∑ []
IR2-sig (ir2-lit p k) = []

module IR2Mod = Syntax.OpSig IR2Op IR2-sig
open IR2Mod
   renaming (ABT to IR2; Arg to Arg2; `_ to ¬¥_; _‚¶Ö_‚¶Ü to ir2-node; cons to ir2-cons; nil to ir2-nil;
      ast to ir2-ast; bind to ir2-bind)

pattern ! p k = ir2-node (ir2-lit p k) ir2-nil
pattern ùëì n N = ir2-node (ir2-fun n) (ir2-cons N ir2-nil)
pattern _‚àô_ L M = ir2-node ir2-app (ir2-cons (ir2-ast L) (ir2-cons (ir2-ast M) ir2-nil))
pattern „Äà„Äâ = ir2-node tuple-nil ir2-nil
pattern pair L M = ir2-node tuple-cons (ir2-cons (ir2-ast L) (ir2-cons (ir2-ast M) ir2-nil))
pattern car M = ir2-node ir2-car (ir2-cons (ir2-ast M) ir2-nil)
pattern cdr M = ir2-node ir2-cdr (ir2-cons (ir2-ast M) ir2-nil)

‚ü¨_,_‚ü≠ : Denotation ‚Üí Denotation ‚Üí Denotation
‚ü¨_,_‚ü≠ D‚ÇÅ D‚ÇÇ Œ≥ ‚ä• = False
‚ü¨_,_‚ü≠ D‚ÇÅ D‚ÇÇ Œ≥ (const k) = False
‚ü¨_,_‚ü≠ D‚ÇÅ D‚ÇÇ Œ≥ (v‚ÇÅ ‚Ü¶ v‚ÇÇ) = const 0 ‚äë v‚ÇÅ √ó D‚ÇÅ Œ≥ v‚ÇÇ ‚äé const 1 ‚äë v‚ÇÅ √ó D‚ÇÇ Œ≥ v‚ÇÇ
‚ü¨_,_‚ü≠ D‚ÇÅ D‚ÇÇ Œ≥ (v‚ÇÅ ‚äî v‚ÇÇ) = ‚ü¨ D‚ÇÅ , D‚ÇÇ ‚ü≠ Œ≥ v‚ÇÅ √ó ‚ü¨ D‚ÇÅ , D‚ÇÇ ‚ü≠ Œ≥ v‚ÇÇ

œÄ‚ÇÅ : Denotation ‚Üí Denotation
œÄ‚ÇÅ D = D ‚óè (Œª Œ≥ v ‚Üí ‚Ñò {base Nat} 0 v)

œÄ‚ÇÇ : Denotation ‚Üí Denotation
œÄ‚ÇÇ D = D ‚óè (Œª Œ≥ v ‚Üí ‚Ñò {base Nat} 1 v)

‚Ñí : IR2 ‚Üí Denotation
‚Ñí (! P k) Œ≥ v = ‚Ñò {P} k v
‚Ñí (¬¥ x) Œ≥ v = (v ‚äë Œ≥ x)
‚Ñí (ùëì n bN) = curry-n n bN
    where
    curry-n : (n : ‚Ñï) ‚Üí Arg2 n ‚Üí Denotation
    curry-n 0 (ir2-ast N) = ‚Ñí N
    curry-n (suc n) (ir2-bind bN) = ‚Ñ± (curry-n n bN)
‚Ñí (L ‚àô M) = (‚Ñí L) ‚óè (‚Ñí M)
‚Ñí „Äà„Äâ Œ≥ v = v ‚äë ‚ä•
‚Ñí (pair L M) = ‚ü¨ ‚Ñí L , ‚Ñí M ‚ü≠
‚Ñí (car M) = œÄ‚ÇÅ (‚Ñí M)
‚Ñí (cdr M) = œÄ‚ÇÇ (‚Ñí M)
