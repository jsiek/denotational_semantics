module ClosureConversion where

open import Variables public
open import Primitives
open import ISWIM

open import Data.Bool using (Bool; true; false; _‚à®_)
open import Data.Empty using (‚ä•-elim) renaming (‚ä• to False)
open import Data.List using (List; []; _‚à∑_; _++_; length; replicate)
open import Data.Nat using (‚Ñï; zero; suc; _‚â§_; _<_; _‚âü_; s‚â§s)
open import Data.Nat.Properties
  using (‚â§-refl; ‚â§-trans; n‚â§1+n; +-identity ≥; ‚â§-step)
open import Data.Product using (_√ó_; Œ£; Œ£-syntax; ‚àÉ; ‚àÉ-syntax; proj‚ÇÅ; proj‚ÇÇ)
  renaming (_,_ to ‚ü®_,_‚ü©)
open import Data.Sum using (_‚äé_; inj‚ÇÅ; inj‚ÇÇ)
open import Data.Unit using (tt) renaming (‚ä§ to True)
open import Relation.Binary.PropositionalEquality
  using (_‚â°_; _‚â¢_; refl; sym; cong; cong‚ÇÇ; inspect; [_])
open Relation.Binary.PropositionalEquality.‚â°-Reasoning
  using (begin_; _‚â°‚ü®‚ü©_; _‚â°‚ü®_‚ü©_; _‚àé)
open import Relation.Nullary using (Dec; yes; no)

import Syntax3
open import ValueConst
open import ValueStructAux value_struct
open import OrderingAux value_struct ordering
open import Consistency
open import ConsistentAux value_struct ordering consistent
open import CurryConst
open import ModelCurryConst
open import ModelCallByValue value_struct ordering consistent ‚Ñ± model_curry

{-

  Target intermediate language of closure conversion

-}

data IROp : Set where
  fun : ‚Ñï ‚Üí IROp   {- number of parameters -}
  close : ‚Ñï ‚Üí IROp
  ir-app : IROp
  ir-lit : (p : Prim) ‚Üí rep p ‚Üí IROp

IR-sig : IROp ‚Üí List ‚Ñï
IR-sig (fun n) = n ‚à∑ []
IR-sig (close n) = replicate (suc n) 0
IR-sig ir-app = 0 ‚à∑ 0 ‚à∑ []
IR-sig (ir-lit p k) = []

module IRMod = Syntax3 IROp IR-sig
open IRMod renaming (AST to IR; `_ to ^_; _‚¶Ö_‚¶Ü to node; cons to ir-cons;
   nil to ir-nil; ast to ir-ast; bind to ir-bind; rename to ir-rename) public
open IRMod using (_‚Ä¢_; _‚®ü_; ‚Üë; exts-cons-shift; bind-ast)

pattern # p k = node (ir-lit p k) ir-nil 
pattern ∆ë n N = node (fun n) (ir-cons N ir-nil)
pattern ‚ü™_,_,_‚ü´ n f fvs = node (close n) (ir-cons (ir-ast f) fvs)
pattern _Àô_ L M = node ir-app (ir-cons (ir-ast L) (ir-cons (ir-ast M) ir-nil))

FV : ‚àÄ{Œì} ‚Üí Term Œì ‚Üí Var Œì ‚Üí Bool
FV {Œì} (` x) y
    with x var‚âü y
... | yes _ = true
... | no _ = false
FV {Œì} (∆õ N) y = FV N (S y)
FV {Œì} (L ¬∑ M) y = FV L y ‚à® FV M y
FV {Œì} ($ p k) y = false

FV‚Ä≤ : ‚àÄ{Œì} ‚Üí Term Œì ‚Üí Var Œì ‚Üí List (Var Œì)
FV‚Ä≤ {Œì} M x
    with FV M x
... | true = x ‚à∑ []
... | false = []

FVs : ‚àÄ{Œì} ‚Üí (n : ‚Ñï) ‚Üí (lt : suc n ‚â§ Œì) ‚Üí Term Œì ‚Üí List (Var Œì)
FVs {Œì} zero lt M = FV‚Ä≤ M (‚Ñï‚Üívar zero lt)
FVs {Œì} (suc n) lt M =
  let ih = FVs n (‚â§-trans (n‚â§1+n (suc n)) lt) M in
  FV‚Ä≤ M (‚Ñï‚Üívar (suc n) lt) ++ ih

weaken-var : ‚àÄ{Œî} ‚Üí Var Œî ‚Üí Var (suc Œî)
weaken-var Z = Z
weaken-var (S x) = S (weaken-var x)

pos-var : ‚àÄ{Œì} ‚Üí Var Œì ‚Üí Set
pos-var {.(suc _)} Z = False
pos-var {.(suc _)} (S x) = True

prev-var : ‚àÄ{Œì} ‚Üí (x : Var (suc Œì)) ‚Üí {nz : pos-var x} ‚Üí Var Œì
prev-var {Œì} Z {()}
prev-var {Œì} (S x) {nz} = x

strengthen-var : ‚àÄ{Œî} ‚Üí (x : Var (suc Œî)) ‚Üí Var Œî ‚äé (x ‚â° ‚Ñï‚Üívar Œî ‚â§-refl )
strengthen-var {zero} Z = inj‚ÇÇ refl
strengthen-var {zero} (S ())
strengthen-var {suc Œî} Z = inj‚ÇÅ Z
strengthen-var {suc Œî} (S x)
    with strengthen-var {Œî} x
... | inj‚ÇÅ x‚Ä≤ = inj‚ÇÅ (S x‚Ä≤)
... | inj‚ÇÇ eq rewrite eq = inj‚ÇÇ refl


pos-var-suc : ‚àÄ{Œì n}{lt} ‚Üí pos-var (‚Ñï‚Üívar {Œì} (suc n) lt)
pos-var-suc {zero} {n} {()}
pos-var-suc {suc Œì} {n} {lt} = tt

{-

  The compressor function produces a renaming for all the
  free variables in Œì, compressing them into suc Œî.
  (We write suc Œî instead of Œî because it is always greater than
  zero.)

-}
  
compressor : ‚àÄ{Œì} ‚Üí (n : ‚Ñï) ‚Üí (lt : n < Œì) ‚Üí Term Œì
           ‚Üí Œ£[ Œî ‚àà ‚Ñï ] Œ£[ œÅ ‚àà Rename Œì (suc Œî) ]
             Œ£[ œÅ-inv ‚àà Rename (suc Œî) Œì ] (‚àÄ{x} ‚Üí pos-var (œÅ-inv (S x)))
compressor {Œì} zero lt M = ‚ü® zero , ‚ü® (Œª x ‚Üí Z) , ‚ü® œÅ-inv lt , (Œª {}) ‚ü© ‚ü© ‚ü©
    where œÅ-inv : 1 ‚â§ Œì ‚Üí Rename 1 Œì
          œÅ-inv (s‚â§s lt) x = Z
compressor {Œì} (suc n) lt M
    with FV M (‚Ñï‚Üívar (suc n) lt)
... | false = compressor {Œì} n (‚â§-trans (n‚â§1+n (suc n)) lt) M
... | true
    with compressor {Œì} n (‚â§-trans (n‚â§1+n (suc n)) lt) M
... | ‚ü® Œî , ‚ü® œÅ , ‚ü® œÅ-inv , nz ‚ü© ‚ü© ‚ü© =
      ‚ü® suc Œî , ‚ü® œÅ‚Ä≤ , ‚ü® œÅ‚Ä≤-inv , G ‚ü© ‚ü© ‚ü©
    where
    œÅ‚Ä≤ : Rename Œì (suc (suc Œî))
    œÅ‚Ä≤ x
        with x var‚âü ‚Ñï‚Üívar (suc n) lt
    ... | yes eq = ‚Ñï‚Üívar (suc Œî) ‚â§-refl
    ... | no neq = weaken-var (œÅ x)
    
    œÅ‚Ä≤-inv : Rename (suc (suc Œî)) Œì
    œÅ‚Ä≤-inv y
        with strengthen-var y
    ... | inj‚ÇÅ y‚Ä≤ = œÅ-inv y‚Ä≤
    ... | inj‚ÇÇ eq rewrite eq = ‚Ñï‚Üívar (suc n) lt

    G : ‚àÄ{x : Var (suc Œî)} ‚Üí pos-var (œÅ‚Ä≤-inv (S x))
    G {x}
        with strengthen-var x
    ... | inj‚ÇÅ x‚Ä≤ = nz
    ... | inj‚ÇÇ eq rewrite eq = pos-var-suc

{-

 Closure conversion 

 -}


convert-clos : ‚àÄ{Œì} ‚Üí Term Œì ‚Üí IR Œì
convert-clos (` x) = ^ x
convert-clos {Œì} (∆õ N)
    with compressor {suc Œì} Œì ‚â§-refl N
... | ‚ü® Œî , ‚ü® œÅ , ‚ü® œÅ-inv , pos ‚ü© ‚ü© ‚ü©
    with ir-rename œÅ (convert-clos N)
... | N‚Ä≤ =
    {-
    Œî is the number of free variables, not counting the 0 variable.
    If there are no free variables in N then Œî = 0.
    Those variables have index 1, 2, ..., Œî

    œÅ maps from suc Œì to suc Œî
    œÅ-inv maps from suc Œî to suc Œì
    -}
    let f = ir-rename œÅ‚Ä≤ (∆ë (suc Œî) (N‚Ä≤‚Ä≤ N‚Ä≤)) in
    ‚ü™ Œî , f , free-vars {Œî} {‚â§-refl} ‚ü´
    
    where
    N‚Ä≤‚Ä≤ : IR (suc Œî) ‚Üí Arg 0 (suc Œî)
    N‚Ä≤‚Ä≤ N‚Ä≤ rewrite sym (+-identity ≥ Œî)        {- ugh! -}
        with bind-ast {0} (suc Œî) N‚Ä≤
    ... | x rewrite +-identity ≥ Œî = x

    œÅ‚Ä≤ : Rename 0 Œì
    œÅ‚Ä≤ ()

    free-vars : ‚àÄ{n : ‚Ñï}{lt : n ‚â§ Œî}
              ‚Üí Args Œì (replicate n 0)
    free-vars {zero} {lt} = ir-nil
    free-vars {suc n} {s‚â§s {n = Œî‚Ä≤} lt} =     {- Œî = suc Œî‚Ä≤ -}
       let y : Var (suc Œì)
           y = œÅ-inv (‚Ñï‚Üívar {suc Œî} (suc n) (s‚â§s (s‚â§s lt))) in
       ir-cons (ir-ast (^ (prev-var y {pos}))) (free-vars {n} {‚â§-step lt})
convert-clos (L ¬∑ M) =
   let L‚Ä≤ = convert-clos L in
   let M‚Ä≤ = convert-clos M in
   L‚Ä≤ Àô M‚Ä≤
convert-clos ($ p k) = # p k

{-

 Semantics of the target language

 -}


‚Ñ≥ : ‚àÄ{Œì} ‚Üí IR Œì ‚Üí Denotation Œì
‚Ñ≥ (# P k) Œ≥ v = ‚Ñò {P} k v
‚Ñ≥ {Œì} (^ x) Œ≥ v = v ‚äë Œ≥ x
‚Ñ≥ {Œì} (∆ë n bN) =
    curry-n n bN
    where
    curry-n : ‚àÄ{Œì} ‚Üí (n : ‚Ñï) ‚Üí Arg Œì n ‚Üí Denotation Œì
    curry-n {Œì} 0 (ir-ast N) = ‚Ñ≥ N
    curry-n {Œì} (suc n) (ir-bind bN) =
      ‚Ñ± (curry-n {suc Œì} n bN)
‚Ñ≥ {Œì} ‚ü™ n , L , As ‚ü´ =
    apply-n n (‚Ñ≥ {Œì} L) As
    where
    apply-n : (n : ‚Ñï) ‚Üí Denotation Œì ‚Üí Args Œì (replicate n 0) ‚Üí Denotation Œì
    apply-n zero D ir-nil = D
    apply-n (suc n) D (ir-cons (ir-ast M) As) =
        let D‚Ä≤ = D ‚óè ‚Ñ≥ {Œì} M in
        apply-n n D‚Ä≤ As
‚Ñ≥ {Œì} (L Àô M) = (‚Ñ≥ L) ‚óè (‚Ñ≥ M)

{-

  A lower-level intermediate language that represents
  closures as tuples.

-}

data IR2Op : Set where
  ir2-fun : ‚Ñï ‚Üí IR2Op
  tuple-nil : IR2Op
  tuple-cons : IR2Op
  ir2-car : IR2Op
  ir2-cdr : IR2Op
  ir2-app : IR2Op
  ir2-lit : (p : Prim) ‚Üí rep p ‚Üí IR2Op

IR2-sig : IR2Op ‚Üí List ‚Ñï
IR2-sig (ir2-fun n) = n ‚à∑ []
IR2-sig tuple-nil = []
IR2-sig tuple-cons = 0 ‚à∑ 0 ‚à∑ []
IR2-sig ir2-car = 0 ‚à∑ []
IR2-sig ir2-cdr = 0 ‚à∑ []
IR2-sig ir2-app = 0 ‚à∑ 0 ‚à∑ []
IR2-sig (ir2-lit p k) = []

module IR2Mod = Syntax3 IR2Op IR2-sig
open IR2Mod
   renaming (AST to IR2; Arg to Arg2; `_ to ¬¥_; _‚¶Ö_‚¶Ü to ir2-node; cons to ir2-cons; nil to ir2-nil;
      ast to ir2-ast; bind to ir2-bind)

pattern ! p k = ir2-node (ir2-lit p k) ir2-nil
pattern ùëì n N = ir2-node (ir2-fun n) (ir2-cons N ir2-nil)
pattern _‚àô_ L M = ir2-node ir2-app (ir2-cons (ir2-ast L) (ir2-cons (ir2-ast M) ir2-nil))
pattern „Äà„Äâ = ir2-node tuple-nil ir2-nil
pattern pair L M = ir2-node tuple-cons (ir2-cons (ir2-ast L) (ir2-cons (ir2-ast M) ir2-nil))
pattern car M = ir2-node ir2-car (ir2-cons (ir2-ast M) ir2-nil)
pattern cdr M = ir2-node ir2-cdr (ir2-cons (ir2-ast M) ir2-nil)

‚ü¨_,_‚ü≠ : ‚àÄ{Œì} ‚Üí Denotation Œì ‚Üí Denotation Œì ‚Üí Denotation Œì
‚ü¨_,_‚ü≠ {Œì} D‚ÇÅ D‚ÇÇ Œ≥ ‚ä• = False
‚ü¨_,_‚ü≠ {Œì} D‚ÇÅ D‚ÇÇ Œ≥ (const k) = False
‚ü¨_,_‚ü≠ {Œì} D‚ÇÅ D‚ÇÇ Œ≥ (v‚ÇÅ ‚Ü¶ v‚ÇÇ) = const 0 ‚äë v‚ÇÅ √ó D‚ÇÅ Œ≥ v‚ÇÇ ‚äé const 1 ‚äë v‚ÇÅ √ó D‚ÇÇ Œ≥ v‚ÇÇ
‚ü¨_,_‚ü≠ {Œì} D‚ÇÅ D‚ÇÇ Œ≥ (v‚ÇÅ ‚äî v‚ÇÇ) = ‚ü¨ D‚ÇÅ , D‚ÇÇ ‚ü≠ Œ≥ v‚ÇÅ √ó ‚ü¨ D‚ÇÅ , D‚ÇÇ ‚ü≠ Œ≥ v‚ÇÇ

œÄ‚ÇÅ : ‚àÄ{Œì} ‚Üí Denotation Œì ‚Üí Denotation Œì
œÄ‚ÇÅ {Œì} D = D ‚óè (Œª Œ≥ v ‚Üí ‚Ñò {base Nat} 0 v)

œÄ‚ÇÇ : ‚àÄ{Œì} ‚Üí Denotation Œì ‚Üí Denotation Œì
œÄ‚ÇÇ {Œì} D = D ‚óè (Œª Œ≥ v ‚Üí ‚Ñò {base Nat} 1 v)

‚Ñí : ‚àÄ{Œì} ‚Üí IR2 Œì ‚Üí Denotation Œì
‚Ñí (! P k) Œ≥ v = ‚Ñò {P} k v
‚Ñí (¬¥ x) Œ≥ v = (v ‚äë Œ≥ x)
‚Ñí (ùëì n bN) = curry-n n bN
    where
    curry-n : ‚àÄ{Œì} ‚Üí (n : ‚Ñï) ‚Üí Arg2 Œì n ‚Üí Denotation Œì
    curry-n {Œì} 0 (ir2-ast N) = ‚Ñí N
    curry-n {Œì} (suc n) (ir2-bind bN) =
      ‚Ñ± (curry-n {suc Œì} n bN)
‚Ñí (L ‚àô M) = (‚Ñí L) ‚óè (‚Ñí M)
‚Ñí „Äà„Äâ Œ≥ v = v ‚äë ‚ä•
‚Ñí (pair L M) = ‚ü¨ ‚Ñí L , ‚Ñí M ‚ü≠
‚Ñí (car M) = œÄ‚ÇÅ (‚Ñí M)
‚Ñí (cdr M) = œÄ‚ÇÇ (‚Ñí M)
