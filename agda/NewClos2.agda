{-# OPTIONS --allow-unsolved-metas #-}

module NewClos2 where
{-
 This intermediate semantics surrounds abstractions with 
   nested bindings wrapped and a "clear" ‚àÅ to enclose the term.
 It uses "early application", which acts more like a nested let binding.
 This semantics is after the 'enclose' pass,
   is before and after the 'optimize' pass,
   and before the 'concretize/uncurry' pass.
-}

open import Utilities using (_iff_)
open import Primitives
open import ScopedTuple hiding (ùí´)
open import NewSigUtil
open import NewDOpSig
open import Utilities using (extensionality)
open import SetsAsPredicates
open import NewDenotProperties
open import NewDOp
open import Syntax using (Sig; ext; ‚àÅ; ŒΩ; ‚ñ†; Var; _‚Ä¢_; ‚Üë; id; _‚®ü_) public

open import Data.Empty renaming (‚ä• to Bot)
open import Data.Nat using (‚Ñï; zero; suc; _+_; _<_)
open import Data.Nat.Properties using (+-suc)
open import Data.List using (List; []; _‚à∑_; replicate)
open import Data.Product
   using (_√ó_; Œ£; Œ£-syntax; ‚àÉ; ‚àÉ-syntax; proj‚ÇÅ; proj‚ÇÇ) renaming (_,_ to ‚ü®_,_‚ü©)
open import Data.Unit using (‚ä§; tt)
open import Data.Unit.Polymorphic using () renaming (tt to ptt; ‚ä§ to pTrue)
open import Level renaming (zero to lzero; suc to lsuc)
import Relation.Binary.PropositionalEquality as Eq
open Eq using (_‚â°_; _‚â¢_; refl; sym; cong; cong‚ÇÇ; cong-app)
open Eq.‚â°-Reasoning

{- Syntax ---------------------------------------------------------------------}

data Op : Set where
  clos-op : ‚Ñï ‚Üí Op
  app : Op
  lit : (B : Base) ‚Üí (k : base-rep B) ‚Üí Op
  pair-op : Op
  fst-op : Op
  snd-op : Op
  tuple : ‚Ñï ‚Üí Op
  get : ‚Ñï ‚Üí Op
  inl-op : Op
  inr-op : Op
  case-op : Op

sig : Op ‚Üí List Sig
sig (clos-op n) = ‚àÅ (ŒΩ-n n (ŒΩ ‚ñ†)) ‚à∑ (replicate n ‚ñ†)
sig app = ‚ñ† ‚à∑ ‚ñ† ‚à∑ []
sig (lit B k) = []
sig pair-op = ‚ñ† ‚à∑ ‚ñ† ‚à∑ []
sig fst-op = ‚ñ† ‚à∑ []
sig snd-op = ‚ñ† ‚à∑ []
sig (tuple n) = replicate n ‚ñ†
sig (get i) = ‚ñ† ‚à∑ []
sig inl-op = ‚ñ† ‚à∑ []
sig inr-op = ‚ñ† ‚à∑ []
sig case-op = ‚ñ† ‚à∑ ŒΩ ‚ñ† ‚à∑ ŒΩ ‚ñ† ‚à∑ []

module ASTMod = Syntax.OpSig Op sig
open ASTMod using (`_; _‚¶Ö_‚¶Ü; Subst; Ctx; plug; rename; 
                   ‚ü™_‚ü´; _[_]; subst-zero; clear; bind; ast; cons; nil;
                   Arg; Args;
                   rename-id; exts-cons-shift; WF; WF-Ctx; ctx-depth;
                   WF-op; WF-cons; WF-nil; WF-ast; WF-bind; WF-var;
                   COp; CAst; CBind; ccons; tcons; append‚Çä)
            renaming (ABT to AST) public


DApp-n : ‚àÄ (n : ‚Ñï) b ‚Üí DFun (ùí´ Value) (ŒΩ-n n b ‚à∑ replicate n ‚ñ†) b
DApp-n zero b ‚ü® ùíª , ptt ‚ü© = ùíª
DApp-n (suc n) b ‚ü® ùíª , ‚ü® D , Ds ‚ü© ‚ü© = DApp-n n b ‚ü® (ùíª D) , Ds ‚ü©

DApp-n-mono : ‚àÄ n b ‚Üí monotone (ŒΩ-n n b ‚à∑ replicate n ‚ñ†) b (DApp-n n b)
DApp-n-mono zero b ‚ü® F , Ds ‚ü© ‚ü® F' , Ds' ‚ü© ‚ü® F‚äÜ , Ds‚äÜ ‚ü© = F‚äÜ
DApp-n-mono (suc n) b ‚ü® F , ‚ü® D , Ds ‚ü© ‚ü© ‚ü® F' , ‚ü® D' , Ds' ‚ü© ‚ü© ‚ü® F‚äÜ , ‚ü® D‚äÜ , Ds‚äÜ ‚ü© ‚ü© = 
  DApp-n-mono n b ‚ü® F D , Ds ‚ü© ‚ü® F' D' , Ds' ‚ü© ‚ü® F‚äÜ D D' (lower D‚äÜ) , Ds‚äÜ ‚ü©

DApp-n-consis : ‚àÄ n b ‚Üí consistent _~_ (ŒΩ-n n b ‚à∑ replicate n ‚ñ†) b (DApp-n n b)
DApp-n-consis zero b ‚ü® F , Ds ‚ü© ‚ü® F' , Ds' ‚ü© ‚ü® F~ , Ds~ ‚ü© = F~
DApp-n-consis (suc n) b ‚ü® F , ‚ü® D , Ds ‚ü© ‚ü© ‚ü® F' , ‚ü® D' , Ds' ‚ü© ‚ü© ‚ü® F~ , ‚ü® D~ , Ds~ ‚ü© ‚ü© = 
  DApp-n-consis n b ‚ü® F D , Ds ‚ü© ‚ü® F' D' , Ds' ‚ü© ‚ü® F~ D D' (lower D~) , Ds~ ‚ü©

ùïÜ-Clos2 : DOpSig (ùí´ Value) sig
ùïÜ-Clos2 (clos-op n) ‚ü® F , Ds ‚ü© = ùíú n ‚ü® Œõ ‚ü® DApp-n n (ŒΩ ‚ñ†) ‚ü® F , Ds ‚ü© , ptt ‚ü© , Ds ‚ü©
ùïÜ-Clos2 app = ‚ãÜ
ùïÜ-Clos2 (lit B k) = ‚Ñ¨ B k
ùïÜ-Clos2 pair-op = pair
ùïÜ-Clos2 fst-op = car
ùïÜ-Clos2 snd-op = cdr
ùïÜ-Clos2 (tuple n) = ùíØ n
ùïÜ-Clos2 (get i) = proj i
ùïÜ-Clos2 inl-op = ‚Ñí
ùïÜ-Clos2 inr-op = ‚Ñõ
ùïÜ-Clos2 case-op = ùíû-new


ùïÜ-Clos2-mono : ùïÜ-monotone sig ùïÜ-Clos2
ùïÜ-Clos2-mono (clos-op n) ‚ü® F , Ds ‚ü© ‚ü® F' , Ds' ‚ü© ‚ü® F‚äÜ , Ds‚äÜ ‚ü© =
  ùíú-mono n ‚ü® Œõ ‚ü® DApp-n n (ŒΩ ‚ñ†) ‚ü® F , Ds ‚ü© , ptt ‚ü© , Ds ‚ü©  
           ‚ü® Œõ ‚ü® DApp-n n (ŒΩ ‚ñ†) ‚ü® F' , Ds' ‚ü© , ptt ‚ü© , Ds' ‚ü© 
           ‚ü® Œõ-mono ‚ü® DApp-n n (ŒΩ ‚ñ†) ‚ü® F , Ds ‚ü© , ptt ‚ü© 
                    ‚ü® DApp-n n (ŒΩ ‚ñ†) ‚ü® F' , Ds' ‚ü© , ptt ‚ü© 
                    ‚ü® DApp-n-mono n (ŒΩ ‚ñ†) ‚ü® F , Ds ‚ü© ‚ü® F' , Ds' ‚ü© ‚ü® F‚äÜ , Ds‚äÜ ‚ü© , ptt ‚ü© , Ds‚äÜ ‚ü©
ùïÜ-Clos2-mono app = ‚ãÜ-mono
ùïÜ-Clos2-mono (lit B k) _ _ _ = lift Œª d x ‚Üí x
ùïÜ-Clos2-mono pair-op = pair-mono
ùïÜ-Clos2-mono fst-op = car-mono
ùïÜ-Clos2-mono snd-op = cdr-mono
ùïÜ-Clos2-mono (tuple x) = ùíØ-mono x
ùïÜ-Clos2-mono (get x) = proj-mono x
ùïÜ-Clos2-mono inl-op = ‚Ñí-mono
ùïÜ-Clos2-mono inr-op = ‚Ñõ-mono
ùïÜ-Clos2-mono case-op = ùíû-new-mono

ùïÜ-Clos2-consis : ùïÜ-consistent _~_ sig ùïÜ-Clos2
ùïÜ-Clos2-consis (clos-op n) ‚ü® F , Ds ‚ü© ‚ü® F' , Ds' ‚ü© ‚ü® F~ , Ds~ ‚ü© =
  ùíú-consis n ‚ü® Œõ ‚ü® DApp-n n (ŒΩ ‚ñ†) ‚ü® F , Ds ‚ü© , ptt ‚ü© , Ds ‚ü©  
           ‚ü® Œõ ‚ü® DApp-n n (ŒΩ ‚ñ†) ‚ü® F' , Ds' ‚ü© , ptt ‚ü© , Ds' ‚ü© 
           ‚ü® Œõ-consis ‚ü® DApp-n n (ŒΩ ‚ñ†) ‚ü® F , Ds ‚ü© , ptt ‚ü© 
                    ‚ü® DApp-n n (ŒΩ ‚ñ†) ‚ü® F' , Ds' ‚ü© , ptt ‚ü© 
                    ‚ü® DApp-n-consis n (ŒΩ ‚ñ†) ‚ü® F , Ds ‚ü© ‚ü® F' , Ds' ‚ü© ‚ü® F~ , Ds~ ‚ü© , ptt ‚ü© , Ds~ ‚ü©
ùïÜ-Clos2-consis app = ‚ãÜ-consis
ùïÜ-Clos2-consis (lit B k) = ‚Ñ¨-consis B k
ùïÜ-Clos2-consis pair-op = pair-consis
ùïÜ-Clos2-consis fst-op = car-consis
ùïÜ-Clos2-consis snd-op = cdr-consis
ùïÜ-Clos2-consis (tuple n) = ùíØ-consis n
ùïÜ-Clos2-consis (get i) = proj-consis i
ùïÜ-Clos2-consis inl-op = ‚Ñí-consis
ùïÜ-Clos2-consis inr-op = ‚Ñõ-consis
ùïÜ-Clos2-consis case-op = ùíû-new-consis

{-
interp-op1  : (op : Op) ‚Üí Tuple (sig op) (Result (ùí´ Value)) ‚Üí ùí´ Value
interp-op1 (clos-op n) ‚ü® F , Ds ‚ü© =
    (Œõ Œª X ‚Üí Œõ‚Ä≤ (ùíØ n Ds) Œª Y ‚Üí F X Y) ‚ñ™ (ùíØ n Ds)
interp-op1 app ‚ü® D‚ÇÅ , ‚ü® D‚ÇÇ , _ ‚ü© ‚ü© = D‚ÇÅ ‚ñ™ D‚ÇÇ
interp-op1 (lit B k) _ = ‚Ñ¨ B k
interp-op1 pair-op ‚ü® D‚ÇÅ , ‚ü® D‚ÇÇ , _ ‚ü© ‚ü© = „Äò D‚ÇÅ , D‚ÇÇ „Äô
interp-op1 fst-op ‚ü® D , _ ‚ü©  = car D
interp-op1 snd-op ‚ü® D , _ ‚ü© = cdr D
interp-op1 (tuple n) results = ùíØ n results
interp-op1 (get i) ‚ü® D , _ ‚ü© = proj D i
interp-op1 inl-op ‚ü® D , _ ‚ü© = ‚Ñí D
interp-op1 inr-op ‚ü® D , _ ‚ü© = ‚Ñõ D
interp-op1 case-op ‚ü® D , ‚ü® E , ‚ü® F , _ ‚ü© ‚ü© ‚ü© = ùíû D (Œõ E) (Œõ F)


Term : Set
Term = AST

pattern clos n N fvs = (clos-op n) ‚¶Ö cons (clear (bind (bind (ast N)))) fvs ‚¶Ü

infixl 7  _¬∑_
pattern _¬∑_ L M = app ‚¶Ö cons (ast L) (cons (ast M) nil) ‚¶Ü

pattern $ B k = lit B k ‚¶Ö nil ‚¶Ü

pattern pair L M = pair-op ‚¶Ö cons (ast L) (cons (ast M) nil) ‚¶Ü
pattern fst M = fst-op ‚¶Ö cons (ast M) nil ‚¶Ü
pattern snd M = snd-op ‚¶Ö cons (ast M) nil ‚¶Ü

pattern _‚ù≤_‚ù≥ M i = (get i) ‚¶Ö cons (ast M) nil ‚¶Ü

pattern inl M = inl-op ‚¶Ö cons (ast M) nil ‚¶Ü
pattern inr M = inr-op ‚¶Ö cons (ast M) nil ‚¶Ü
pattern case L M N = case-op ‚¶Ö cons (ast L) (cons (bind (ast M)) (cons (bind (ast N)) nil)) ‚¶Ü

open import Fold2 Op sig
open import SemanticPropertiesAnnot Op sig



mono-op1 : {op : Op} {xs ys : Tuple (sig op) (Result (ùí´ Value))}
   ‚Üí ‚äÜ-results (sig op) xs ys ‚Üí interp-op1 op xs ‚äÜ interp-op1 op ys
mono-op1 {clos-op n} {‚ü® f , fvs‚ÇÅ ‚ü© } {‚ü® g , fvs‚ÇÇ ‚ü©} ‚ü® f‚äÜg , fvs‚äÜ ‚ü© = {!!}
{-
    ‚ñ™-mono-‚äÜ (Œõ-ext-‚äÜ Œª {X} ‚Üí Œõ-ext-‚äÜ Œª {Y} ‚Üí lower (f‚äÜg X Y))
             (ùíØ-mono-‚äÜ (rel-results‚áírel-‚àè ‚äÜ-result‚áí‚äÜ fvs‚äÜ)) 
-}
mono-op1 {app} {‚ü® a , ‚ü® b , _ ‚ü© ‚ü©} {‚ü® c , ‚ü® d , _ ‚ü© ‚ü©} ‚ü® a<c , ‚ü® b<d , _ ‚ü© ‚ü© =
    ‚ñ™-mono-‚äÜ (lower a<c) (lower b<d)
mono-op1 {lit B k} {xs} {ys} xs‚äÜys d d‚ààk = d‚ààk
mono-op1 {pair-op} {‚ü® D‚ÇÅ , ‚ü® D‚ÇÇ , _ ‚ü© ‚ü©} {‚ü® E‚ÇÅ , ‚ü® E‚ÇÇ , _ ‚ü© ‚ü©}
    ‚ü® lift D‚ÇÅ‚äÜE‚ÇÅ , ‚ü® lift D‚ÇÇ‚äÜE‚ÇÇ , _ ‚ü© ‚ü© = cons-mono-‚äÜ D‚ÇÅ‚äÜE‚ÇÅ D‚ÇÇ‚äÜE‚ÇÇ
mono-op1 {fst-op} {‚ü® D , _ ‚ü©} {‚ü® E , _ ‚ü©} ‚ü® lift D‚äÜE , _ ‚ü© = car-mono-‚äÜ D‚äÜE 
mono-op1 {snd-op} {‚ü® D , _ ‚ü©} {‚ü® E , _ ‚ü©} ‚ü® lift D‚äÜE , _ ‚ü© = cdr-mono-‚äÜ D‚äÜE 
mono-op1 {tuple n} {args‚ÇÅ}{args‚ÇÇ} IHs =
    ùíØ-mono-‚äÜ (rel-results‚áírel-‚àè ‚äÜ-result‚áí‚äÜ IHs)
mono-op1 {get i} {‚ü® D , _ ‚ü©} {‚ü® E , _ ‚ü©} ‚ü® lift D‚äÜE , _ ‚ü© = proj-mono-‚äÜ D‚äÜE
mono-op1 {inl-op} {‚ü® D , _ ‚ü©} {‚ü® E , _ ‚ü©} ‚ü® lift D‚äÜE , _ ‚ü© = ‚Ñí-mono-‚äÜ D‚äÜE
mono-op1 {inr-op} {‚ü® D , _ ‚ü©} {‚ü® E , _ ‚ü©} ‚ü® lift D‚äÜE , _ ‚ü© = ‚Ñõ-mono-‚äÜ D‚äÜE
mono-op1 {case-op} {‚ü® D‚ÇÅ , ‚ü® f‚ÇÅ , ‚ü® g‚ÇÅ , _ ‚ü© ‚ü© ‚ü©}
                  {‚ü® D‚ÇÇ , ‚ü® f‚ÇÇ , ‚ü® g‚ÇÇ , _ ‚ü© ‚ü© ‚ü©}
                  ‚ü® lift D‚ÇÅ‚äÜD‚ÇÇ , ‚ü® f‚ÇÅ‚äÜf‚ÇÇ , ‚ü® g‚ÇÅ‚äÜg‚ÇÇ , _ ‚ü© ‚ü© ‚ü© =
    ùíû-mono-‚äÜ D‚ÇÅ‚äÜD‚ÇÇ (Œª X ‚Üí lower (f‚ÇÅ‚äÜf‚ÇÇ X)) (Œª X ‚Üí lower (g‚ÇÅ‚äÜg‚ÇÇ X))

instance
  ISWIMClos-Semantics : Semantics
  ISWIMClos-Semantics = record { interp-op = interp-op1 ;
                                 mono-op = Œª {op} ‚Üí mono-op1 {op} }
open Semantics {{...}} public

‚ü¶‚üß-clos : ‚àÄ{n}{N : Term}{fvs : Args (replicate n ‚ñ†)}{œÅ : Env}
  ‚Üí ‚ü¶ clos n N fvs ‚üß œÅ ‚â°
         (Œõ Œª D ‚Üí Œõ‚Ä≤ (ùíØ n (‚ü¶ fvs ‚üß‚Çä œÅ)) Œª E ‚Üí ‚ü¶ N ‚üß (E ‚Ä¢ D ‚Ä¢ (Œª x ‚Üí init)))
             ‚ñ™ (ùíØ n (‚ü¶ fvs ‚üß‚Çä œÅ))
‚ü¶‚üß-clos = refl

cont-op2 : ‚àÄ{op}{œÅ}{NE-œÅ}{v}{args}
   ‚Üí v ‚àà ‚ü¶ op ‚¶Ö args ‚¶Ü ‚üß œÅ
   ‚Üí all-args (Cont-Env-Arg œÅ NE-œÅ) (sig op) args
   ‚Üí Œ£[ œÅ‚Ä≤ ‚àà Env ] finite-env œÅ‚Ä≤ √ó œÅ‚Ä≤ ‚äÜ‚Çë œÅ √ó v ‚àà (‚ü¶ op ‚¶Ö args ‚¶Ü ‚üß œÅ‚Ä≤)
cont-op2 {clos-op n} {œÅ} {NE-œÅ} {v}
    {cons (clear (bind (bind (ast N)))) fvs}
    ‚ü® V , ‚ü® FVS , ‚ü® ‚ü® v‚ààŒõN , V‚â¢[] ‚ü© , ‚ü® V‚äÜùíØfvs , _ ‚ü© ‚ü© ‚ü© ‚ü©
    ‚ü® IH-N , IH-fvs ‚ü©
    with continuous-‚àà‚áí‚äÜ (Œª œÅ ‚Üí ùíØ n (‚ü¶ fvs ‚üß‚Çä œÅ)) œÅ NE-œÅ
            (‚ü¶‚üß-monotone (tuple n ‚¶Ö fvs ‚¶Ü)) V V‚äÜùíØfvs
            (Œª u _ u‚àà ‚Üí (all-Cont-Env-Arg‚áícont-envs{NE-œÅ = NE-œÅ} IH-fvs) u u‚àà)
... | ‚ü® œÅ‚Ä≤ , ‚ü® fœÅ‚Ä≤ , ‚ü® œÅ‚Ä≤‚äÜœÅ , V‚äÜùíØfvsœÅ‚Ä≤ ‚ü© ‚ü© ‚ü© =
    {!!}
    {-
    ‚ü® œÅ‚Ä≤ , ‚ü® fœÅ‚Ä≤ , ‚ü® œÅ‚Ä≤‚äÜœÅ ,
    ‚ü® V , ‚ü® FVS , ‚ü® ‚ü® v‚ààŒõN , V‚â¢[] ‚ü© , ‚ü® V‚äÜùíØfvsœÅ‚Ä≤ , V‚â¢[] ‚ü© ‚ü© ‚ü© ‚ü© ‚ü© ‚ü© ‚ü©
    -}
cont-op2 {app} {œÅ} {NE-œÅ} {w} {cons (ast L) (cons (ast M) nil)}
    w‚àà‚ü¶L¬∑M‚üßœÅ ‚ü® IH-L , ‚ü® IH-M , _ ‚ü© ‚ü© =
    ‚ñ™-continuous{NE-œÅ = NE-œÅ} w‚àà‚ü¶L¬∑M‚üßœÅ IH-L IH-M (‚ü¶‚üß-monotone L) (‚ü¶‚üß-monotone M)
cont-op2 {lit p x} {œÅ} {NE-œÅ} {v} {nil} v‚àà‚ü¶M‚üßœÅ _ =
    ‚ü® initial-finite-env œÅ NE-œÅ , ‚ü® initial-fin œÅ NE-œÅ ,
    ‚ü® initial-fin-‚äÜ œÅ NE-œÅ ,
      v‚àà‚ü¶M‚üßœÅ ‚ü© ‚ü© ‚ü©
cont-op2 {pair-op}{œÅ}{NE-œÅ}{v}{cons (ast M) (cons (ast N) nil)} v‚àà‚ü¶M‚üßœÅ
    ‚ü® IH-M , ‚ü® IH-N , _ ‚ü© ‚ü© =
    cons-continuous{NE-œÅ = NE-œÅ} v‚àà‚ü¶M‚üßœÅ IH-M IH-N
        (‚ü¶‚üß-monotone M) (‚ü¶‚üß-monotone N)
cont-op2 {fst-op} {œÅ} {NE-œÅ} {v} {cons (ast M) nil} v‚àà‚ü¶M‚üßœÅ
    ‚ü® IH-M , _ ‚ü© =
    car-continuous{NE-œÅ = NE-œÅ} v‚àà‚ü¶M‚üßœÅ IH-M (‚ü¶‚üß-monotone M)
cont-op2 {snd-op} {œÅ} {NE-œÅ} {v} {cons (ast M) nil} v‚àà‚ü¶M‚üßœÅ
    ‚ü® IH-M , _ ‚ü© =
    cdr-continuous{NE-œÅ = NE-œÅ} v‚àà‚ü¶M‚üßœÅ IH-M (‚ü¶‚üß-monotone M)
cont-op2 {tuple n} {œÅ} {NE-œÅ} {v} {args} v‚àà‚ü¶M‚üßœÅ cont-args =
   ùíØ-continuous{NE-œÅ = NE-œÅ} v‚àà‚ü¶M‚üßœÅ
       (all-Cont-Env-Arg‚áícont-envs{NE-œÅ = NE-œÅ} cont-args)
       (‚ü¶‚üß-monotone-args args)
cont-op2 {get i} {œÅ} {NE-œÅ} {v} {cons (ast M) nil} v‚àà‚ü¶M‚üßœÅ ‚ü® cM , _ ‚ü© =
    proj-continuous{NE-œÅ = NE-œÅ} v‚àà‚ü¶M‚üßœÅ cM (‚ü¶‚üß-monotone M)
cont-op2 {inl-op}{œÅ}{NE-œÅ}{v}{cons (ast M) nil} v‚àà ‚ü® cM , _ ‚ü© =
    ‚Ñí-continuous{NE-œÅ = NE-œÅ} v‚àà cM (‚ü¶‚üß-monotone M)
cont-op2 {inr-op}{œÅ}{NE-œÅ}{v}{cons (ast M) nil} v‚àà ‚ü® cM , _ ‚ü© =
    ‚Ñõ-continuous{NE-œÅ = NE-œÅ} v‚àà cM (‚ü¶‚üß-monotone M)
cont-op2 {case-op}{œÅ}{NE-œÅ}{v}
    {cons (ast L) (cons (bind (ast M)) (cons (bind (ast N)) nil))}
    v‚àà ‚ü® IH-L , ‚ü® IH-M , ‚ü® IH-N , _ ‚ü© ‚ü© ‚ü© =
   ùíû-continuous{NE-œÅ = NE-œÅ} v‚àà IH-L (‚ü¶‚üß-monotone L) IH-M (‚ü¶‚üß-monotone M)
       IH-N (‚ü¶‚üß-monotone N)

instance
  ISWIM-Continuous : ContinuousSemantics
  ISWIM-Continuous = record { continuous-op =
      Œª{op}{œÅ}{NE-œÅ} ‚Üí cont-op2{op}{œÅ}{NE-œÅ} }
open ContinuousSemantics {{...}} public


-}