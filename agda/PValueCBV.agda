module PValueCBV where

{-

  This is an adaptation of the call-by-name models P(œâ) of Scott
  (1976) and D‚Çê of Engeler (1981) to call-by-value.

-}

open import Primitives
open import Utilities using (extensionality)
open import SetsAsPredicates
open import Var
open import Substitution using (_‚Ä¢_)

open import Data.Empty using (‚ä•-elim) renaming (‚ä• to False)
open import Data.List using (List ; _‚à∑_ ; []; _++_; length)
open import Data.List.Properties using (++-conicalÀ°)
open import Data.List.Membership.Propositional renaming (_‚àà_ to _‚ãµ_)
open import Data.List.Membership.Propositional.Properties
  using (‚àà-++‚Å∫À°; ‚àà-++‚Å∫ ≥)
open import Data.List.Relation.Unary.Any using (here; there) 
open import Data.Nat using (‚Ñï; zero; suc; _‚âü_; _<_; s‚â§s)
open import Data.Product using (_√ó_; Œ£; Œ£-syntax; proj‚ÇÅ; proj‚ÇÇ)
    renaming (_,_ to ‚ü®_,_‚ü©)
open import Data.Sum using (_‚äé_; inj‚ÇÅ; inj‚ÇÇ)
open import Data.Unit using (tt) renaming (‚ä§ to True)
open import Relation.Binary.PropositionalEquality
    using (_‚â°_; _‚â¢_; refl; sym; subst)
open import Relation.Nullary using (¬¨_; Dec; yes; no)

{- Finite Sets represented by Lists -------------------------------------------}

mem : ‚àÄ{T : Set} ‚Üí List T ‚Üí T ‚Üí Set
mem {T} ls x = x ‚ãµ ls

E‚â¢[]‚áínonempty-mem : ‚àÄ{T}{E : List T}
  ‚Üí E ‚â¢ [] ‚Üí nonempty (mem E)
E‚â¢[]‚áínonempty-mem {T} {[]} E‚â¢[] = ‚ä•-elim (E‚â¢[] refl)
E‚â¢[]‚áínonempty-mem {T} {x ‚à∑ E} E‚â¢[] = ‚ü® x , here refl ‚ü©


{- Denotational Values --------------------------------------------------------}

data Value : Set where
  const : {B : Base} ‚Üí base-rep B ‚Üí Value  {- A primitive constant of type B. -}
  _‚Ü¶_ : List Value ‚Üí Value ‚Üí Value        {- An entry in a function's graph. -}
  ŒΩ : Value      {- A function. Needed for CBV to distinguish from diverging. -}


{- Abstraction and Application ------------------------------------------------}

Œõ : (ùí´ Value ‚Üí ùí´ Value) ‚Üí ùí´ Value
Œõ f (const k) = False
Œõ f (V ‚Ü¶ w) = w ‚àà f (mem V)  √ó  V ‚â¢ []
Œõ f ŒΩ = True

infix 10 _‚ñ™_
_‚ñ™_ : ùí´ Value ‚Üí ùí´ Value ‚Üí ùí´ Value
D‚ÇÅ ‚ñ™ D‚ÇÇ = Œª w ‚Üí Œ£[ V ‚àà List Value ] (V ‚Ü¶ w ‚àà D‚ÇÅ)  √ó  (mem V ‚äÜ D‚ÇÇ)  √ó  V ‚â¢ []

‚Ñò : (P : Prim) ‚Üí rep P ‚Üí ùí´ Value
‚Ñò (base B) k (const {B‚Ä≤} k‚Ä≤)
    with base-eq? B B‚Ä≤
... | yes refl = k ‚â° k‚Ä≤
... | no neq = False
‚Ñò (base B) k (V ‚Ü¶ w) = False
‚Ñò (base B) k ŒΩ = False
‚Ñò (B ‚áí P) f (const k) = False
‚Ñò (B ‚áí P) f (V ‚Ü¶ w) =
   Œ£[ k ‚àà base-rep B ] V ‚â° (const {B} k) ‚à∑ []  √ó  w ‚àà ‚Ñò P (f k)
‚Ñò (B ‚áí P) f ŒΩ = True

k‚àà‚Ñòk : ‚àÄ{B}{k} ‚Üí const {B} k ‚àà ‚Ñò (base B) k
k‚àà‚Ñòk {B}{k}
    with base-eq? B B
... | yes refl = refl
... | no neq = neq refl

k‚Ä≤‚àà‚Ñòk‚áíP‚â°B : ‚àÄ{P B}{k}{k‚Ä≤} ‚Üí const {B} k‚Ä≤ ‚àà ‚Ñò P k ‚Üí P ‚â° base B
k‚Ä≤‚àà‚Ñòk‚áíP‚â°B {base B‚Ä≤} {B} {k} {k‚Ä≤} k‚Ä≤‚àà‚Ñòk
    with base-eq? B‚Ä≤ B
... | yes refl = refl
... | no neq = ‚ä•-elim k‚Ä≤‚àà‚Ñòk

k‚Ä≤‚àà‚Ñòk‚áík‚Ä≤‚â°k : ‚àÄ{B}{k}{k‚Ä≤} ‚Üí const {B} k‚Ä≤ ‚àà ‚Ñò (base B) k ‚Üí k‚Ä≤ ‚â° k
k‚Ä≤‚àà‚Ñòk‚áík‚Ä≤‚â°k {B}{k}{k‚Ä≤} m
    with base-eq? B B
... | yes refl = sym m
... | no neq = ‚ä•-elim m


{- Application is a Congruence ------------------------------------------------}

‚ñ™-cong : ‚àÄ{D‚ÇÅ D‚ÇÇ D‚ÇÉ D‚ÇÑ : ùí´ Value}
  ‚Üí D‚ÇÅ ‚âÉ D‚ÇÉ  ‚Üí  D‚ÇÇ ‚âÉ D‚ÇÑ
  ‚Üí D‚ÇÅ ‚ñ™ D‚ÇÇ ‚âÉ D‚ÇÉ ‚ñ™ D‚ÇÑ
‚ñ™-cong ‚ü® d13 , d31 ‚ü© ‚ü® d24 , d42 ‚ü© = ‚ü® (‚ñ™-cong-‚äÜ d13 d24) , (‚ñ™-cong-‚äÜ d31 d42) ‚ü©
  where
  ‚ñ™-cong-‚äÜ : ‚àÄ{D‚ÇÅ D‚ÇÇ D‚ÇÉ D‚ÇÑ : ùí´ Value}
    ‚Üí D‚ÇÅ ‚äÜ D‚ÇÉ  ‚Üí  D‚ÇÇ ‚äÜ D‚ÇÑ
    ‚Üí D‚ÇÅ ‚ñ™ D‚ÇÇ ‚äÜ D‚ÇÉ ‚ñ™ D‚ÇÑ
  ‚ñ™-cong-‚äÜ D11 D22 w ‚ü® V , ‚ü® wv‚ààD1 , ‚ü® V<D2 , V‚â¢[] ‚ü© ‚ü© ‚ü© =
     ‚ü® V , ‚ü® (D11 (V ‚Ü¶ w) wv‚ààD1) , ‚ü® (Œª d z ‚Üí D22 d (V<D2 d z)) , V‚â¢[] ‚ü© ‚ü© ‚ü©


{- Abstraction is Extensional ---- --------------------------------------------}

Œõ-ext : ‚àÄ{F‚ÇÅ F‚ÇÇ : (ùí´ Value) ‚Üí (ùí´ Value)}
  ‚Üí (‚àÄ {X} ‚Üí F‚ÇÅ X ‚âÉ F‚ÇÇ X)
  ‚Üí Œõ F‚ÇÅ ‚âÉ Œõ F‚ÇÇ
Œõ-ext {F‚ÇÅ}{F‚ÇÇ} F‚ÇÅ‚âÉF‚ÇÇ = ‚ü® fwd , back ‚ü©
    where
    fwd : Œõ F‚ÇÅ ‚äÜ Œõ F‚ÇÇ
    fwd (V ‚Ü¶ w) ‚ü® w‚ààF‚ÇÅV , V‚â¢[] ‚ü© = ‚ü® (proj‚ÇÅ F‚ÇÅ‚âÉF‚ÇÇ w w‚ààF‚ÇÅV) , V‚â¢[] ‚ü©
    fwd ŒΩ v‚ààŒõF‚ÇÅ = tt
    back : Œõ F‚ÇÇ ‚äÜ Œõ F‚ÇÅ
    back (V ‚Ü¶ w) ‚ü® w‚ààF‚ÇÇV , V‚â¢[] ‚ü© = ‚ü® proj‚ÇÇ F‚ÇÅ‚âÉF‚ÇÇ w w‚ààF‚ÇÇV , V‚â¢[] ‚ü©
    back ŒΩ _ = tt

{- Abstraction followed by Application is the identity ------------------------}

continuous : (F : ùí´ Value ‚Üí ùí´ Value) ‚Üí Set‚ÇÅ
continuous F = ‚àÄ X E ‚Üí mem E ‚äÜ F X ‚Üí nonempty X
    ‚Üí Œ£[ D ‚àà List Value ] mem D ‚äÜ X  √ó  mem E ‚äÜ F (mem D)  √ó  D ‚â¢ []

monotone : (F : ùí´ Value ‚Üí ùí´ Value) ‚Üí Set‚ÇÅ
monotone F = ‚àÄ D‚ÇÅ D‚ÇÇ ‚Üí D‚ÇÅ ‚äÜ D‚ÇÇ ‚Üí F D‚ÇÅ ‚äÜ F D‚ÇÇ

Œõ-‚ñ™-id : ‚àÄ {F : ùí´ Value ‚Üí ùí´ Value}{X : ùí´ Value}
  ‚Üí continuous F ‚Üí monotone F ‚Üí nonempty X
  ‚Üí (Œõ F) ‚ñ™ X ‚âÉ F X
Œõ-‚ñ™-id {F}{X} Fcont Fmono NE-X = ‚ü® (Œõ-‚ñ™-‚äÜ Fmono) , (‚äÜ-Œõ-‚ñ™ Fcont NE-X) ‚ü©
  where
  Œõ-‚ñ™-‚äÜ : ‚àÄ {F : ùí´ Value ‚Üí ùí´ Value}{X : ùí´ Value}
    ‚Üí monotone F  ‚Üí  (Œõ F) ‚ñ™ X ‚äÜ F X
  Œõ-‚ñ™-‚äÜ {F} {X} Fmono w ‚ü® V , ‚ü® ‚ü® w‚ààFV , _ ‚ü© , ‚ü® V<X , V‚â¢[] ‚ü© ‚ü© ‚ü© =
      Fmono (mem V) X V<X w w‚ààFV

  ‚äÜ-Œõ-‚ñ™ : ‚àÄ {F : ùí´ Value ‚Üí ùí´ Value}{X : ùí´ Value}
    ‚Üí continuous F  ‚Üí nonempty X ‚Üí  F X ‚äÜ (Œõ F) ‚ñ™ X
  ‚äÜ-Œõ-‚ñ™ {F}{X} Fcont NE-X w w‚ààFX 
      with Fcont X (w ‚à∑ []) (Œª { d (here refl) ‚Üí w‚ààFX }) NE-X
  ... | ‚ü® D , ‚ü® D<X , ‚ü® w‚ààFD , NE-D ‚ü© ‚ü© ‚ü© =
        ‚ü® D , ‚ü® ‚ü® w‚ààFD w (here refl) , NE-D ‚ü© , ‚ü® D<X , NE-D ‚ü© ‚ü© ‚ü©

  
{- Primitive Abstraction followed by Application is the identity --------------}

‚Ñò-‚ñ™-‚âÉ : ‚àÄ{B}{P}{f}{k}  ‚Üí  (‚Ñò (B ‚áí P) f) ‚ñ™ (‚Ñò (base B) k) ‚âÉ ‚Ñò P (f k)
‚Ñò-‚ñ™-‚âÉ {B}{P}{f}{k} = ‚ü® fwd , back ‚ü©
  where
  fwd : ‚Ñò (B ‚áí P) f ‚ñ™ ‚Ñò (base B) k ‚äÜ ‚Ñò P (f k)
  fwd w ‚ü® V , ‚ü® ‚ü® k‚Ä≤ , ‚ü® refl , w‚ààfk‚Ä≤ ‚ü© ‚ü© , ‚ü® k‚Ä≤‚ààpk , _ ‚ü© ‚ü© ‚ü©
      with k‚Ä≤‚ààpk (const k‚Ä≤) (here refl)
  ... | pkk‚Ä≤ rewrite k‚Ä≤‚àà‚Ñòk‚áík‚Ä≤‚â°k pkk‚Ä≤ = w‚ààfk‚Ä≤
  back : ‚Ñò P (f k) ‚äÜ ‚Ñò (B ‚áí P) f ‚ñ™ ‚Ñò (base B) k
  back w w‚ààfk = ‚ü® (const k ‚à∑ []) , ‚ü® ‚ü® k , ‚ü® refl , w‚ààfk ‚ü© ‚ü© ,
                ‚ü® (Œª {d (here refl) ‚Üí k‚àà‚Ñòk}) , (Œª ()) ‚ü© ‚ü© ‚ü©

{- Environments ---------------------------------------------------------------}

Env : Set‚ÇÅ
Env = Var ‚Üí ùí´ Value

nonempty-env : Env ‚Üí Set
nonempty-env œÅ = ‚àÄ x ‚Üí nonempty (œÅ x)

infix 5 _‚äÜ‚Çë_
_‚äÜ‚Çë_ : Env ‚Üí Env ‚Üí Set
œÅ‚ÇÅ ‚äÜ‚Çë œÅ‚ÇÇ = ‚àÄ x ‚Üí œÅ‚ÇÅ x ‚äÜ œÅ‚ÇÇ x

‚äÜ‚Çë-trans : ‚àÄ{œÅ‚ÇÅ œÅ‚ÇÇ œÅ‚ÇÉ} ‚Üí œÅ‚ÇÅ ‚äÜ‚Çë œÅ‚ÇÇ ‚Üí œÅ‚ÇÇ ‚äÜ‚Çë œÅ‚ÇÉ ‚Üí œÅ‚ÇÅ ‚äÜ‚Çë œÅ‚ÇÉ
‚äÜ‚Çë-trans {œÅ‚ÇÅ}{œÅ‚ÇÇ}{œÅ‚ÇÉ} r12 r23 x = Œª d z ‚Üí r23 x d (r12 x d z)

extend-nonempty-env : ‚àÄ{œÅ}{X}
   ‚Üí nonempty-env œÅ  ‚Üí  nonempty X  ‚Üí  nonempty-env (X ‚Ä¢ œÅ)
extend-nonempty-env {œÅ} {X} NE-œÅ NE-X zero = NE-X
extend-nonempty-env {œÅ} {X} NE-œÅ V‚â¢[] (suc x) = NE-œÅ x

env-ext : ‚àÄ{œÅ œÅ‚Ä≤}{X} ‚Üí œÅ ‚äÜ‚Çë œÅ‚Ä≤ ‚Üí (x : Var) ‚Üí (X ‚Ä¢ œÅ) x ‚äÜ (X ‚Ä¢ œÅ‚Ä≤) x
env-ext œÅ<œÅ‚Ä≤ zero d d‚àà = d‚àà
env-ext œÅ<œÅ‚Ä≤ (suc x) = œÅ<œÅ‚Ä≤ x


