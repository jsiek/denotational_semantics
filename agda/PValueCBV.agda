module PValueCBV where

{-

  This is an adaptation of the call-by-name models P(œâ) of Scott
  (1976) and D‚Çê of Engeler (1981) to call-by-value.

-}

open import Primitives
open import Utilities using (extensionality)
open import SetsAsPredicates
open import Var
open import Substitution using (_‚Ä¢_)
open import ScopedTuple hiding (ùí´)
open import Syntax using (Sig; ext; ŒΩ; ‚ñ†; Var; _‚Ä¢_; ‚Üë; id; _‚®ü_) public
open import Sig

open import Data.Empty using (‚ä•-elim) renaming (‚ä• to False)
open import Data.List using (List ; _‚à∑_ ; []; _++_; length; replicate)
open import Data.List.Relation.Unary.Any using (Any)
open import Data.List.Properties using (++-conicalÀ°)
open import Data.List.Membership.Propositional renaming (_‚àà_ to _‚ãµ_)
open import Data.List.Membership.Propositional.Properties
  using (‚àà-++‚Å∫À°; ‚àà-++‚Å∫ ≥)
open import Data.List.Relation.Unary.Any using (here; there) 
open import Data.Nat using (‚Ñï; zero; suc; _‚âü_; _<_; z‚â§n; s‚â§s; _+_)
open import Data.Nat.Properties
open import Data.Product using (_√ó_; Œ£; Œ£-syntax; proj‚ÇÅ; proj‚ÇÇ)
    renaming (_,_ to ‚ü®_,_‚ü©)
open import Data.Sum using (_‚äé_; inj‚ÇÅ; inj‚ÇÇ)
open import Data.Unit using (tt) renaming (‚ä§ to True)
open import Data.Unit.Polymorphic using (‚ä§) renaming (tt to ptt)
open import Relation.Binary.PropositionalEquality
    using (_‚â°_; _‚â¢_; refl; sym; subst)
open import Level using (Level; Lift; lift)
    renaming (zero to lzero; suc to lsuc)
open import Relation.Nullary using (¬¨_; Dec; yes; no)

{- Finite Sets represented by Lists -------------------------------------------}

mem : ‚àÄ{T : Set} ‚Üí List T ‚Üí T ‚Üí Set
mem {T} ls x = x ‚ãµ ls

E‚â¢[]‚áínonempty-mem : ‚àÄ{T}{E : List T}
  ‚Üí E ‚â¢ [] ‚Üí nonempty (mem E)
E‚â¢[]‚áínonempty-mem {T} {[]} E‚â¢[] = ‚ä•-elim (E‚â¢[] refl)
E‚â¢[]‚áínonempty-mem {T} {x ‚à∑ E} E‚â¢[] = ‚ü® x , here refl ‚ü©


{- Denotational Values --------------------------------------------------------}

data Value : Set where
  const : {B : Base} ‚Üí base-rep B ‚Üí Value  {- A primitive constant of type B. -}
  _‚Ü¶_ : List Value ‚Üí Value ‚Üí Value        {- An entry in a function's graph. -}
  ŒΩ : Value      {- A function. Needed for CBV to distinguish from diverging. -}
  ‚ù≤_,_‚ù≥ : Value ‚Üí Value ‚Üí Value            {- Pairs -}
  ‚ü¨_‚ü≠ : List Value ‚Üí Value                 {- Tuples -}
  left : List Value ‚Üí Value                {- Sums -}
  right : List Value ‚Üí Value               {- Sums -}

{- Denotational Operators -----------------------------------------------------}

Œõ : (ùí´ Value ‚Üí ùí´ Value) ‚Üí ùí´ Value
Œõ f (const k) = False
Œõ f (V ‚Ü¶ w) = w ‚àà f (mem V)  √ó  V ‚â¢ []
Œõ f ŒΩ = True
Œõ f ‚ù≤ u , v ‚ù≥ = False
Œõ f ‚ü¨ vs ‚ü≠ = False
Œõ f (left V) = False
Œõ f (right V) = False

infix 10 _‚ñ™_
_‚ñ™_ : ùí´ Value ‚Üí ùí´ Value ‚Üí ùí´ Value
D‚ÇÅ ‚ñ™ D‚ÇÇ = Œª w ‚Üí Œ£[ V ‚àà List Value ] (V ‚Ü¶ w ‚àà D‚ÇÅ)  √ó  (mem V ‚äÜ D‚ÇÇ)  √ó  V ‚â¢ []

‚Ñò : (P : Prim) ‚Üí rep P ‚Üí ùí´ Value
‚Ñò (base B) k (const {B‚Ä≤} k‚Ä≤)
    with base-eq? B B‚Ä≤
... | yes refl = k ‚â° k‚Ä≤
... | no neq = False
‚Ñò (base B) k (V ‚Ü¶ w) = False
‚Ñò (base B) k ŒΩ = False
‚Ñò (base B) k ‚ù≤ u , v ‚ù≥ = False
‚Ñò (base B) k ‚ü¨ vs ‚ü≠ = False
‚Ñò (base B) k (left V) = False
‚Ñò (base B) k (right V) = False
‚Ñò (B ‚áí P) f (const k) = False
‚Ñò (B ‚áí P) f (V ‚Ü¶ w) =
   Œ£[ k ‚àà base-rep B ] V ‚â° (const {B} k) ‚à∑ []  √ó  w ‚àà ‚Ñò P (f k)
‚Ñò (B ‚áí P) f ŒΩ = True
‚Ñò (B ‚áí P) k ‚ù≤ u , v ‚ù≥ = False
‚Ñò (B ‚áí P) k ‚ü¨ vs ‚ü≠ = False
‚Ñò (B ‚áí P) k (left V) = False
‚Ñò (B ‚áí P) k (right V) = False

„Äò_,_„Äô : ùí´ Value ‚Üí ùí´ Value ‚Üí ùí´ Value
„Äò D‚ÇÅ , D‚ÇÇ „Äô ‚ù≤ u , v ‚ù≥ = u ‚àà D‚ÇÅ √ó v ‚àà D‚ÇÇ
„Äò D‚ÇÅ , D‚ÇÇ „Äô _ = False

car : ùí´ Value ‚Üí ùí´ Value
car D u = Œ£[ v ‚àà Value ] ‚ù≤ u , v ‚ù≥ ‚àà D

cdr : ùí´ Value ‚Üí ùí´ Value
cdr D v = Œ£[ u ‚àà Value ] ‚ù≤ u , v ‚ù≥ ‚àà D

‚àè : ‚Ñï ‚Üí Set‚ÇÅ ‚Üí Set‚ÇÅ
‚àè n T = Tuple (replicate n ‚ñ†) (Result T)

ùíØ : ‚àÄ n ‚Üí ‚àè n (ùí´ Value) ‚Üí ùí´ Value
ùíØ zero _ ‚ü¨ [] ‚ü≠ = True
ùíØ (suc n) ‚ü® D , Ds ‚ü© ‚ü¨ v ‚à∑ vs ‚ü≠ = v ‚àà D  √ó  ùíØ n Ds ‚ü¨ vs ‚ü≠
ùíØ n Ds _ = False

nth : List Value ‚Üí ‚Ñï ‚Üí Value
nth [] i = const 0
nth (v ‚à∑ vs) 0 = v
nth (v ‚à∑ vs) (suc i) = nth vs i

proj : ùí´ Value ‚Üí ‚Ñï ‚Üí ùí´ Value
proj D i u = Œ£[ vs ‚àà List Value ]
    i < length vs  √ó  ‚ü¨ vs ‚ü≠ ‚àà D  √ó  u ‚â° nth vs i

‚Ñí : ùí´ Value ‚Üí ùí´ Value
‚Ñí D (left V) = V ‚â¢ []  √ó  mem V ‚äÜ D
‚Ñí D _ = False

‚Ñõ : ùí´ Value ‚Üí ùí´ Value
‚Ñõ D (right V) = V ‚â¢ []  √ó  mem V ‚äÜ D
‚Ñõ D _ = False

ùíû : ùí´ Value ‚Üí ùí´ Value ‚Üí ùí´ Value ‚Üí ùí´ Value
ùíû D E F w = (Œ£[ V ‚àà List Value ] left V ‚àà D  √ó  V ‚Ü¶ w ‚àà E)
          ‚äé (Œ£[ V ‚àà List Value ] right V ‚àà D  √ó  V ‚Ü¶ w ‚àà F)

{- Stuff about Products -------------------------------------------------------}

all-‚àè : ‚àÄ{n}{T : Set‚ÇÅ}{‚Ñì : Level} ‚Üí (T ‚Üí Set ‚Ñì) ‚Üí ‚àè n T ‚Üí Set ‚Ñì
all-‚àè {zero}{T}{‚Ñì} P (lift tt) = ‚ä§
all-‚àè {suc n}{T}{‚Ñì} P ‚ü® x , xs ‚ü© = P x  √ó  all-‚àè P xs

rel-‚àè : ‚àÄ{n}{T : Set‚ÇÅ} ‚Üí (T ‚Üí T ‚Üí Set) ‚Üí ‚àè n T ‚Üí ‚àè n T ‚Üí Set
rel-‚àè {zero} R (lift tt) (lift tt) = True
rel-‚àè {suc n} R ‚ü® x , xs ‚ü© ‚ü® y , ys ‚ü© = R x y  √ó  rel-‚àè R xs ys

NE-‚àè = Œª {n} ‚Üí all-‚àè{n}{ùí´ Value} nonempty

‚àè-append : ‚àÄ{n}{m} ‚Üí ‚àè n (ùí´ Value) ‚Üí ‚àè m (ùí´ Value) ‚Üí ‚àè (n + m) (ùí´ Value)
‚àè-append {zero} {m} Ds Es = Es
‚àè-append {suc n} {m} ‚ü® D , Ds ‚ü© Es = ‚ü® D , (‚àè-append Ds Es) ‚ü©

rel-‚àè-refl : ‚àÄ{n}{T : Set‚ÇÅ}{R : T ‚Üí T ‚Üí Set}{Ds : ‚àè n T}
   ‚Üí (‚àÄ {x} ‚Üí R x x) ‚Üí rel-‚àè R Ds Ds
rel-‚àè-refl {zero} {T} {R} {Ds} R-refl = tt
rel-‚àè-refl {suc n} {T} {R} {‚ü® D , Ds ‚ü©} R-refl =
    ‚ü® R-refl , (rel-‚àè-refl R-refl) ‚ü©

rel-‚àè-sym : ‚àÄ{n}{T : Set‚ÇÅ}{R : T ‚Üí T ‚Üí Set}{Ds Es : ‚àè n T}
   ‚Üí (‚àÄ {x y} ‚Üí R x y ‚Üí R y x) ‚Üí rel-‚àè R Ds Es ‚Üí rel-‚àè R Es Ds
rel-‚àè-sym {zero} {T} {R} {lift tt} {lift tt} R-sym tt = tt
rel-‚àè-sym {suc n} {T} {R} {‚ü® D , Ds ‚ü©} {‚ü® E , Es ‚ü©} R-sym ‚ü® RDE , R[Ds,Es] ‚ü© =
    ‚ü® (R-sym RDE) , (rel-‚àè-sym R-sym R[Ds,Es]) ‚ü©

rel-‚àè-‚áí : ‚àÄ{n}{T : Set‚ÇÅ}{xs ys : ‚àè n T}{R R‚Ä≤ : T ‚Üí T ‚Üí Set}
   ‚Üí (‚àÄ x y ‚Üí R x y ‚Üí R‚Ä≤ x y) ‚Üí rel-‚àè R xs ys ‚Üí rel-‚àè R‚Ä≤ xs ys
rel-‚àè-‚áí {zero} R‚áíR‚Ä≤ tt = tt
rel-‚àè-‚áí {suc n}{T}{‚ü® x , xs ‚ü©}{‚ü® y , ys ‚ü©} R‚áíR‚Ä≤ ‚ü® Rxy , R[xs,ys] ‚ü© =
    ‚ü® R‚áíR‚Ä≤ x y Rxy , rel-‚àè-‚áí R‚áíR‚Ä≤ R[xs,ys] ‚ü©

{- Basic Properties of Denotational Operators ---------------------------------}

k‚àà‚Ñòk : ‚àÄ{B}{k} ‚Üí const {B} k ‚àà ‚Ñò (base B) k
k‚àà‚Ñòk {B}{k}
    with base-eq? B B
... | yes refl = refl
... | no neq = neq refl

k‚Ä≤‚àà‚Ñòk‚áíP‚â°B : ‚àÄ{P B}{k}{k‚Ä≤} ‚Üí const {B} k‚Ä≤ ‚àà ‚Ñò P k ‚Üí P ‚â° base B
k‚Ä≤‚àà‚Ñòk‚áíP‚â°B {base B‚Ä≤} {B} {k} {k‚Ä≤} k‚Ä≤‚àà‚Ñòk
    with base-eq? B‚Ä≤ B
... | yes refl = refl
... | no neq = ‚ä•-elim k‚Ä≤‚àà‚Ñòk

k‚Ä≤‚àà‚Ñòk‚áík‚Ä≤‚â°k : ‚àÄ{B}{k}{k‚Ä≤} ‚Üí const {B} k‚Ä≤ ‚àà ‚Ñò (base B) k ‚Üí k‚Ä≤ ‚â° k
k‚Ä≤‚àà‚Ñòk‚áík‚Ä≤‚â°k {B}{k}{k‚Ä≤} m
    with base-eq? B B
... | yes refl = sym m
... | no neq = ‚ä•-elim m

v‚ààùíØ‚áív‚â°‚ü¨vs‚ü≠ : ‚àÄ{n}{Ds}{v}
  ‚Üí v ‚àà ùíØ n Ds
  ‚Üí Œ£[ vs ‚àà List Value ] v ‚â° ‚ü¨ vs ‚ü≠
v‚ààùíØ‚áív‚â°‚ü¨vs‚ü≠ {zero} {Ds} {‚ü¨ x ‚ü≠} v‚àà = ‚ü® x , refl ‚ü©
v‚ààùíØ‚áív‚â°‚ü¨vs‚ü≠ {suc n} {Ds} {‚ü¨ x ‚ü≠} v‚àà = ‚ü® x , refl ‚ü©

NE-‚àè‚áíùíØ : ‚àÄ{n}{Ds : ‚àè n (ùí´ Value)}
   ‚Üí NE-‚àè Ds
   ‚Üí Œ£[ vs ‚àà List Value ] ùíØ n Ds ‚ü¨ vs ‚ü≠
NE-‚àè‚áíùíØ {zero} {ptt} NE-Ds = ‚ü® [] , tt ‚ü©
NE-‚àè‚áíùíØ {suc n} {‚ü® D , Ds ‚ü©} ‚ü® ‚ü® v , v‚ààD ‚ü© , NE-Ds ‚ü©
    with NE-‚àè‚áíùíØ {n} {Ds} NE-Ds
... | ‚ü® vs , vs‚äÜ ‚ü© = ‚ü® v ‚à∑ vs , ‚ü® v‚ààD , vs‚äÜ ‚ü© ‚ü©

NE-‚àè‚áíNE-ùíØ : ‚àÄ{n}{Ds : ‚àè n (ùí´ Value)}
   ‚Üí NE-‚àè Ds
   ‚Üí nonempty (ùíØ n Ds)
NE-‚àè‚áíNE-ùíØ{n}{Ds} NE-Ds
    with NE-‚àè‚áíùíØ NE-Ds
... | ‚ü® vs , vs‚ààùíØDs ‚ü© = ‚ü® ‚ü¨ vs ‚ü≠ , vs‚ààùíØDs ‚ü©

{- Application is a Congruence ------------------------------------------------}

‚ñ™-mono-‚äÜ : ‚àÄ{D‚ÇÅ D‚ÇÇ D‚ÇÉ D‚ÇÑ : ùí´ Value}
  ‚Üí D‚ÇÅ ‚äÜ D‚ÇÉ  ‚Üí  D‚ÇÇ ‚äÜ D‚ÇÑ
  ‚Üí D‚ÇÅ ‚ñ™ D‚ÇÇ ‚äÜ D‚ÇÉ ‚ñ™ D‚ÇÑ
‚ñ™-mono-‚äÜ D13 D24 w ‚ü® V , ‚ü® wv‚ààD1 , ‚ü® V<D2 , V‚â¢[] ‚ü© ‚ü© ‚ü© =
   ‚ü® V , ‚ü® (D13 (V ‚Ü¶ w) wv‚ààD1) , ‚ü® (Œª d z ‚Üí D24 d (V<D2 d z)) , V‚â¢[] ‚ü© ‚ü© ‚ü©
     
‚ñ™-cong : ‚àÄ{D‚ÇÅ D‚ÇÇ D‚ÇÉ D‚ÇÑ : ùí´ Value}
  ‚Üí D‚ÇÅ ‚âÉ D‚ÇÉ  ‚Üí  D‚ÇÇ ‚âÉ D‚ÇÑ
  ‚Üí D‚ÇÅ ‚ñ™ D‚ÇÇ ‚âÉ D‚ÇÉ ‚ñ™ D‚ÇÑ
‚ñ™-cong ‚ü® d13 , d31 ‚ü© ‚ü® d24 , d42 ‚ü© = ‚ü® (‚ñ™-mono-‚äÜ d13 d24) , (‚ñ™-mono-‚äÜ d31 d42) ‚ü©


{- Abstraction is Extensional ---- --------------------------------------------}

Œõ-ext-‚äÜ : ‚àÄ{F‚ÇÅ F‚ÇÇ : (ùí´ Value) ‚Üí (ùí´ Value)}
  ‚Üí (‚àÄ {X} ‚Üí F‚ÇÅ X ‚äÜ F‚ÇÇ X)
  ‚Üí Œõ F‚ÇÅ ‚äÜ Œõ F‚ÇÇ
Œõ-ext-‚äÜ {F‚ÇÅ} {F‚ÇÇ} F‚ÇÅ‚äÜF‚ÇÇ (V ‚Ü¶ w) ‚ü® w‚ààF‚ÇÅX , V‚â¢[] ‚ü© = ‚ü® F‚ÇÅ‚äÜF‚ÇÇ w w‚ààF‚ÇÅX , V‚â¢[] ‚ü©
Œõ-ext-‚äÜ {F‚ÇÅ} {F‚ÇÇ} F‚ÇÅ‚äÜF‚ÇÇ ŒΩ v‚àà = tt

Œõ-ext : ‚àÄ{F‚ÇÅ F‚ÇÇ : (ùí´ Value) ‚Üí (ùí´ Value)}
  ‚Üí (‚àÄ {X} ‚Üí F‚ÇÅ X ‚âÉ F‚ÇÇ X)
  ‚Üí Œõ F‚ÇÅ ‚âÉ Œõ F‚ÇÇ
Œõ-ext {F‚ÇÅ}{F‚ÇÇ} F‚ÇÅ‚âÉF‚ÇÇ = ‚ü® Œõ-ext-‚äÜ (proj‚ÇÅ F‚ÇÅ‚âÉF‚ÇÇ) , Œõ-ext-‚äÜ (proj‚ÇÇ F‚ÇÅ‚âÉF‚ÇÇ) ‚ü©


{- Abstraction followed by Application is the identity ------------------------}

continuous : (F : ùí´ Value ‚Üí ùí´ Value) ‚Üí Set‚ÇÅ
continuous F = ‚àÄ X E ‚Üí mem E ‚äÜ F X ‚Üí nonempty X
    ‚Üí Œ£[ D ‚àà List Value ] mem D ‚äÜ X  √ó  mem E ‚äÜ F (mem D)  √ó  D ‚â¢ []

monotone : (F : ùí´ Value ‚Üí ùí´ Value) ‚Üí Set‚ÇÅ
monotone F = ‚àÄ D‚ÇÅ D‚ÇÇ ‚Üí D‚ÇÅ ‚äÜ D‚ÇÇ ‚Üí F D‚ÇÅ ‚äÜ F D‚ÇÇ

Œõ-‚ñ™-id : ‚àÄ {F : ùí´ Value ‚Üí ùí´ Value}{X : ùí´ Value}
  ‚Üí continuous F ‚Üí monotone F ‚Üí nonempty X
  ‚Üí (Œõ F) ‚ñ™ X ‚âÉ F X
Œõ-‚ñ™-id {F}{X} Fcont Fmono NE-X = ‚ü® (Œõ-‚ñ™-‚äÜ Fmono) , (‚äÜ-Œõ-‚ñ™ Fcont NE-X) ‚ü©
  where
  Œõ-‚ñ™-‚äÜ : ‚àÄ {F : ùí´ Value ‚Üí ùí´ Value}{X : ùí´ Value}
    ‚Üí monotone F  ‚Üí  (Œõ F) ‚ñ™ X ‚äÜ F X
  Œõ-‚ñ™-‚äÜ {F} {X} Fmono w ‚ü® V , ‚ü® ‚ü® w‚ààFV , _ ‚ü© , ‚ü® V<X , V‚â¢[] ‚ü© ‚ü© ‚ü© =
      Fmono (mem V) X V<X w w‚ààFV

  ‚äÜ-Œõ-‚ñ™ : ‚àÄ {F : ùí´ Value ‚Üí ùí´ Value}{X : ùí´ Value}
    ‚Üí continuous F  ‚Üí nonempty X ‚Üí  F X ‚äÜ (Œõ F) ‚ñ™ X
  ‚äÜ-Œõ-‚ñ™ {F}{X} Fcont NE-X w w‚ààFX 
      with Fcont X (w ‚à∑ []) (Œª { d (here refl) ‚Üí w‚ààFX }) NE-X
  ... | ‚ü® D , ‚ü® D<X , ‚ü® w‚ààFD , NE-D ‚ü© ‚ü© ‚ü© =
        ‚ü® D , ‚ü® ‚ü® w‚ààFD w (here refl) , NE-D ‚ü© , ‚ü® D<X , NE-D ‚ü© ‚ü© ‚ü©

  
{- Primitive Abstraction followed by Application is the identity --------------}

‚Ñò-‚ñ™-‚âÉ : ‚àÄ{B}{P}{f}{k}  ‚Üí  (‚Ñò (B ‚áí P) f) ‚ñ™ (‚Ñò (base B) k) ‚âÉ ‚Ñò P (f k)
‚Ñò-‚ñ™-‚âÉ {B}{P}{f}{k} = ‚ü® fwd , back ‚ü©
  where
  fwd : ‚Ñò (B ‚áí P) f ‚ñ™ ‚Ñò (base B) k ‚äÜ ‚Ñò P (f k)
  fwd w ‚ü® V , ‚ü® ‚ü® k‚Ä≤ , ‚ü® refl , w‚ààfk‚Ä≤ ‚ü© ‚ü© , ‚ü® k‚Ä≤‚ààpk , _ ‚ü© ‚ü© ‚ü©
      with k‚Ä≤‚ààpk (const k‚Ä≤) (here refl)
  ... | pkk‚Ä≤ rewrite k‚Ä≤‚àà‚Ñòk‚áík‚Ä≤‚â°k pkk‚Ä≤ = w‚ààfk‚Ä≤
  back : ‚Ñò P (f k) ‚äÜ ‚Ñò (B ‚áí P) f ‚ñ™ ‚Ñò (base B) k
  back w w‚ààfk = ‚ü® (const k ‚à∑ []) , ‚ü® ‚ü® k , ‚ü® refl , w‚ààfk ‚ü© ‚ü© ,
                ‚ü® (Œª {d (here refl) ‚Üí k‚àà‚Ñòk}) , (Œª ()) ‚ü© ‚ü© ‚ü©

{- Cons is a Congruence  ------------------------------------------------------}

cons-mono-‚äÜ : ‚àÄ{D‚ÇÅ D‚ÇÇ D‚ÇÉ D‚ÇÑ : ùí´ Value} ‚Üí D‚ÇÅ ‚äÜ D‚ÇÉ  ‚Üí  D‚ÇÇ ‚äÜ D‚ÇÑ
  ‚Üí „Äò D‚ÇÅ , D‚ÇÇ „Äô ‚äÜ „Äò D‚ÇÉ , D‚ÇÑ „Äô
cons-mono-‚äÜ D13 D24 ‚ù≤ u , v ‚ù≥ ‚ü® u‚ààD‚ÇÅ , v‚ààD‚ÇÇ ‚ü© = ‚ü® D13 u u‚ààD‚ÇÅ , D24 v v‚ààD‚ÇÇ ‚ü©

cons-cong : ‚àÄ{D‚ÇÅ D‚ÇÇ D‚ÇÉ D‚ÇÑ : ùí´ Value} ‚Üí D‚ÇÅ ‚âÉ D‚ÇÉ  ‚Üí  D‚ÇÇ ‚âÉ D‚ÇÑ
   ‚Üí „Äò D‚ÇÅ , D‚ÇÇ „Äô ‚âÉ „Äò D‚ÇÉ , D‚ÇÑ „Äô
cons-cong ‚ü® d13 , d31 ‚ü© ‚ü® d24 , d42 ‚ü© =
    ‚ü® (cons-mono-‚äÜ d13 d24) , (cons-mono-‚äÜ d31 d42) ‚ü©

car-mono-‚äÜ : ‚àÄ{D‚ÇÅ D‚ÇÉ : ùí´ Value} ‚Üí D‚ÇÅ ‚äÜ D‚ÇÉ ‚Üí car D‚ÇÅ ‚äÜ car D‚ÇÉ
car-mono-‚äÜ D13 u ‚ü® v , uv‚ààD‚ÇÅ ‚ü© = ‚ü® v , D13 ‚ù≤ u , v ‚ù≥ uv‚ààD‚ÇÅ ‚ü©

car-cong : ‚àÄ{D‚ÇÅ D‚ÇÉ : ùí´ Value} ‚Üí D‚ÇÅ ‚âÉ D‚ÇÉ ‚Üí car D‚ÇÅ ‚âÉ car D‚ÇÉ
car-cong ‚ü® d13 , d31 ‚ü©  =
    ‚ü® (car-mono-‚äÜ d13) , (Œª { u ‚ü® v , uv‚ààD‚ÇÉ ‚ü©  ‚Üí ‚ü® v , d31 ‚ù≤ u , v ‚ù≥ uv‚ààD‚ÇÉ ‚ü©}) ‚ü©

cdr-mono-‚äÜ : ‚àÄ{D‚ÇÅ D‚ÇÉ : ùí´ Value} ‚Üí D‚ÇÅ ‚äÜ D‚ÇÉ ‚Üí cdr D‚ÇÅ ‚äÜ cdr D‚ÇÉ
cdr-mono-‚äÜ D13 v ‚ü® u , uv‚ààD‚ÇÅ ‚ü© = ‚ü® u , D13 ‚ù≤ u , v ‚ù≥ uv‚ààD‚ÇÅ ‚ü©

cdr-cong : ‚àÄ{D‚ÇÅ D‚ÇÉ : ùí´ Value} ‚Üí D‚ÇÅ ‚âÉ D‚ÇÉ ‚Üí cdr D‚ÇÅ ‚âÉ cdr D‚ÇÉ
cdr-cong ‚ü® d13 , d31 ‚ü©  =
    ‚ü® (cdr-mono-‚äÜ d13) , (Œª { v ‚ü® u , uv‚ààD‚ÇÉ ‚ü© ‚Üí ‚ü® u , d31 ‚ù≤ u , v ‚ù≥ uv‚ààD‚ÇÉ ‚ü©}) ‚ü©

_‚´É_ : ‚àÄ{n} ‚Üí ‚àè n (ùí´ Value) ‚Üí ‚àè n (ùí´ Value) ‚Üí Set
_‚´É_ {n} = rel-‚àè {n} _‚äÜ_

ùíØ-mono-‚äÜ : ‚àÄ{n}{Ds Es : ‚àè n (ùí´ Value)} ‚Üí Ds ‚´É Es ‚Üí ùíØ n Ds ‚äÜ ùíØ n Es
ùíØ-mono-‚äÜ {zero} {lift tt} {lift tt} Ds‚äÜEs v v‚àà = v‚àà
ùíØ-mono-‚äÜ {suc n} {‚ü® D , Ds ‚ü©} {‚ü® E , Es ‚ü©} ‚ü® D‚äÜE , Ds‚äÜEs ‚ü© ‚ü¨ v ‚à∑ vs ‚ü≠
    ‚ü® v‚ààD , vs‚ààùíØDs ‚ü© = ‚ü® (D‚äÜE v v‚ààD) , (ùíØ-mono-‚äÜ Ds‚äÜEs ‚ü¨ vs ‚ü≠ vs‚ààùíØDs) ‚ü©

_‚©≠_ : ‚àÄ{n} ‚Üí ‚àè n (ùí´ Value) ‚Üí ‚àè n (ùí´ Value) ‚Üí Set
_‚©≠_ {n} = rel-‚àè {n} _‚âÉ_

‚©≠-refl = Œª {n}{Ds} ‚Üí rel-‚àè-refl {n}{ùí´ Value}{R = _‚âÉ_}{Ds} ‚âÉ-refl

‚©≠-sym = Œª {n}{Ds}{Es} ‚Üí rel-‚àè-sym {n}{ùí´ Value}{R = _‚âÉ_}{Ds}{Es} ‚âÉ-sym 

‚©≠‚áí‚äÜ : ‚àÄ{n}{Ds Es : ‚àè n (ùí´ Value)} ‚Üí Ds ‚©≠ Es ‚Üí Ds ‚´É Es  √ó  Es ‚´É Ds
‚©≠‚áí‚äÜ {n}{Ds}{Es} Ds=Es =
    ‚ü® rel-‚àè-‚áí (Œª x y ‚Üí proj‚ÇÅ) Ds=Es , rel-‚àè-‚áí (Œª x y ‚Üí proj‚ÇÅ) (‚©≠-sym Ds=Es) ‚ü©
    
ùíØ-cong-‚âÉ : ‚àÄ{n}{Ds Es : ‚àè n (ùí´ Value)} ‚Üí Ds ‚©≠ Es ‚Üí ùíØ n Ds ‚âÉ ùíØ n Es
ùíØ-cong-‚âÉ {n}{Ds}{Es} Ds=Es
    with ‚©≠‚áí‚äÜ Ds=Es
... | ‚ü® Ds‚äÜEs , Es‚äÜDs ‚ü© =    
  ‚ü® ùíØ-mono-‚äÜ Ds‚äÜEs , ùíØ-mono-‚äÜ Es‚äÜDs ‚ü©

proj-mono-‚äÜ : ‚àÄ{D E : ùí´ Value}{i} ‚Üí D ‚äÜ E ‚Üí proj D i ‚äÜ proj E i
proj-mono-‚äÜ D‚äÜE v ‚ü® vs , ‚ü® lt , ‚ü® vs‚ààD , refl ‚ü© ‚ü© ‚ü© =
                  ‚ü® vs , ‚ü® lt , ‚ü® (D‚äÜE ‚ü¨ vs ‚ü≠ vs‚ààD) , refl ‚ü© ‚ü© ‚ü©

proj-cong-‚âÉ : ‚àÄ{D E : ùí´ Value}{i} ‚Üí D ‚âÉ E ‚Üí proj D i ‚âÉ proj E i
proj-cong-‚âÉ D‚âÉE = ‚ü® (proj-mono-‚äÜ (proj‚ÇÅ D‚âÉE)) , (proj-mono-‚äÜ (proj‚ÇÇ D‚âÉE)) ‚ü©  

‚àè-append-‚äÜ : ‚àÄ{n}{m}{Ds Ds‚Ä≤ : ‚àè n (ùí´ Value)}{Es Es‚Ä≤ : ‚àè m (ùí´ Value)}
   ‚Üí Ds ‚´É Ds‚Ä≤ ‚Üí Es ‚´É Es‚Ä≤
   ‚Üí ‚àè-append Ds Es ‚´É ‚àè-append Ds‚Ä≤ Es‚Ä≤
‚àè-append-‚äÜ {zero} {m} {Ds} {Ds‚Ä≤} {Es} {Es‚Ä≤} Ds‚äÜDs‚Ä≤ Es‚äÜEs‚Ä≤ = Es‚äÜEs‚Ä≤
‚àè-append-‚äÜ {suc n} {m} {‚ü® D , Ds ‚ü©} {‚ü® D‚Ä≤ , Ds‚Ä≤ ‚ü©} {Es} {Es‚Ä≤} ‚ü® D‚äÜD‚Ä≤ , Ds‚äÜDs‚Ä≤ ‚ü©
    Es‚äÜEs‚Ä≤ = ‚ü® D‚äÜD‚Ä≤ , ‚àè-append-‚äÜ Ds‚äÜDs‚Ä≤ Es‚äÜEs‚Ä≤ ‚ü©

‚àè-append-‚©≠ : ‚àÄ{n}{m}{Ds Ds‚Ä≤ : ‚àè n (ùí´ Value)}{Es Es‚Ä≤ : ‚àè m (ùí´ Value)}
   ‚Üí Ds ‚©≠ Ds‚Ä≤ ‚Üí Es ‚©≠ Es‚Ä≤
   ‚Üí ‚àè-append Ds Es ‚©≠ ‚àè-append Ds‚Ä≤ Es‚Ä≤
‚àè-append-‚©≠ {zero} {m} {Ds} {Ds‚Ä≤} Ds=Ds‚Ä≤ Es=Es‚Ä≤ = Es=Es‚Ä≤
‚àè-append-‚©≠ {suc n} {m} {‚ü® D , Ds ‚ü©} {‚ü® D‚Ä≤ , Ds‚Ä≤ ‚ü©} ‚ü® D=D‚Ä≤ , Ds=Ds‚Ä≤ ‚ü© Es=Es‚Ä≤ =
    ‚ü® D=D‚Ä≤ , ‚àè-append-‚©≠ Ds=Ds‚Ä≤ Es=Es‚Ä≤ ‚ü©

{- Cons and Car  --------------------------------------------------------------}

car-of-cons-‚äÜ : ‚àÄ{D‚ÇÅ D‚ÇÇ : ùí´ Value}
  ‚Üí car („Äò D‚ÇÅ , D‚ÇÇ „Äô) ‚äÜ D‚ÇÅ
car-of-cons-‚äÜ {D‚ÇÅ} {D‚ÇÇ} u ‚ü® v , ‚ü® u‚ààD‚ÇÅ , v‚ààD‚ÇÇ ‚ü© ‚ü© = u‚ààD‚ÇÅ

car-of-cons : ‚àÄ{D‚ÇÅ D‚ÇÇ : ùí´ Value}
  ‚Üí nonempty D‚ÇÇ
  ‚Üí car („Äò D‚ÇÅ , D‚ÇÇ „Äô) ‚âÉ D‚ÇÅ
car-of-cons {D‚ÇÅ}{D‚ÇÇ} ‚ü® v , v‚ààD‚ÇÇ ‚ü© =
    ‚ü® car-of-cons-‚äÜ , (Œª u u‚ààD‚ÇÅ ‚Üí ‚ü® v , ‚ü® u‚ààD‚ÇÅ , v‚ààD‚ÇÇ ‚ü© ‚ü©) ‚ü©

cdr-of-cons-‚äÜ : ‚àÄ{D‚ÇÅ D‚ÇÇ : ùí´ Value}
  ‚Üí cdr „Äò D‚ÇÅ , D‚ÇÇ „Äô ‚äÜ D‚ÇÇ
cdr-of-cons-‚äÜ {D‚ÇÅ} {D‚ÇÇ} v ‚ü® u , ‚ü® u‚ààD‚ÇÅ , v‚ààD‚ÇÇ ‚ü© ‚ü© = v‚ààD‚ÇÇ

cdr-of-cons : ‚àÄ{D‚ÇÅ D‚ÇÇ : ùí´ Value}
  ‚Üí nonempty D‚ÇÅ
  ‚Üí cdr „Äò D‚ÇÅ , D‚ÇÇ „Äô ‚âÉ D‚ÇÇ
cdr-of-cons {D‚ÇÅ}{D‚ÇÇ} ‚ü® u , u‚ààD‚ÇÅ ‚ü© =
    ‚ü® cdr-of-cons-‚äÜ , (Œª v v‚ààD‚ÇÇ ‚Üí ‚ü® u , ‚ü® u‚ààD‚ÇÅ , v‚ààD‚ÇÇ ‚ü© ‚ü©) ‚ü©

{- Project from a Tuple -------------------------------------------------------}

ùíØ-nth-0 : ‚àÄ{n}{D}{Ds}
   ‚Üí NE-‚àè Ds
   ‚Üí proj (ùíØ (suc n) ‚ü® D , Ds ‚ü©) 0 ‚âÉ D
ùíØ-nth-0 {n}{D}{Ds} NE-Ds = ‚ü® G , H ‚ü©
  where
  G : proj (ùíØ (suc n) ‚ü® D , Ds ‚ü©) 0 ‚äÜ D
  G .v ‚ü® v ‚à∑ vs , ‚ü® lt , ‚ü® ‚ü® v‚ààD , ‚ü¨vs‚ü≠‚ààùíØDs ‚ü© , refl ‚ü© ‚ü© ‚ü© = v‚ààD

  H : D ‚äÜ proj (ùíØ (suc n) ‚ü® D , Ds ‚ü©) 0
  H v v‚ààD
      with NE-‚àè‚áíùíØ NE-Ds
  ... | ‚ü® vs , vs‚äÜ ‚ü© = ‚ü® (v ‚à∑ vs) , ‚ü® s‚â§s z‚â§n , ‚ü® ‚ü® v‚ààD , vs‚äÜ ‚ü© , refl ‚ü© ‚ü© ‚ü©

ùíØ-nth-suc : ‚àÄ{i}{n}{D}{Ds}
   ‚Üí nonempty D ‚Üí NE-‚àè Ds
   ‚Üí proj (ùíØ (suc n) ‚ü® D , Ds ‚ü©) (suc i)
   ‚âÉ proj (ùíØ n Ds) i
ùíØ-nth-suc {i}{n}{D}{Ds} ‚ü® u , u‚ààD ‚ü© NE-Ds = ‚ü® G , H ‚ü©
  where
  G : proj (ùíØ (suc n) ‚ü® D , Ds ‚ü©) (suc i) ‚äÜ proj (ùíØ n Ds) i
  G u ‚ü® v ‚à∑ vs , ‚ü® s‚â§s lt , ‚ü® ‚ü® v‚ààD , ‚ü¨vs‚ü≠‚ààùíØDs ‚ü© , refl ‚ü© ‚ü© ‚ü© =
      ‚ü® vs , ‚ü® lt , ‚ü® ‚ü¨vs‚ü≠‚ààùíØDs , refl ‚ü© ‚ü© ‚ü©
  H : proj (ùíØ n Ds) i ‚äÜ proj (ùíØ (suc n) ‚ü® D , Ds ‚ü©) (suc i)
  H v ‚ü® vs , ‚ü® lt , ‚ü® vs‚äÜDs , eq ‚ü© ‚ü© ‚ü© =
    ‚ü® (u ‚à∑ vs) , ‚ü® s‚â§s lt , ‚ü® ‚ü® u‚ààD , vs‚äÜDs ‚ü© , eq ‚ü© ‚ü© ‚ü©

{- Case, Left, and Right ------------------------------------------------------}

‚Ñí-mono-‚äÜ : ‚àÄ{D E : ùí´ Value} ‚Üí D ‚äÜ E ‚Üí ‚Ñí D ‚äÜ ‚Ñí E
‚Ñí-mono-‚äÜ {D} {E} D‚äÜE (left V) ‚ü® V‚â¢[] , v‚àà ‚ü© =
    ‚ü® V‚â¢[] , (Œª d z ‚Üí D‚äÜE d (v‚àà d z)) ‚ü©

‚Ñí-cong : ‚àÄ{D E : ùí´ Value} ‚Üí D ‚âÉ E ‚Üí ‚Ñí D ‚âÉ ‚Ñí E
‚Ñí-cong {D}{E} ‚ü® D‚äÜE , E‚äÜD ‚ü© = ‚ü® ‚Ñí-mono-‚äÜ D‚äÜE , ‚Ñí-mono-‚äÜ E‚äÜD ‚ü©

‚Ñõ-mono-‚äÜ : ‚àÄ{D E : ùí´ Value} ‚Üí D ‚äÜ E ‚Üí ‚Ñõ D ‚äÜ ‚Ñõ E
‚Ñõ-mono-‚äÜ {D} {E} D‚äÜE (right V) ‚ü® V‚â¢[] , v‚àà ‚ü© =
    ‚ü® V‚â¢[] , (Œª d z ‚Üí D‚äÜE d (v‚àà d z)) ‚ü©

‚Ñõ-cong : ‚àÄ{D E : ùí´ Value} ‚Üí D ‚âÉ E ‚Üí ‚Ñõ D ‚âÉ ‚Ñõ E
‚Ñõ-cong {D}{E} ‚ü® D‚äÜE , E‚äÜD ‚ü© = ‚ü® ‚Ñõ-mono-‚äÜ D‚äÜE , ‚Ñõ-mono-‚äÜ E‚äÜD ‚ü©

ùíû-mono-‚äÜ : ‚àÄ{f‚ÇÅ f‚ÇÇ g‚ÇÅ g‚ÇÇ : ùí´ Value ‚Üí ùí´ Value}{D‚ÇÅ D‚ÇÇ : ùí´ Value}
   ‚Üí D‚ÇÅ ‚äÜ D‚ÇÇ
   ‚Üí ((X : ùí´ Value) ‚Üí f‚ÇÅ X ‚äÜ f‚ÇÇ X)
   ‚Üí ((X : ùí´ Value) ‚Üí g‚ÇÅ X ‚äÜ g‚ÇÇ X)
   ‚Üí ùíû D‚ÇÅ (Œõ f‚ÇÅ) (Œõ g‚ÇÅ) ‚äÜ ùíû D‚ÇÇ (Œõ f‚ÇÇ) (Œõ g‚ÇÇ)
ùíû-mono-‚äÜ D‚ÇÅ‚äÜD‚ÇÇ f‚ÇÅ‚äÜf‚ÇÇ g‚ÇÅ‚äÜg‚ÇÇ v
    (inj‚ÇÅ ‚ü® V , ‚ü® inlV‚àà , ‚ü® v‚ààf‚ÇÅV , V‚â¢[] ‚ü© ‚ü© ‚ü©) =
    inj‚ÇÅ ‚ü® V , ‚ü® (D‚ÇÅ‚äÜD‚ÇÇ (left V) inlV‚àà) ,
         ‚ü® f‚ÇÅ‚äÜf‚ÇÇ (Œª z ‚Üí Any (_‚â°_ z) V) v v‚ààf‚ÇÅV , V‚â¢[] ‚ü© ‚ü© ‚ü©
ùíû-mono-‚äÜ D‚ÇÅ‚äÜD‚ÇÇ f‚ÇÅ‚äÜf‚ÇÇ g‚ÇÅ‚äÜg‚ÇÇ v (inj‚ÇÇ ‚ü® V , ‚ü® inlV‚àà , ‚ü® v‚ààg‚ÇÅV , V‚â¢[] ‚ü© ‚ü© ‚ü©) =
    inj‚ÇÇ ‚ü® V , ‚ü® D‚ÇÅ‚äÜD‚ÇÇ (right V) inlV‚àà ,
         ‚ü® g‚ÇÅ‚äÜg‚ÇÇ (Œª z ‚Üí Any (_‚â°_ z) V) v v‚ààg‚ÇÅV , V‚â¢[] ‚ü© ‚ü© ‚ü©

‚Ñí-ùíû : ‚àÄ{D : ùí´ Value}{F G : ùí´ Value ‚Üí ùí´ Value}
   ‚Üí continuous F ‚Üí monotone F ‚Üí nonempty D
   ‚Üí ùíû (‚Ñí D) (Œõ F) (Œõ G) ‚âÉ F D
‚Ñí-ùíû {D}{F}{G} Fcont Fmono NE-D = ‚ü® fwd , back ‚ü©
  where
  fwd : ùíû (‚Ñí D) (Œõ F) (Œõ G) ‚äÜ F D
  fwd v (inj‚ÇÅ ‚ü® V , ‚ü® ‚ü® _ , V‚äÜD ‚ü© , ‚ü® v‚ààF[V] , V‚â¢[] ‚ü© ‚ü© ‚ü©) =
      Fmono (mem V) D V‚äÜD v v‚ààF[V]

  back : F D ‚äÜ ùíû (‚Ñí D) (Œõ F) (Œõ G)
  back v v‚ààF[D]
      with Fcont D (v ‚à∑ []) (Œª{d (here refl) ‚Üí v‚ààF[D]}) NE-D
  ... | ‚ü® E , ‚ü® E‚äÜD , ‚ü® v‚ààFE , NE-E ‚ü© ‚ü© ‚ü© =
      inj‚ÇÅ ‚ü® E , ‚ü® ‚ü® NE-E , E‚äÜD ‚ü© , ‚ü® v‚ààFE v (here refl) , NE-E ‚ü© ‚ü© ‚ü©

‚Ñõ-ùíû : ‚àÄ{D : ùí´ Value}{F G : ùí´ Value ‚Üí ùí´ Value}
   ‚Üí continuous G ‚Üí monotone G ‚Üí nonempty D
   ‚Üí ùíû (‚Ñõ D) (Œõ F) (Œõ G) ‚âÉ G D
‚Ñõ-ùíû {D}{F}{G} Gcont Gmono NE-D = ‚ü® fwd , back ‚ü©
  where
  fwd : ùíû (‚Ñõ D) (Œõ F) (Œõ G) ‚äÜ G D
  fwd v (inj‚ÇÇ ‚ü® V , ‚ü® ‚ü® _ , V‚äÜD ‚ü© , ‚ü® v‚ààG[V] , V‚â¢[] ‚ü© ‚ü© ‚ü©) =
      Gmono (mem V) D V‚äÜD v v‚ààG[V]

  back : G D ‚äÜ ùíû (‚Ñõ D) (Œõ F) (Œõ G)
  back v v‚ààG[D]
      with Gcont D (v ‚à∑ []) (Œª{d (here refl) ‚Üí v‚ààG[D]}) NE-D
  ... | ‚ü® E , ‚ü® E‚äÜD , ‚ü® v‚ààGE , NE-E ‚ü© ‚ü© ‚ü© =
      inj‚ÇÇ ‚ü® E , ‚ü® ‚ü® NE-E , E‚äÜD ‚ü© , ‚ü® v‚ààGE v (here refl) , NE-E ‚ü© ‚ü© ‚ü©

{- Environments ---------------------------------------------------------------}

Env : Set‚ÇÅ
Env = Var ‚Üí ùí´ Value

nonempty-env : Env ‚Üí Set
nonempty-env œÅ = ‚àÄ x ‚Üí nonempty (œÅ x)

infix 5 _‚äÜ‚Çë_
_‚äÜ‚Çë_ : Env ‚Üí Env ‚Üí Set
œÅ‚ÇÅ ‚äÜ‚Çë œÅ‚ÇÇ = ‚àÄ x ‚Üí œÅ‚ÇÅ x ‚äÜ œÅ‚ÇÇ x

‚äÜ‚Çë-trans : ‚àÄ{œÅ‚ÇÅ œÅ‚ÇÇ œÅ‚ÇÉ} ‚Üí œÅ‚ÇÅ ‚äÜ‚Çë œÅ‚ÇÇ ‚Üí œÅ‚ÇÇ ‚äÜ‚Çë œÅ‚ÇÉ ‚Üí œÅ‚ÇÅ ‚äÜ‚Çë œÅ‚ÇÉ
‚äÜ‚Çë-trans {œÅ‚ÇÅ}{œÅ‚ÇÇ}{œÅ‚ÇÉ} r12 r23 x = Œª d z ‚Üí r23 x d (r12 x d z)

extend-nonempty-env : ‚àÄ{œÅ}{X}
   ‚Üí nonempty-env œÅ  ‚Üí  nonempty X  ‚Üí  nonempty-env (X ‚Ä¢ œÅ)
extend-nonempty-env {œÅ} {X} NE-œÅ NE-X zero = NE-X
extend-nonempty-env {œÅ} {X} NE-œÅ V‚â¢[] (suc x) = NE-œÅ x

env-ext : ‚àÄ{œÅ œÅ‚Ä≤}{X} ‚Üí œÅ ‚äÜ‚Çë œÅ‚Ä≤ ‚Üí (x : Var) ‚Üí (X ‚Ä¢ œÅ) x ‚äÜ (X ‚Ä¢ œÅ‚Ä≤) x
env-ext œÅ<œÅ‚Ä≤ zero d d‚àà = d‚àà
env-ext œÅ<œÅ‚Ä≤ (suc x) = œÅ<œÅ‚Ä≤ x

{- environments whose codomain are finite nonempty sets -}
finite-env : Env ‚Üí Set
finite-env œÅ = ‚àÄ x ‚Üí Œ£[ E ‚àà List Value ] œÅ x ‚âÉ mem E √ó E ‚â¢ []

infix 6 _‚äî‚Çë_
_‚äî‚Çë_ : Env ‚Üí Env ‚Üí Env
(œÅ‚ÇÅ ‚äî‚Çë œÅ‚ÇÇ) x v = œÅ‚ÇÅ x v ‚äé œÅ‚ÇÇ x v

join-finite-env : ‚àÄ{œÅ‚ÇÅ œÅ‚ÇÇ}  ‚Üí finite-env œÅ‚ÇÅ  ‚Üí  finite-env œÅ‚ÇÇ
   ‚Üí finite-env (œÅ‚ÇÅ ‚äî‚Çë œÅ‚ÇÇ)
join-finite-env {œÅ‚ÇÅ}{œÅ‚ÇÇ} f1 f2 x
    with f1 x
... | ‚ü® E1 , ‚ü® œÅ‚ÇÅ=E1 , NE-E1 ‚ü© ‚ü©
    with f2 x
... | ‚ü® E2 , ‚ü® œÅ‚ÇÇ=E2 , NE-E2 ‚ü© ‚ü© =
    ‚ü® (E1 ++ E2) , ‚ü® ‚ü® G , (H {E1} Œª d z ‚Üí z) ‚ü© ,
      (Œª E12=[] ‚Üí NE-E1 (++-conicalÀ° E1 E2 E12=[])) ‚ü© ‚ü©
    where
    G : (v : Value) ‚Üí œÅ‚ÇÅ x v ‚äé œÅ‚ÇÇ x v ‚Üí mem (E1 ++ E2) v
    G v (inj‚ÇÅ œÅ1x) = ‚àà-++‚Å∫À° ((proj‚ÇÅ œÅ‚ÇÅ=E1) v œÅ1x)
    G v (inj‚ÇÇ œÅ2x) = ‚àà-++‚Å∫ ≥ E1 ((proj‚ÇÅ œÅ‚ÇÇ=E2) v œÅ2x)

    H : ‚àÄ{E} ‚Üí mem E ‚äÜ mem E1 ‚Üí mem (E ++ E2) ‚äÜ (Œª v ‚Üí œÅ‚ÇÅ x v ‚äé œÅ‚ÇÇ x v)
    H {[]} E<E1 v v‚ààE++E2 = inj‚ÇÇ ((proj‚ÇÇ œÅ‚ÇÇ=E2) v v‚ààE++E2)
    H {x ‚à∑ E} E<E1 .x (here refl) = inj‚ÇÅ ((proj‚ÇÇ œÅ‚ÇÅ=E1) x (E<E1 x (here refl)))
    H {x ‚à∑ E} E<E1 v (there v‚ààE++E2) =
       H (Œª v z ‚Üí E<E1 v (there z)) v v‚ààE++E2

join-lub : ‚àÄ{œÅ œÅ‚ÇÅ œÅ‚ÇÇ} ‚Üí œÅ‚ÇÅ ‚äÜ‚Çë œÅ ‚Üí œÅ‚ÇÇ ‚äÜ‚Çë œÅ ‚Üí œÅ‚ÇÅ ‚äî‚Çë œÅ‚ÇÇ ‚äÜ‚Çë œÅ
join-lub {œÅ} {œÅ‚ÇÅ} {œÅ‚ÇÇ} œÅ‚ÇÅ‚äÜœÅ œÅ‚ÇÇ‚äÜœÅ x v (inj‚ÇÅ v‚ààœÅ‚ÇÅx) = œÅ‚ÇÅ‚äÜœÅ x v v‚ààœÅ‚ÇÅx
join-lub {œÅ} {œÅ‚ÇÅ} {œÅ‚ÇÇ} œÅ‚ÇÅ‚äÜœÅ œÅ‚ÇÇ‚äÜœÅ x v (inj‚ÇÇ v‚ààœÅ‚ÇÇx) = œÅ‚ÇÇ‚äÜœÅ x v v‚ààœÅ‚ÇÇx

join-‚äÜ-left : ‚àÄ{œÅ‚ÇÅ œÅ‚ÇÇ} ‚Üí œÅ‚ÇÅ ‚äÜ‚Çë œÅ‚ÇÅ ‚äî‚Çë œÅ‚ÇÇ
join-‚äÜ-left {œÅ‚ÇÅ}{œÅ‚ÇÇ} = Œª x d z ‚Üí inj‚ÇÅ z

join-‚äÜ-right : ‚àÄ{œÅ‚ÇÅ œÅ‚ÇÇ} ‚Üí œÅ‚ÇÇ ‚äÜ‚Çë œÅ‚ÇÅ ‚äî‚Çë œÅ‚ÇÇ
join-‚äÜ-right {œÅ‚ÇÅ}{œÅ‚ÇÇ} = Œª x d z ‚Üí inj‚ÇÇ z

monotone-env : (Env ‚Üí ùí´ Value) ‚Üí Set‚ÇÅ
monotone-env D = ‚àÄ {œÅ œÅ‚Ä≤} ‚Üí (‚àÄ x ‚Üí œÅ x ‚äÜ œÅ‚Ä≤ x)  ‚Üí  D œÅ ‚äÜ D œÅ‚Ä≤

{- Relations on Results and Products ------------------------------------------}

rel-results : ‚àÄ{‚Ñì}{T : Set ‚Ñì}
   ‚Üí (‚àÄ b ‚Üí Result T b ‚Üí Result T b ‚Üí Set‚ÇÅ)
   ‚Üí ‚àÄ bs ‚Üí Tuple bs (Result T) ‚Üí Tuple bs (Result T) ‚Üí Set‚ÇÅ
rel-results R [] xs ys = Lift (lsuc lzero) True
rel-results R (b ‚à∑ bs) ‚ü® x , xs ‚ü© ‚ü® y , ys ‚ü© =
    (R b x y) √ó (rel-results R bs xs ys)

‚äÜ-result : ‚àÄ b ‚Üí Result (ùí´ Value) b ‚Üí Result (ùí´ Value) b ‚Üí Set‚ÇÅ
‚äÜ-result ‚ñ† x y = Lift (lsuc lzero) (x ‚äÜ y)
‚äÜ-result (ŒΩ b) f g = ‚àÄ X ‚Üí ‚äÜ-result b (f X) (g X)
‚äÜ-result (‚àÅ b) x y = ‚äÜ-result b x y

‚äÜ-results = rel-results ‚äÜ-result

‚äÜ-result‚áí‚äÜ : ‚àÄ D E ‚Üí ‚äÜ-result ‚ñ† D E ‚Üí D ‚äÜ E
‚äÜ-result‚áí‚äÜ D E (lift D‚äÜE) = D‚äÜE

rel-results‚áírel-‚àè : ‚àÄ{n}{xs ys : ‚àè n (ùí´ Value)}
    {R : ‚àÄ b ‚Üí Result (ùí´ Value) b ‚Üí Result (ùí´ Value) b ‚Üí Set‚ÇÅ}
    {R‚Ä≤ : ùí´ Value ‚Üí ùí´ Value ‚Üí Set}
  ‚Üí (‚àÄ x y ‚Üí R ‚ñ† x y ‚Üí R‚Ä≤ x y)
  ‚Üí rel-results R (replicate n ‚ñ†) xs ys
  ‚Üí rel-‚àè R‚Ä≤ xs ys
rel-results‚áírel-‚àè {zero} R‚áíR‚Ä≤ (lift tt) = tt
rel-results‚áírel-‚àè {suc n}{‚ü® x , xs ‚ü©}{‚ü® y , ys ‚ü©} R‚áíR‚Ä≤ ‚ü® Rxy , R[xs,ys] ‚ü© =
    ‚ü® R‚áíR‚Ä≤ x y Rxy , (rel-results‚áírel-‚àè R‚áíR‚Ä≤ R[xs,ys]) ‚ü©

{- Continuous -----------------------------------------------------------------}

continuous-‚àà : (Env ‚Üí ùí´ Value) ‚Üí Env ‚Üí Value ‚Üí Set‚ÇÅ
continuous-‚àà D œÅ v = v ‚àà D œÅ
   ‚Üí Œ£[ œÅ‚Ä≤ ‚àà Env ] finite-env œÅ‚Ä≤ √ó œÅ‚Ä≤ ‚äÜ‚Çë œÅ  √ó v ‚àà D œÅ‚Ä≤

continuous-env : (Env ‚Üí ùí´ Value) ‚Üí Env ‚Üí Set‚ÇÅ
continuous-env D œÅ = ‚àÄ v ‚Üí v ‚àà D œÅ
                     ‚Üí Œ£[ œÅ‚Ä≤ ‚àà Env ] finite-env œÅ‚Ä≤ √ó œÅ‚Ä≤ ‚äÜ‚Çë œÅ  √ó v ‚àà D œÅ‚Ä≤

{- creates an environment that maps each variable x to
   a singleton set of some element in œÅ x.  -}
initial-finite-env : (œÅ : Env) ‚Üí (NE-œÅ : nonempty-env œÅ) ‚Üí Env
initial-finite-env œÅ NE-œÅ x
    with NE-œÅ x
... | ‚ü® v , v‚ààœÅx ‚ü© = ‚åà v ‚åâ

initial-fin : (œÅ : Env) ‚Üí (NE-œÅ : nonempty-env œÅ)
   ‚Üí finite-env (initial-finite-env œÅ NE-œÅ)
initial-fin œÅ NE-œÅ x
    with NE-œÅ x
... | ‚ü® v , v‚ààœÅx ‚ü© =
      ‚ü® v ‚à∑ [] ,
      ‚ü® ‚ü® (Œª {w refl ‚Üí (here refl)}) , (Œª {w (here refl) ‚Üí refl}) ‚ü© , (Œª ()) ‚ü© ‚ü©

initial-fin-‚äÜ : (œÅ : Env) ‚Üí (NE-œÅ : nonempty-env œÅ)
  ‚Üí initial-finite-env œÅ NE-œÅ ‚äÜ‚Çë œÅ
initial-fin-‚äÜ œÅ NE-œÅ x v v‚ààinitial
    with NE-œÅ x
... | ‚ü® w , w‚ààœÅx ‚ü© rewrite v‚ààinitial = w‚ààœÅx

{- single-env maps x to D and any other variable y to something in œÅ y. -}
single-env : Var ‚Üí ùí´ Value ‚Üí (œÅ : Env) ‚Üí (NE-œÅ : nonempty-env œÅ) ‚Üí Env
single-env x D œÅ NE-œÅ y
    with x ‚âü y
... | yes refl = D
... | no neq
    with NE-œÅ y
... | ‚ü® v , v‚ààœÅy ‚ü© = ‚åà v ‚åâ    

single-fin : ‚àÄ{v}{x}{œÅ}{NE-œÅ} ‚Üí finite-env (single-env x ‚åà v ‚åâ œÅ NE-œÅ)
single-fin {v}{x}{œÅ}{NE-œÅ} y
    with x ‚âü y
... | yes refl =
    ‚ü® v ‚à∑ [] ,
    ‚ü® ‚ü® (Œª{v‚ÇÅ refl ‚Üí (here refl)}) , (Œª{v‚ÇÅ (here refl) ‚Üí refl}) ‚ü© , (Œª ()) ‚ü© ‚ü©
... | no neq
    with NE-œÅ y
... | ‚ü® w , w‚ààœÅy ‚ü© =
    ‚ü® w ‚à∑ [] ,
    ‚ü® ‚ü® (Œª{v‚ÇÅ refl ‚Üí here refl}) , (Œª{v‚ÇÅ (here refl) ‚Üí refl}) ‚ü© , (Œª ()) ‚ü© ‚ü©

single-‚äÜ : ‚àÄ{œÅ x v}{NE-œÅ : nonempty-env œÅ}
  ‚Üí  v ‚àà œÅ x  ‚Üí  single-env x ‚åà v ‚åâ œÅ NE-œÅ ‚äÜ‚Çë œÅ
single-‚äÜ {œÅ}{x}{v}{NE-œÅ} v‚ààœÅx y w sing 
    with x ‚âü y
... | yes refl rewrite sing = v‚ààœÅx
... | no neq
    with NE-œÅ y
... | ‚ü® u , u‚ààœÅy ‚ü© rewrite sing = u‚ààœÅy

v‚ààsingle[xv]x : ‚àÄ{v}{x}{œÅ}{NE-œÅ} ‚Üí v ‚àà single-env x ‚åà v ‚åâ œÅ NE-œÅ x
v‚ààsingle[xv]x {v}{x}
    with x ‚âü x
... | yes refl = refl
... | no neq = ‚ä•-elim (neq refl)

continuous-‚àà‚áí‚äÜ : ‚àÄ E œÅ (NE-œÅ : nonempty-env œÅ)
   ‚Üí monotone-env E
   ‚Üí ‚àÄ V ‚Üí mem V ‚äÜ E œÅ
   ‚Üí (‚àÄ v ‚Üí v ‚àà mem V ‚Üí continuous-‚àà E œÅ v)
   ‚Üí Œ£[ œÅ‚Ä≤ ‚àà Env ] finite-env œÅ‚Ä≤ √ó œÅ‚Ä≤ ‚äÜ‚Çë œÅ  √ó mem V ‚äÜ E œÅ‚Ä≤
continuous-‚àà‚áí‚äÜ E œÅ NE-œÅ mE [] V‚äÜE ‚àÄv‚ààV‚áícont =
   ‚ü® initial-finite-env œÅ NE-œÅ , ‚ü® initial-fin œÅ NE-œÅ ,
   ‚ü® initial-fin-‚äÜ œÅ NE-œÅ , (Œª d ()) ‚ü© ‚ü© ‚ü©
continuous-‚àà‚áí‚äÜ E œÅ NE-œÅ mE (v ‚à∑ V) v‚à∑V‚äÜEœÅ v‚ààV‚áícont
    with continuous-‚àà‚áí‚äÜ E œÅ NE-œÅ mE V (Œª d z ‚Üí v‚à∑V‚äÜEœÅ d (there z))
                (Œª w w‚ààV w‚ààMœÅ ‚Üí v‚ààV‚áícont w (there w‚ààV) w‚ààMœÅ)
... | ‚ü® œÅ‚ÇÅ , ‚ü® fœÅ‚ÇÅ , ‚ü® œÅ‚ÇÅ‚äÜœÅ , V‚äÜEœÅ‚ÇÅ ‚ü© ‚ü© ‚ü©
    with v‚ààV‚áícont v (here refl) (v‚à∑V‚äÜEœÅ v (here refl))
... | ‚ü® œÅ‚ÇÇ , ‚ü® fœÅ‚ÇÇ , ‚ü® œÅ‚ÇÇ‚äÜœÅ , v‚ààEœÅ‚ÇÇ ‚ü© ‚ü© ‚ü© =    
    ‚ü® œÅ‚ÇÉ , ‚ü® (join-finite-env fœÅ‚ÇÅ fœÅ‚ÇÇ) , ‚ü® (join-lub œÅ‚ÇÅ‚äÜœÅ œÅ‚ÇÇ‚äÜœÅ) ,
    G ‚ü© ‚ü© ‚ü©
    where
    œÅ‚ÇÉ = œÅ‚ÇÅ ‚äî‚Çë œÅ‚ÇÇ
    G : (d : Value) ‚Üí mem (v ‚à∑ V) d ‚Üí d ‚àà E œÅ‚ÇÉ
    G d (here refl) = mE {œÅ‚ÇÇ}{œÅ‚ÇÉ} join-‚äÜ-right v v‚ààEœÅ‚ÇÇ
    G d (there m) = mE {œÅ‚ÇÅ}{œÅ‚ÇÉ} join-‚äÜ-left d (V‚äÜEœÅ‚ÇÅ d m)

‚ñ™-continuous : ‚àÄ{D E : Env ‚Üí ùí´ Value}{œÅ}{NE-œÅ : nonempty-env œÅ}{w}
  ‚Üí w ‚àà (D œÅ) ‚ñ™ (E œÅ)
  ‚Üí continuous-env D œÅ ‚Üí continuous-env E œÅ
  ‚Üí monotone-env D ‚Üí monotone-env E
  ‚Üí Œ£[ œÅ‚ÇÉ ‚àà Env ] finite-env œÅ‚ÇÉ √ó œÅ‚ÇÉ ‚äÜ‚Çë œÅ √ó w ‚àà (D œÅ‚ÇÉ) ‚ñ™ (E œÅ‚ÇÉ)
‚ñ™-continuous {D}{E}{œÅ}{NE-œÅ}{w} ‚ü® V , ‚ü® V‚Ü¶w‚ààDœÅ , ‚ü® V‚äÜEœÅ , V‚â¢[] ‚ü© ‚ü© ‚ü©
    IH-D IH-E mD mE
    with IH-D (V ‚Ü¶ w) V‚Ü¶w‚ààDœÅ 
... | ‚ü® œÅ‚ÇÅ , ‚ü® fœÅ‚ÇÅ , ‚ü® œÅ‚ÇÅ‚äÜœÅ , V‚Ü¶w‚ààDœÅ‚ÇÅ ‚ü© ‚ü© ‚ü©
    with ((continuous-‚àà‚áí‚äÜ E œÅ NE-œÅ mE) V V‚äÜEœÅ (Œª v v‚ààV ‚Üí IH-E v))
... | ‚ü® œÅ‚ÇÇ , ‚ü® fœÅ‚ÇÇ , ‚ü® œÅ‚ÇÇ‚äÜœÅ , V‚äÜEœÅ‚ÇÇ ‚ü© ‚ü© ‚ü© =
   ‚ü® œÅ‚ÇÉ , ‚ü® join-finite-env fœÅ‚ÇÅ fœÅ‚ÇÇ , ‚ü® join-lub œÅ‚ÇÅ‚äÜœÅ œÅ‚ÇÇ‚äÜœÅ , w‚ààD‚ñ™EœÅ‚ÇÉ ‚ü© ‚ü© ‚ü© 
    where
    œÅ‚ÇÉ = œÅ‚ÇÅ ‚äî‚Çë œÅ‚ÇÇ
    œÅ‚ÇÅ‚äÜœÅ‚ÇÉ = Œª x v z ‚Üí inj‚ÇÅ z
    V‚Ü¶w‚ààDœÅ‚ÇÉ : V ‚Ü¶ w ‚àà D œÅ‚ÇÉ
    V‚Ü¶w‚ààDœÅ‚ÇÉ = mD œÅ‚ÇÅ‚äÜœÅ‚ÇÉ (V ‚Ü¶ w) V‚Ü¶w‚ààDœÅ‚ÇÅ
    œÅ‚ÇÇ‚äÜœÅ‚ÇÑ = Œª x v z ‚Üí inj‚ÇÇ z
    V‚äÜEœÅ‚ÇÉ : mem V ‚äÜ E œÅ‚ÇÉ
    V‚äÜEœÅ‚ÇÉ v v‚ààV = mE œÅ‚ÇÇ‚äÜœÅ‚ÇÑ v (V‚äÜEœÅ‚ÇÇ v v‚ààV)
    w‚ààD‚ñ™EœÅ‚ÇÉ : w ‚àà (D œÅ‚ÇÉ) ‚ñ™ (E œÅ‚ÇÉ)
    w‚ààD‚ñ™EœÅ‚ÇÉ = ‚ü® V , ‚ü® V‚Ü¶w‚ààDœÅ‚ÇÉ , ‚ü® V‚äÜEœÅ‚ÇÉ , V‚â¢[] ‚ü© ‚ü© ‚ü©

Œõ-continuous : ‚àÄ{E : Env  ‚Üí ùí´ Value}{œÅ}{NE-œÅ}{v}
  ‚Üí v ‚àà Œõ (Œª D ‚Üí E (D ‚Ä¢ œÅ))
  ‚Üí (‚àÄ V ‚Üí V ‚â¢ [] ‚Üí continuous-env E (mem V ‚Ä¢ œÅ))
  ‚Üí monotone-env E
  ‚Üí Œ£[ œÅ‚Ä≤ ‚àà Env ] finite-env œÅ‚Ä≤ √ó œÅ‚Ä≤ ‚äÜ‚Çë œÅ √ó v ‚àà Œõ (Œª D ‚Üí E (D ‚Ä¢ œÅ‚Ä≤))
Œõ-continuous {E}{œÅ}{NE-œÅ}{V ‚Ü¶ w} ‚ü® w‚ààEV‚Ä¢œÅ , V‚â¢[] ‚ü© IH mE
    with IH V V‚â¢[] w w‚ààEV‚Ä¢œÅ
... | ‚ü® œÅ‚Ä≤ , ‚ü® fœÅ‚Ä≤ , ‚ü® œÅ‚Ä≤‚äÜV‚Ä¢œÅ , w‚ààEœÅ‚Ä≤ ‚ü© ‚ü© ‚ü© =
    ‚ü® (Œª x ‚Üí œÅ‚Ä≤ (suc x)) , ‚ü® (Œª x ‚Üí fœÅ‚Ä≤ (suc x)) , ‚ü® (Œª x ‚Üí œÅ‚Ä≤‚äÜV‚Ä¢œÅ (suc x)) ,
    ‚ü® mE{œÅ‚Ä≤}{mem V ‚Ä¢ (Œª x ‚Üí œÅ‚Ä≤ (suc x))} G w w‚ààEœÅ‚Ä≤ , V‚â¢[] ‚ü© ‚ü© ‚ü© ‚ü©
    where G : (x : Var) ‚Üí œÅ‚Ä≤ x ‚äÜ (mem V ‚Ä¢ (Œª x‚ÇÅ ‚Üí œÅ‚Ä≤ (suc x‚ÇÅ))) x
          G zero v v‚ààœÅ‚Ä≤x = œÅ‚Ä≤‚äÜV‚Ä¢œÅ 0 v v‚ààœÅ‚Ä≤x
          G (suc x) v v‚ààœÅ‚Ä≤x = v‚ààœÅ‚Ä≤x
Œõ-continuous {E}{œÅ}{NE-œÅ}{ŒΩ} v‚ààŒõ IH mE =
  ‚ü® initial-finite-env œÅ NE-œÅ , ‚ü® initial-fin œÅ NE-œÅ , ‚ü® initial-fin-‚äÜ œÅ NE-œÅ ,
      tt ‚ü© ‚ü© ‚ü©

cons-continuous : ‚àÄ{D E : Env ‚Üí ùí´ Value}{œÅ}{NE-œÅ : nonempty-env œÅ}{w : Value}
  ‚Üí w ‚àà „Äò D œÅ , E œÅ „Äô
  ‚Üí continuous-env D œÅ ‚Üí continuous-env E œÅ ‚Üí monotone-env D ‚Üí monotone-env E
  ‚Üí Œ£[ œÅ‚ÇÉ ‚àà Env ] finite-env œÅ‚ÇÉ √ó œÅ‚ÇÉ ‚äÜ‚Çë œÅ √ó w ‚àà „Äò D œÅ‚ÇÉ , E œÅ‚ÇÉ „Äô
cons-continuous {D} {E} {œÅ} {NE-œÅ} {‚ù≤ u , v ‚ù≥} ‚ü® u‚ààDœÅ , v‚ààEœÅ ‚ü© cD cE mD mE
    with cD u u‚ààDœÅ 
... | ‚ü® œÅ‚ÇÅ , ‚ü® fœÅ‚ÇÅ , ‚ü® œÅ‚ÇÅ‚äÜœÅ , u‚ààDœÅ‚ÇÅ ‚ü© ‚ü© ‚ü©
    with cE v v‚ààEœÅ 
... | ‚ü® œÅ‚ÇÇ , ‚ü® fœÅ‚ÇÇ , ‚ü® œÅ‚ÇÇ‚äÜœÅ , v‚ààEœÅ‚ÇÇ ‚ü© ‚ü© ‚ü© =
    ‚ü® œÅ‚ÇÉ , ‚ü® join-finite-env fœÅ‚ÇÅ fœÅ‚ÇÇ , ‚ü® join-lub œÅ‚ÇÅ‚äÜœÅ œÅ‚ÇÇ‚äÜœÅ ,
    ‚ü® u‚ààDœÅ‚ÇÉ , v‚ààDœÅ‚ÇÉ ‚ü© ‚ü© ‚ü© ‚ü©
    where
    œÅ‚ÇÉ = œÅ‚ÇÅ ‚äî‚Çë œÅ‚ÇÇ
    œÅ‚ÇÅ‚äÜœÅ‚ÇÉ = Œª x v z ‚Üí inj‚ÇÅ z
    u‚ààDœÅ‚ÇÉ = mD œÅ‚ÇÅ‚äÜœÅ‚ÇÉ u u‚ààDœÅ‚ÇÅ
    œÅ‚ÇÇ‚äÜœÅ‚ÇÉ = Œª x v z ‚Üí inj‚ÇÇ z
    v‚ààDœÅ‚ÇÉ = mE œÅ‚ÇÇ‚äÜœÅ‚ÇÉ v v‚ààEœÅ‚ÇÇ

car-continuous : ‚àÄ{D : Env ‚Üí ùí´ Value}{œÅ}{NE-œÅ : nonempty-env œÅ}{u : Value}
  ‚Üí u ‚àà car (D œÅ) ‚Üí continuous-env D œÅ ‚Üí monotone-env D
  ‚Üí Œ£[ œÅ‚ÇÉ ‚àà Env ] finite-env œÅ‚ÇÉ √ó œÅ‚ÇÉ ‚äÜ‚Çë œÅ √ó u ‚àà car (D œÅ‚ÇÉ)
car-continuous {D} {œÅ} {NE-œÅ} {u} ‚ü® v , uv‚ààDœÅ ‚ü© cD mD
    with cD ‚ù≤ u , v ‚ù≥ uv‚ààDœÅ 
... | ‚ü® œÅ‚ÇÅ , ‚ü® fœÅ‚ÇÅ , ‚ü® œÅ‚ÇÅ‚äÜœÅ , uv‚ààDœÅ‚ÇÅ ‚ü© ‚ü© ‚ü© =
      ‚ü® œÅ‚ÇÅ , ‚ü® fœÅ‚ÇÅ , ‚ü® œÅ‚ÇÅ‚äÜœÅ , ‚ü® v , mD (Œª x d z ‚Üí z) ‚ù≤ u , v ‚ù≥ uv‚ààDœÅ‚ÇÅ ‚ü© ‚ü© ‚ü© ‚ü©

cdr-continuous : ‚àÄ{D : Env ‚Üí ùí´ Value}{œÅ}{NE-œÅ : nonempty-env œÅ}{u : Value}
  ‚Üí u ‚àà cdr (D œÅ) ‚Üí continuous-env D œÅ ‚Üí monotone-env D
  ‚Üí Œ£[ œÅ‚ÇÉ ‚àà Env ] finite-env œÅ‚ÇÉ √ó œÅ‚ÇÉ ‚äÜ‚Çë œÅ √ó u ‚àà cdr (D œÅ‚ÇÉ)
cdr-continuous {D} {œÅ} {NE-œÅ} {v} ‚ü® u , uv‚ààDœÅ ‚ü© cD mD
    with cD ‚ù≤ u , v ‚ù≥ uv‚ààDœÅ 
... | ‚ü® œÅ‚ÇÅ , ‚ü® fœÅ‚ÇÅ , ‚ü® œÅ‚ÇÅ‚äÜœÅ , uv‚ààDœÅ‚ÇÅ ‚ü© ‚ü© ‚ü© =
      ‚ü® œÅ‚ÇÅ , ‚ü® fœÅ‚ÇÅ , ‚ü® œÅ‚ÇÅ‚äÜœÅ , ‚ü® u , mD (Œª x d z ‚Üí z) ‚ù≤ u , v ‚ù≥ uv‚ààDœÅ‚ÇÅ ‚ü© ‚ü© ‚ü© ‚ü©

mono-envs : ‚àÄ{n} ‚Üí (Env ‚Üí ‚àè n (ùí´ Value)) ‚Üí Set‚ÇÅ
mono-envs {n} Ds = ‚àÄ{œÅ œÅ‚Ä≤} ‚Üí œÅ ‚äÜ‚Çë œÅ‚Ä≤ ‚Üí ‚äÜ-results (replicate n ‚ñ†) (Ds œÅ) (Ds œÅ‚Ä≤)

continuous-envs : ‚àÄ{n} ‚Üí (Env ‚Üí ‚àè n (ùí´ Value)) ‚Üí Env ‚Üí Set‚ÇÅ
continuous-envs {n} Ds œÅ = ‚àÄ v ‚Üí v ‚àà ùíØ n (Ds œÅ)
                     ‚Üí Œ£[ œÅ‚Ä≤ ‚àà Env ] finite-env œÅ‚Ä≤ √ó œÅ‚Ä≤ ‚äÜ‚Çë œÅ  √ó v ‚àà ùíØ n (Ds œÅ‚Ä≤)

next-Ds : ‚àÄ{n} ‚Üí (Env ‚Üí ‚àè (suc n) (ùí´ Value)) ‚Üí (Env ‚Üí ‚àè n (ùí´ Value))
next-Ds Ds œÅ
    with Ds œÅ
... | ‚ü® D , Ds‚Ä≤ ‚ü© = Ds‚Ä≤

next-Ds-proj‚ÇÇ : ‚àÄ{n}{Ds : Env ‚Üí ‚àè (suc n) (ùí´ Value)}{œÅ}
   ‚Üí next-Ds Ds œÅ ‚â° proj‚ÇÇ (Ds œÅ)
next-Ds-proj‚ÇÇ {n} {Ds} {œÅ}
    with Ds œÅ
... | ‚ü® a , b ‚ü© = refl

next-mono-envs : ‚àÄ{n}{Ds : Env ‚Üí ‚àè (suc n) (ùí´ Value)}
   ‚Üí mono-envs Ds ‚Üí mono-envs (next-Ds Ds)
next-mono-envs {zero} {Ds} mDs {œÅ} {œÅ‚Ä≤} _ = lift tt
next-mono-envs {suc n} {Ds} mDs {œÅ} {œÅ‚Ä≤} œÅ‚äÜœÅ‚Ä≤
    with Ds œÅ | Ds œÅ‚Ä≤ | mDs {œÅ} {œÅ‚Ä≤} œÅ‚äÜœÅ‚Ä≤
... | ‚ü® DœÅ , DsœÅ ‚ü© | ‚ü® DœÅ‚Ä≤ , DsœÅ‚Ä≤ ‚ü© | ‚ü® _ , mDs‚Ä≤ ‚ü© = mDs‚Ä≤

proj‚ÇÅ-mono-envs : ‚àÄ{n}{Ds : Env ‚Üí ‚àè (suc n) (ùí´ Value)}{œÅ}{œÅ‚Ä≤}
   ‚Üí œÅ ‚äÜ‚Çë œÅ‚Ä≤  ‚Üí mono-envs Ds ‚Üí proj‚ÇÅ (Ds œÅ) ‚äÜ proj‚ÇÅ (Ds œÅ‚Ä≤)
proj‚ÇÅ-mono-envs {n}{Ds}{œÅ}{œÅ‚Ä≤} œÅ‚äÜœÅ‚Ä≤ mDs
    with Ds œÅ | mDs {œÅ}{œÅ‚Ä≤} œÅ‚äÜœÅ‚Ä≤
... | ‚ü® DœÅ , DsœÅ ‚ü© | ‚ü® lift mD , _ ‚ü© = mD

next-NE-Ds : ‚àÄ{n}{Ds : Env ‚Üí ‚àè (suc n) (ùí´ Value)}{œÅ}
  ‚Üí NE-‚àè (Ds œÅ)
  ‚Üí NE-‚àè (next-Ds Ds œÅ)
next-NE-Ds{n}{Ds}{œÅ} NE-Ds
    with Ds œÅ | NE-Ds
... | ‚ü® DœÅ , DsœÅ ‚ü© | ‚ü® NE-D , NE-Ds‚Ä≤ ‚ü© = NE-Ds‚Ä≤

next-cont-envs : ‚àÄ{n}{Ds : Env ‚Üí ‚àè (suc n) (ùí´ Value)}
     {œÅ}{NE-œÅ : nonempty-env œÅ}{w}
   ‚Üí proj‚ÇÅ (Ds œÅ) w
   ‚Üí continuous-envs Ds œÅ
   ‚Üí continuous-envs (next-Ds Ds) œÅ
next-cont-envs {n} {Ds} {œÅ}{NE-œÅ}{w} w‚ààDsœÅ cDs u u‚àà
    with Ds œÅ | cDs | u‚àà 
... | ‚ü® D , Ds‚Ä≤ ‚ü© | cDDs | u‚àà‚Ä≤ 
    with v‚ààùíØ‚áív‚â°‚ü¨vs‚ü≠ u‚àà‚Ä≤
... | ‚ü® vs , refl ‚ü©
    with cDDs ‚ü¨ w ‚à∑ vs ‚ü≠ ‚ü® w‚ààDsœÅ , u‚àà‚Ä≤ ‚ü©
... | ‚ü® œÅ‚Ä≤ , ‚ü® fœÅ‚Ä≤ , ‚ü® œÅ‚Ä≤‚äÜœÅ , ‚ü® aaa , vs‚ààDsœÅ‚Ä≤ ‚ü© ‚ü© ‚ü© ‚ü© =
    ‚ü® œÅ‚Ä≤ , ‚ü® fœÅ‚Ä≤ , ‚ü® œÅ‚Ä≤‚äÜœÅ , vs‚ààDsœÅ‚Ä≤ ‚ü© ‚ü© ‚ü©

ùíØ-continuous : ‚àÄ{n}{Ds : Env ‚Üí ‚àè n (ùí´ Value)}{œÅ}{NE-œÅ : nonempty-env œÅ}
    {u : Value}
  ‚Üí u ‚àà ùíØ n (Ds œÅ) ‚Üí continuous-envs Ds œÅ ‚Üí mono-envs Ds
  ‚Üí Œ£[ œÅ‚ÇÉ ‚àà Env ] finite-env œÅ‚ÇÉ √ó œÅ‚ÇÉ ‚äÜ‚Çë œÅ √ó u ‚àà ùíØ n (Ds œÅ‚ÇÉ)
ùíØ-continuous {zero} {Ds} {œÅ} {NE-œÅ} {u} u‚ààùíØDs cDs mDs 
    with Ds (initial-finite-env œÅ NE-œÅ) | u
... | lift tt | ‚ü¨ [] ‚ü≠ =
  ‚ü® (initial-finite-env œÅ NE-œÅ) , ‚ü® initial-fin œÅ NE-œÅ ,
  ‚ü® initial-fin-‚äÜ œÅ NE-œÅ , tt ‚ü© ‚ü© ‚ü©
ùíØ-continuous {suc n} {Ds} {œÅ} {NE-œÅ} {‚ü¨ v ‚à∑ vs ‚ü≠} ‚ü® v‚ààDœÅ , vs‚ààùíØDsœÅ ‚ü© cDs mDs 
    with ùíØ-continuous{n}{next-Ds Ds}{œÅ}{NE-œÅ}{‚ü¨ vs ‚ü≠}
       (subst (Œª X ‚Üí ‚ü¨ vs ‚ü≠ ‚àà ùíØ n X) (sym (next-Ds-proj‚ÇÇ{n}{Ds}{œÅ})) vs‚ààùíØDsœÅ)
       (next-cont-envs{NE-œÅ = NE-œÅ}{w = v} v‚ààDœÅ cDs)
       (Œª {œÅ}{œÅ‚Ä≤} ‚Üí next-mono-envs mDs {œÅ}{œÅ‚Ä≤})
... | ‚ü® œÅ‚ÇÅ , ‚ü® fœÅ‚ÇÅ , ‚ü® œÅ‚ÇÅ‚äÜœÅ , vs‚ààùíØDsœÅ‚ÇÅ ‚ü© ‚ü© ‚ü©
    with cDs ‚ü¨ v ‚à∑ vs ‚ü≠ ‚ü® v‚ààDœÅ , vs‚ààùíØDsœÅ ‚ü© 
... | ‚ü® œÅ‚ÇÇ , ‚ü® fœÅ‚ÇÇ , ‚ü® œÅ‚ÇÇ‚äÜœÅ , ‚ü® v‚ààDœÅ‚ÇÇ , vs‚ààDsœÅ‚ÇÇ ‚ü© ‚ü© ‚ü© ‚ü©
    with  mDs {œÅ‚ÇÅ}{œÅ‚ÇÅ ‚äî‚Çë œÅ‚ÇÇ} Œª x d z ‚Üí inj‚ÇÅ z
... | ‚ü® _ , DsœÅ‚ÇÅ‚äÜDsœÅ‚ÇÉ ‚ü© 
    with  mDs {œÅ‚ÇÇ}{œÅ‚ÇÅ ‚äî‚Çë œÅ‚ÇÇ} Œª x d z ‚Üí inj‚ÇÇ z
... | ‚ü® lift DœÅ‚ÇÇ‚äÜDœÅ‚ÇÉ , _ ‚ü© =
    let v‚ààDœÅ‚ÇÉ = DœÅ‚ÇÇ‚äÜDœÅ‚ÇÉ v v‚ààDœÅ‚ÇÇ in
    let vs‚ààDsœÅ‚ÇÉ = ùíØ-mono-‚äÜ (rel-results‚áírel-‚àè ‚äÜ-result‚áí‚äÜ DsœÅ‚ÇÅ‚äÜDsœÅ‚ÇÉ)
                            ‚ü¨ vs ‚ü≠ vs‚ààùíØDsœÅ‚ÇÅ in
    ‚ü® œÅ‚ÇÉ , ‚ü® (join-finite-env fœÅ‚ÇÅ fœÅ‚ÇÇ) , ‚ü® (join-lub œÅ‚ÇÅ‚äÜœÅ œÅ‚ÇÇ‚äÜœÅ) ,
    ‚ü® v‚ààDœÅ‚ÇÉ , vs‚ààDsœÅ‚ÇÉ ‚ü© ‚ü© ‚ü© ‚ü©
    where
    œÅ‚ÇÉ = œÅ‚ÇÅ ‚äî‚Çë œÅ‚ÇÇ

proj-continuous : ‚àÄ{D : Env ‚Üí ùí´ Value}{œÅ}{NE-œÅ : nonempty-env œÅ}{u : Value}{i}
  ‚Üí u ‚àà proj (D œÅ) i ‚Üí continuous-env D œÅ ‚Üí monotone-env D
  ‚Üí Œ£[ œÅ‚ÇÉ ‚àà Env ] finite-env œÅ‚ÇÉ √ó œÅ‚ÇÉ ‚äÜ‚Çë œÅ √ó u ‚àà proj (D œÅ‚ÇÉ) i
proj-continuous {D} {œÅ} {NE-œÅ} {u} {i} ‚ü® vs , ‚ü® lt , ‚ü® vs‚ààDœÅ , refl ‚ü© ‚ü© ‚ü© cD mD
    with cD ‚ü¨ vs ‚ü≠ vs‚ààDœÅ
... | ‚ü® œÅ‚Ä≤ , ‚ü® fœÅ‚Ä≤ , ‚ü® œÅ‚Ä≤‚äÜœÅ , vs‚ààDœÅ‚Ä≤ ‚ü© ‚ü© ‚ü© =     
    ‚ü® œÅ‚Ä≤ , ‚ü® fœÅ‚Ä≤ , ‚ü® œÅ‚Ä≤‚äÜœÅ ,
    ‚ü® vs , ‚ü® lt , ‚ü® mD (Œª x d z ‚Üí z) ‚ü¨ vs ‚ü≠ vs‚ààDœÅ‚Ä≤ , refl ‚ü© ‚ü© ‚ü© ‚ü© ‚ü© ‚ü©

‚Ñí-continuous : ‚àÄ{D : Env ‚Üí ùí´ Value}{œÅ}{NE-œÅ : nonempty-env œÅ}{u : Value}
  ‚Üí u ‚àà ‚Ñí (D œÅ)  ‚Üí  continuous-env D œÅ  ‚Üí  monotone-env D
  ‚Üí Œ£[ œÅ‚ÇÉ ‚àà Env ] finite-env œÅ‚ÇÉ √ó œÅ‚ÇÉ ‚äÜ‚Çë œÅ √ó u ‚àà ‚Ñí (D œÅ‚ÇÉ)
‚Ñí-continuous {D} {œÅ} {NE-œÅ} {left U} ‚ü® U‚â¢[] , U‚äÜDœÅ ‚ü© cD mD
    with continuous-‚àà‚áí‚äÜ D œÅ NE-œÅ mD U U‚äÜDœÅ (Œª v v‚ààDœÅ ‚Üí cD v)
... | ‚ü® œÅ‚ÇÅ , ‚ü® fœÅ‚ÇÅ , ‚ü® œÅ‚ÇÅ‚äÜœÅ , U‚äÜDœÅ‚ÇÅ ‚ü© ‚ü© ‚ü© =
    ‚ü® œÅ‚ÇÅ , ‚ü® fœÅ‚ÇÅ , ‚ü® œÅ‚ÇÅ‚äÜœÅ , ‚ü® U‚â¢[] , U‚äÜDœÅ‚ÇÅ ‚ü© ‚ü© ‚ü© ‚ü©

‚Ñõ-continuous : ‚àÄ{D : Env ‚Üí ùí´ Value}{œÅ}{NE-œÅ : nonempty-env œÅ}{u : Value}
  ‚Üí u ‚àà ‚Ñõ (D œÅ)  ‚Üí  continuous-env D œÅ  ‚Üí  monotone-env D
  ‚Üí Œ£[ œÅ‚ÇÉ ‚àà Env ] finite-env œÅ‚ÇÉ √ó œÅ‚ÇÉ ‚äÜ‚Çë œÅ √ó u ‚àà ‚Ñõ (D œÅ‚ÇÉ)
‚Ñõ-continuous {D} {œÅ} {NE-œÅ} {right U} ‚ü® U‚â¢[] , U‚äÜDœÅ ‚ü© cD mD
    with continuous-‚àà‚áí‚äÜ D œÅ NE-œÅ mD U U‚äÜDœÅ (Œª v v‚ààDœÅ ‚Üí cD v)
... | ‚ü® œÅ‚ÇÅ , ‚ü® fœÅ‚ÇÅ , ‚ü® œÅ‚ÇÅ‚äÜœÅ , U‚äÜDœÅ‚ÇÅ ‚ü© ‚ü© ‚ü© =
    ‚ü® œÅ‚ÇÅ , ‚ü® fœÅ‚ÇÅ , ‚ü® œÅ‚ÇÅ‚äÜœÅ , ‚ü® U‚â¢[] , U‚äÜDœÅ‚ÇÅ ‚ü© ‚ü© ‚ü© ‚ü©

ùíû-continuous : ‚àÄ{D E F : Env ‚Üí ùí´ Value}{œÅ : Env}{NE-œÅ : nonempty-env œÅ}{u}
  ‚Üí u ‚àà ùíû (D œÅ) (Œõ (Œª X ‚Üí E (X ‚Ä¢ œÅ))) (Œõ (Œª X ‚Üí F (X ‚Ä¢ œÅ)))
  ‚Üí continuous-env D œÅ ‚Üí monotone-env D
  ‚Üí (‚àÄ V ‚Üí V ‚â¢ [] ‚Üí continuous-env E (mem V ‚Ä¢ œÅ)) ‚Üí monotone-env E
  ‚Üí (‚àÄ V ‚Üí V ‚â¢ [] ‚Üí continuous-env F (mem V ‚Ä¢ œÅ)) ‚Üí monotone-env F
  ‚Üí Œ£[ œÅ‚Ä≤ ‚àà Env ] finite-env œÅ‚Ä≤ √ó œÅ‚Ä≤ ‚äÜ‚Çë œÅ
      √ó u ‚àà ùíû (D œÅ‚Ä≤) (Œõ (Œª X ‚Üí E (X ‚Ä¢ œÅ‚Ä≤))) (Œõ (Œª X ‚Üí F (X ‚Ä¢ œÅ‚Ä≤)))
ùíû-continuous {D}{E}{F} {œÅ} {NE-œÅ} {w}
    (inj‚ÇÅ ‚ü® V , ‚ü® inlV‚ààD , ‚ü® w‚ààEV‚Ä¢œÅ , V‚â¢[] ‚ü© ‚ü© ‚ü©)
    cD mD cE mE cF mF 
    with cD (left V) inlV‚ààD
... | ‚ü® œÅ‚ÇÅ , ‚ü® fœÅ‚ÇÅ , ‚ü® œÅ‚ÇÅ‚äÜœÅ , inlV‚ààDœÅ‚ÇÅ ‚ü© ‚ü© ‚ü©
    with cE V V‚â¢[] w w‚ààEV‚Ä¢œÅ
... | ‚ü® œÅ‚ÇÇ , ‚ü® fœÅ‚ÇÇ , ‚ü® œÅ‚ÇÇ‚äÜV‚Ä¢œÅ , w‚ààEœÅ‚ÇÇ ‚ü© ‚ü© ‚ü© =
    ‚ü® œÅ‚ÇÉ , ‚ü® join-finite-env fœÅ‚ÇÅ fœÅ‚ÇÇ‚Ä≤ , ‚ü® join-lub œÅ‚ÇÅ‚äÜœÅ œÅ‚ÇÇ‚Ä≤‚äÜœÅ , u‚ààùíûœÅ‚ÇÉ ‚ü© ‚ü© ‚ü©
    where
    œÅ‚ÇÇ‚Ä≤ = (Œª x ‚Üí œÅ‚ÇÇ (suc x))
    œÅ‚ÇÉ = œÅ‚ÇÅ ‚äî‚Çë œÅ‚ÇÇ‚Ä≤ 
    fœÅ‚ÇÇ‚Ä≤ : finite-env œÅ‚ÇÇ‚Ä≤
    fœÅ‚ÇÇ‚Ä≤ x = fœÅ‚ÇÇ (suc x)
    œÅ‚ÇÇ‚Ä≤‚äÜœÅ : œÅ‚ÇÇ‚Ä≤ ‚äÜ‚Çë œÅ
    œÅ‚ÇÇ‚Ä≤‚äÜœÅ x = œÅ‚ÇÇ‚äÜV‚Ä¢œÅ (suc x)
    G : (x : ‚Ñï) (d : Value) ‚Üí œÅ‚ÇÇ x d ‚Üí (mem V ‚Ä¢ œÅ‚ÇÉ) x d
    G zero d d‚ààœÅ‚ÇÇx = œÅ‚ÇÇ‚äÜV‚Ä¢œÅ zero d d‚ààœÅ‚ÇÇx
    G (suc x) d d‚ààœÅ‚ÇÇx = inj‚ÇÇ d‚ààœÅ‚ÇÇx
    u‚ààùíûœÅ‚ÇÉ = inj‚ÇÅ ‚ü® V , ‚ü® (mD (Œª x d z ‚Üí inj‚ÇÅ z) (left V) inlV‚ààDœÅ‚ÇÅ) ,
                  ‚ü® (mE G w w‚ààEœÅ‚ÇÇ) ,
                    V‚â¢[] ‚ü© ‚ü© ‚ü©
ùíû-continuous {D}{E}{F} {œÅ} {NE-œÅ} {w}
    (inj‚ÇÇ ‚ü® V , ‚ü® inrV‚ààD , ‚ü® w‚ààFV‚Ä¢œÅ , V‚â¢[] ‚ü© ‚ü© ‚ü©)
    cD mD cE mE cF mF 
    with cD (right V) inrV‚ààD
... | ‚ü® œÅ‚ÇÅ , ‚ü® fœÅ‚ÇÅ , ‚ü® œÅ‚ÇÅ‚äÜœÅ , inrV‚ààDœÅ‚ÇÅ ‚ü© ‚ü© ‚ü©
    with cF V V‚â¢[] w w‚ààFV‚Ä¢œÅ
... | ‚ü® œÅ‚ÇÇ , ‚ü® fœÅ‚ÇÇ , ‚ü® œÅ‚ÇÇ‚äÜV‚Ä¢œÅ , w‚ààFœÅ‚ÇÇ ‚ü© ‚ü© ‚ü© =
    ‚ü® œÅ‚ÇÉ , ‚ü® join-finite-env fœÅ‚ÇÅ fœÅ‚ÇÇ‚Ä≤ , ‚ü® join-lub œÅ‚ÇÅ‚äÜœÅ œÅ‚ÇÇ‚Ä≤‚äÜœÅ , u‚ààùíûœÅ‚ÇÉ ‚ü© ‚ü© ‚ü©
    where
    œÅ‚ÇÇ‚Ä≤ = (Œª x ‚Üí œÅ‚ÇÇ (suc x))
    œÅ‚ÇÉ = œÅ‚ÇÅ ‚äî‚Çë œÅ‚ÇÇ‚Ä≤ 
    fœÅ‚ÇÇ‚Ä≤ : finite-env œÅ‚ÇÇ‚Ä≤
    fœÅ‚ÇÇ‚Ä≤ x = fœÅ‚ÇÇ (suc x)
    œÅ‚ÇÇ‚Ä≤‚äÜœÅ : œÅ‚ÇÇ‚Ä≤ ‚äÜ‚Çë œÅ
    œÅ‚ÇÇ‚Ä≤‚äÜœÅ x = œÅ‚ÇÇ‚äÜV‚Ä¢œÅ (suc x)
    G : (x : ‚Ñï) (d : Value) ‚Üí œÅ‚ÇÇ x d ‚Üí (mem V ‚Ä¢ œÅ‚ÇÉ) x d
    G zero d d‚ààœÅ‚ÇÇx = œÅ‚ÇÇ‚äÜV‚Ä¢œÅ zero d d‚ààœÅ‚ÇÇx
    G (suc x) d d‚ààœÅ‚ÇÇx = inj‚ÇÇ d‚ààœÅ‚ÇÇx
    u‚ààùíûœÅ‚ÇÉ = inj‚ÇÇ ‚ü® V , ‚ü® (mD (Œª x d z ‚Üí inj‚ÇÅ z) (right V) inrV‚ààDœÅ‚ÇÅ) ,
                  ‚ü® (mF G w w‚ààFœÅ‚ÇÇ) ,
                    V‚â¢[] ‚ü© ‚ü© ‚ü©



