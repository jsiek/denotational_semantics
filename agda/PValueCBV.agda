module PValueCBV where

{-

  This is an adaptation of the call-by-name models P(œâ) of Scott
  (1976) and D‚Çê of Engeler (1981) to call-by-value.

-}

open import Primitives
open import Utilities using (extensionality)
open import SetsAsPredicates
open import Var
open import Substitution using (_‚Ä¢_)
open import ScopedTuple hiding (ùí´)
open import Syntax using (Sig; ext; ŒΩ; ‚ñ†; Var; _‚Ä¢_; ‚Üë; id; _‚®ü_) public
open import Sig

open import Data.Empty using (‚ä•-elim) renaming (‚ä• to False)
open import Data.List using (List ; _‚à∑_ ; []; _++_; length; replicate)
open import Data.List.Relation.Unary.Any using (Any)
open import Data.List.Properties using (++-conicalÀ°)
open import Data.List.Membership.Propositional renaming (_‚àà_ to _‚ãµ_)
open import Data.List.Membership.Propositional.Properties
  using (‚àà-++‚Å∫À°; ‚àà-++‚Å∫ ≥)
open import Data.List.Relation.Unary.Any using (here; there) 
open import Data.Nat using (‚Ñï; zero; suc; _‚âü_; _<_; z‚â§n; s‚â§s; _+_)
open import Data.Nat.Properties
open import Data.Product using (_√ó_; Œ£; Œ£-syntax; proj‚ÇÅ; proj‚ÇÇ)
    renaming (_,_ to ‚ü®_,_‚ü©)
open import Data.Sum using (_‚äé_; inj‚ÇÅ; inj‚ÇÇ)
open import Data.Unit using (tt) renaming (‚ä§ to True)
open import Data.Unit.Polymorphic using (‚ä§) renaming (tt to ptt)
open import Relation.Binary.PropositionalEquality
    using (_‚â°_; _‚â¢_; refl; sym; subst)
open import Level using (Level; Lift; lift)
    renaming (zero to lzero; suc to lsuc)
open import Relation.Nullary using (¬¨_; Dec; yes; no)

{- Denotational Values --------------------------------------------------------}

data Value : Set where
  const : {B : Base} ‚Üí base-rep B ‚Üí Value  {- A primitive constant of type B. -}
  _‚Ü¶_ : List Value ‚Üí Value ‚Üí Value        {- An entry in a function's graph. -}
  ŒΩ : Value      {- A function. Needed for CBV to distinguish from diverging. -}

{- Denotational Operators -----------------------------------------------------}

Œõ : (ùí´ Value ‚Üí ùí´ Value) ‚Üí ùí´ Value
Œõ f (const k) = False
Œõ f (V ‚Ü¶ w) = w ‚àà f (mem V)  √ó  V ‚â¢ []
Œõ f ŒΩ = True

infix 10 _‚ñ™_
_‚ñ™_ : ùí´ Value ‚Üí ùí´ Value ‚Üí ùí´ Value
D‚ÇÅ ‚ñ™ D‚ÇÇ = Œª w ‚Üí Œ£[ V ‚àà List Value ] (V ‚Ü¶ w ‚àà D‚ÇÅ)  √ó  (mem V ‚äÜ D‚ÇÇ)  √ó  V ‚â¢ []

‚Ñò : (P : Prim) ‚Üí rep P ‚Üí ùí´ Value
‚Ñò (base B) k (const {B‚Ä≤} k‚Ä≤)
    with base-eq? B B‚Ä≤
... | yes refl = k ‚â° k‚Ä≤
... | no neq = False
‚Ñò (base B) k (V ‚Ü¶ w) = False
‚Ñò (base B) k ŒΩ = False
‚Ñò (B ‚áí P) f (const k) = False
‚Ñò (B ‚áí P) f (V ‚Ü¶ w) =
   Œ£[ k ‚àà base-rep B ] V ‚â° (const {B} k) ‚à∑ []  √ó  w ‚àà ‚Ñò P (f k)
‚Ñò (B ‚áí P) f ŒΩ = True

{- Basic Properties of Denotational Operators ---------------------------------}

k‚àà‚Ñòk : ‚àÄ{B}{k} ‚Üí const {B} k ‚àà ‚Ñò (base B) k
k‚àà‚Ñòk {B}{k}
    with base-eq? B B
... | yes refl = refl
... | no neq = neq refl

k‚Ä≤‚àà‚Ñòk‚áíP‚â°B : ‚àÄ{P B}{k}{k‚Ä≤} ‚Üí const {B} k‚Ä≤ ‚àà ‚Ñò P k ‚Üí P ‚â° base B
k‚Ä≤‚àà‚Ñòk‚áíP‚â°B {base B‚Ä≤} {B} {k} {k‚Ä≤} k‚Ä≤‚àà‚Ñòk
    with base-eq? B‚Ä≤ B
... | yes refl = refl
... | no neq = ‚ä•-elim k‚Ä≤‚àà‚Ñòk

k‚Ä≤‚àà‚Ñòk‚áík‚Ä≤‚â°k : ‚àÄ{B}{k}{k‚Ä≤} ‚Üí const {B} k‚Ä≤ ‚àà ‚Ñò (base B) k ‚Üí k‚Ä≤ ‚â° k
k‚Ä≤‚àà‚Ñòk‚áík‚Ä≤‚â°k {B}{k}{k‚Ä≤} m
    with base-eq? B B
... | yes refl = sym m
... | no neq = ‚ä•-elim m

v‚àà‚Ñòk‚áív‚â°k : ‚àÄ{v}{B}{k} ‚Üí v ‚àà ‚Ñò (base B) k ‚Üí v ‚â° const {B} k
v‚àà‚Ñòk‚áív‚â°k {const {B‚Ä≤} k‚Ä≤} {B} {k} v‚àà
    with base-eq? B B‚Ä≤
... | yes refl rewrite v‚àà = refl
... | no neq = ‚ä•-elim v‚àà

{- Application is a Congruence ------------------------------------------------}

abstract
  ‚ñ™-mono-‚äÜ : ‚àÄ{D‚ÇÅ D‚ÇÇ D‚ÇÉ D‚ÇÑ : ùí´ Value}
    ‚Üí D‚ÇÅ ‚äÜ D‚ÇÉ  ‚Üí  D‚ÇÇ ‚äÜ D‚ÇÑ
    ‚Üí D‚ÇÅ ‚ñ™ D‚ÇÇ ‚äÜ D‚ÇÉ ‚ñ™ D‚ÇÑ
  ‚ñ™-mono-‚äÜ D13 D24 w ‚ü® V , ‚ü® wv‚ààD1 , ‚ü® V<D2 , V‚â¢[] ‚ü© ‚ü© ‚ü© =
     ‚ü® V , ‚ü® (D13 (V ‚Ü¶ w) wv‚ààD1) , ‚ü® (Œª d z ‚Üí D24 d (V<D2 d z)) , V‚â¢[] ‚ü© ‚ü© ‚ü©
     
‚ñ™-cong : ‚àÄ{D‚ÇÅ D‚ÇÇ D‚ÇÉ D‚ÇÑ : ùí´ Value}
  ‚Üí D‚ÇÅ ‚âÉ D‚ÇÉ  ‚Üí  D‚ÇÇ ‚âÉ D‚ÇÑ
  ‚Üí D‚ÇÅ ‚ñ™ D‚ÇÇ ‚âÉ D‚ÇÉ ‚ñ™ D‚ÇÑ
‚ñ™-cong ‚ü® d13 , d31 ‚ü© ‚ü® d24 , d42 ‚ü© = ‚ü® (‚ñ™-mono-‚äÜ d13 d24) , (‚ñ™-mono-‚äÜ d31 d42) ‚ü©


{- Abstraction is Extensional ---- --------------------------------------------}

Œõ-ext-‚äÜ : ‚àÄ{F‚ÇÅ F‚ÇÇ : (ùí´ Value) ‚Üí (ùí´ Value)}
  ‚Üí (‚àÄ {X} ‚Üí F‚ÇÅ X ‚äÜ F‚ÇÇ X)
  ‚Üí Œõ F‚ÇÅ ‚äÜ Œõ F‚ÇÇ
Œõ-ext-‚äÜ {F‚ÇÅ} {F‚ÇÇ} F‚ÇÅ‚äÜF‚ÇÇ (V ‚Ü¶ w) ‚ü® w‚ààF‚ÇÅX , V‚â¢[] ‚ü© = ‚ü® F‚ÇÅ‚äÜF‚ÇÇ w w‚ààF‚ÇÅX , V‚â¢[] ‚ü©
Œõ-ext-‚äÜ {F‚ÇÅ} {F‚ÇÇ} F‚ÇÅ‚äÜF‚ÇÇ ŒΩ v‚àà = tt

Œõ-ext : ‚àÄ{F‚ÇÅ F‚ÇÇ : (ùí´ Value) ‚Üí (ùí´ Value)}
  ‚Üí (‚àÄ {X} ‚Üí F‚ÇÅ X ‚âÉ F‚ÇÇ X)
  ‚Üí Œõ F‚ÇÅ ‚âÉ Œõ F‚ÇÇ
Œõ-ext {F‚ÇÅ}{F‚ÇÇ} F‚ÇÅ‚âÉF‚ÇÇ = ‚ü® Œõ-ext-‚äÜ (proj‚ÇÅ F‚ÇÅ‚âÉF‚ÇÇ) , Œõ-ext-‚äÜ (proj‚ÇÇ F‚ÇÅ‚âÉF‚ÇÇ) ‚ü©


{- Abstraction followed by Application is the identity ------------------------}

continuous : (F : ùí´ Value ‚Üí ùí´ Value) ‚Üí Set‚ÇÅ
continuous F = ‚àÄ X E ‚Üí mem E ‚äÜ F X ‚Üí nonempty X
    ‚Üí Œ£[ D ‚àà List Value ] mem D ‚äÜ X  √ó  mem E ‚äÜ F (mem D)  √ó  D ‚â¢ []

monotone : (F : ùí´ Value ‚Üí ùí´ Value) ‚Üí Set‚ÇÅ
monotone F = ‚àÄ D‚ÇÅ D‚ÇÇ ‚Üí D‚ÇÅ ‚äÜ D‚ÇÇ ‚Üí F D‚ÇÅ ‚äÜ F D‚ÇÇ

abstract
  Œõ-‚ñ™-id : ‚àÄ {F : ùí´ Value ‚Üí ùí´ Value}{X : ùí´ Value}
    ‚Üí continuous F ‚Üí monotone F ‚Üí nonempty X
    ‚Üí (Œõ F) ‚ñ™ X ‚âÉ F X
  Œõ-‚ñ™-id {F}{X} Fcont Fmono NE-X = ‚ü® (Œõ-‚ñ™-‚äÜ Fmono) , (‚äÜ-Œõ-‚ñ™ Fcont NE-X) ‚ü©
    where
    Œõ-‚ñ™-‚äÜ : ‚àÄ {F : ùí´ Value ‚Üí ùí´ Value}{X : ùí´ Value}
      ‚Üí monotone F  ‚Üí  (Œõ F) ‚ñ™ X ‚äÜ F X
    Œõ-‚ñ™-‚äÜ {F} {X} Fmono w ‚ü® V , ‚ü® ‚ü® w‚ààFV , _ ‚ü© , ‚ü® V<X , V‚â¢[] ‚ü© ‚ü© ‚ü© =
        Fmono (mem V) X V<X w w‚ààFV

    ‚äÜ-Œõ-‚ñ™ : ‚àÄ {F : ùí´ Value ‚Üí ùí´ Value}{X : ùí´ Value}
      ‚Üí continuous F  ‚Üí nonempty X ‚Üí  F X ‚äÜ (Œõ F) ‚ñ™ X
    ‚äÜ-Œõ-‚ñ™ {F}{X} Fcont NE-X w w‚ààFX 
        with Fcont X (w ‚à∑ []) (Œª { d (here refl) ‚Üí w‚ààFX }) NE-X
    ... | ‚ü® D , ‚ü® D<X , ‚ü® w‚ààFD , NE-D ‚ü© ‚ü© ‚ü© =
          ‚ü® D , ‚ü® ‚ü® w‚ààFD w (here refl) , NE-D ‚ü© , ‚ü® D<X , NE-D ‚ü© ‚ü© ‚ü©

  
{- Primitive Abstraction followed by Application is the identity --------------}

abstract
  ‚Ñò-‚ñ™-‚âÉ : ‚àÄ{B}{P}{f}{k}  ‚Üí  (‚Ñò (B ‚áí P) f) ‚ñ™ (‚Ñò (base B) k) ‚âÉ ‚Ñò P (f k)
  ‚Ñò-‚ñ™-‚âÉ {B}{P}{f}{k} = ‚ü® fwd , back ‚ü©
    where
    fwd : ‚Ñò (B ‚áí P) f ‚ñ™ ‚Ñò (base B) k ‚äÜ ‚Ñò P (f k)
    fwd w ‚ü® V , ‚ü® ‚ü® k‚Ä≤ , ‚ü® refl , w‚ààfk‚Ä≤ ‚ü© ‚ü© , ‚ü® k‚Ä≤‚ààpk , _ ‚ü© ‚ü© ‚ü©
        with k‚Ä≤‚ààpk (const k‚Ä≤) (here refl)
    ... | pkk‚Ä≤ rewrite k‚Ä≤‚àà‚Ñòk‚áík‚Ä≤‚â°k pkk‚Ä≤ = w‚ààfk‚Ä≤
    back : ‚Ñò P (f k) ‚äÜ ‚Ñò (B ‚áí P) f ‚ñ™ ‚Ñò (base B) k
    back w w‚ààfk = ‚ü® (const k ‚à∑ []) , ‚ü® ‚ü® k , ‚ü® refl , w‚ààfk ‚ü© ‚ü© ,
                  ‚ü® (Œª {d (here refl) ‚Üí k‚àà‚Ñòk}) , (Œª ()) ‚ü© ‚ü© ‚ü©

{- Environments ---------------------------------------------------------------}

Env : Set‚ÇÅ
Env = Var ‚Üí ùí´ Value

nonempty-env : Env ‚Üí Set
nonempty-env œÅ = ‚àÄ x ‚Üí nonempty (œÅ x)

infix 5 _‚äÜ‚Çë_
_‚äÜ‚Çë_ : Env ‚Üí Env ‚Üí Set
œÅ‚ÇÅ ‚äÜ‚Çë œÅ‚ÇÇ = ‚àÄ x ‚Üí œÅ‚ÇÅ x ‚äÜ œÅ‚ÇÇ x

‚äÜ‚Çë-trans : ‚àÄ{œÅ‚ÇÅ œÅ‚ÇÇ œÅ‚ÇÉ} ‚Üí œÅ‚ÇÅ ‚äÜ‚Çë œÅ‚ÇÇ ‚Üí œÅ‚ÇÇ ‚äÜ‚Çë œÅ‚ÇÉ ‚Üí œÅ‚ÇÅ ‚äÜ‚Çë œÅ‚ÇÉ
‚äÜ‚Çë-trans {œÅ‚ÇÅ}{œÅ‚ÇÇ}{œÅ‚ÇÉ} r12 r23 x = Œª d z ‚Üí r23 x d (r12 x d z)

extend-nonempty-env : ‚àÄ{œÅ}{X}
   ‚Üí nonempty-env œÅ  ‚Üí  nonempty X  ‚Üí  nonempty-env (X ‚Ä¢ œÅ)
extend-nonempty-env {œÅ} {X} NE-œÅ NE-X zero = NE-X
extend-nonempty-env {œÅ} {X} NE-œÅ V‚â¢[] (suc x) = NE-œÅ x

env-ext : ‚àÄ{œÅ œÅ‚Ä≤}{X} ‚Üí œÅ ‚äÜ‚Çë œÅ‚Ä≤ ‚Üí (x : Var) ‚Üí (X ‚Ä¢ œÅ) x ‚äÜ (X ‚Ä¢ œÅ‚Ä≤) x
env-ext œÅ<œÅ‚Ä≤ zero d d‚àà = d‚àà
env-ext œÅ<œÅ‚Ä≤ (suc x) = œÅ<œÅ‚Ä≤ x

{- environments whose codomain are finite nonempty sets -}
finite-env : Env ‚Üí Set
finite-env œÅ = ‚àÄ x ‚Üí Œ£[ E ‚àà List Value ] œÅ x ‚âÉ mem E √ó E ‚â¢ []

infix 6 _‚äî‚Çë_
_‚äî‚Çë_ : Env ‚Üí Env ‚Üí Env
(œÅ‚ÇÅ ‚äî‚Çë œÅ‚ÇÇ) x v = œÅ‚ÇÅ x v ‚äé œÅ‚ÇÇ x v

join-finite-env : ‚àÄ{œÅ‚ÇÅ œÅ‚ÇÇ}  ‚Üí finite-env œÅ‚ÇÅ  ‚Üí  finite-env œÅ‚ÇÇ
   ‚Üí finite-env (œÅ‚ÇÅ ‚äî‚Çë œÅ‚ÇÇ)
join-finite-env {œÅ‚ÇÅ}{œÅ‚ÇÇ} f1 f2 x
    with f1 x
... | ‚ü® E1 , ‚ü® œÅ‚ÇÅ=E1 , NE-E1 ‚ü© ‚ü©
    with f2 x
... | ‚ü® E2 , ‚ü® œÅ‚ÇÇ=E2 , NE-E2 ‚ü© ‚ü© =
    ‚ü® (E1 ++ E2) , ‚ü® ‚ü® G , (H {E1} Œª d z ‚Üí z) ‚ü© ,
      (Œª E12=[] ‚Üí NE-E1 (++-conicalÀ° E1 E2 E12=[])) ‚ü© ‚ü©
    where
    G : (v : Value) ‚Üí œÅ‚ÇÅ x v ‚äé œÅ‚ÇÇ x v ‚Üí mem (E1 ++ E2) v
    G v (inj‚ÇÅ œÅ1x) = ‚àà-++‚Å∫À° ((proj‚ÇÅ œÅ‚ÇÅ=E1) v œÅ1x)
    G v (inj‚ÇÇ œÅ2x) = ‚àà-++‚Å∫ ≥ E1 ((proj‚ÇÅ œÅ‚ÇÇ=E2) v œÅ2x)

    H : ‚àÄ{E} ‚Üí mem E ‚äÜ mem E1 ‚Üí mem (E ++ E2) ‚äÜ (Œª v ‚Üí œÅ‚ÇÅ x v ‚äé œÅ‚ÇÇ x v)
    H {[]} E<E1 v v‚ààE++E2 = inj‚ÇÇ ((proj‚ÇÇ œÅ‚ÇÇ=E2) v v‚ààE++E2)
    H {x ‚à∑ E} E<E1 .x (here refl) = inj‚ÇÅ ((proj‚ÇÇ œÅ‚ÇÅ=E1) x (E<E1 x (here refl)))
    H {x ‚à∑ E} E<E1 v (there v‚ààE++E2) =
       H (Œª v z ‚Üí E<E1 v (there z)) v v‚ààE++E2

join-lub : ‚àÄ{œÅ œÅ‚ÇÅ œÅ‚ÇÇ} ‚Üí œÅ‚ÇÅ ‚äÜ‚Çë œÅ ‚Üí œÅ‚ÇÇ ‚äÜ‚Çë œÅ ‚Üí œÅ‚ÇÅ ‚äî‚Çë œÅ‚ÇÇ ‚äÜ‚Çë œÅ
join-lub {œÅ} {œÅ‚ÇÅ} {œÅ‚ÇÇ} œÅ‚ÇÅ‚äÜœÅ œÅ‚ÇÇ‚äÜœÅ x v (inj‚ÇÅ v‚ààœÅ‚ÇÅx) = œÅ‚ÇÅ‚äÜœÅ x v v‚ààœÅ‚ÇÅx
join-lub {œÅ} {œÅ‚ÇÅ} {œÅ‚ÇÇ} œÅ‚ÇÅ‚äÜœÅ œÅ‚ÇÇ‚äÜœÅ x v (inj‚ÇÇ v‚ààœÅ‚ÇÇx) = œÅ‚ÇÇ‚äÜœÅ x v v‚ààœÅ‚ÇÇx

join-‚äÜ-left : ‚àÄ{œÅ‚ÇÅ œÅ‚ÇÇ} ‚Üí œÅ‚ÇÅ ‚äÜ‚Çë œÅ‚ÇÅ ‚äî‚Çë œÅ‚ÇÇ
join-‚äÜ-left {œÅ‚ÇÅ}{œÅ‚ÇÇ} = Œª x d z ‚Üí inj‚ÇÅ z

join-‚äÜ-right : ‚àÄ{œÅ‚ÇÅ œÅ‚ÇÇ} ‚Üí œÅ‚ÇÇ ‚äÜ‚Çë œÅ‚ÇÅ ‚äî‚Çë œÅ‚ÇÇ
join-‚äÜ-right {œÅ‚ÇÅ}{œÅ‚ÇÇ} = Œª x d z ‚Üí inj‚ÇÇ z

monotone-env : (Env ‚Üí ùí´ Value) ‚Üí Set‚ÇÅ
monotone-env D = ‚àÄ {œÅ œÅ‚Ä≤} ‚Üí (‚àÄ x ‚Üí œÅ x ‚äÜ œÅ‚Ä≤ x)  ‚Üí  D œÅ ‚äÜ D œÅ‚Ä≤

{- Relations on Results and Products ------------------------------------------}

rel-results : ‚àÄ{‚Ñì}{T : Set ‚Ñì}
   ‚Üí (‚àÄ b ‚Üí Result T b ‚Üí Result T b ‚Üí Set‚ÇÅ)
   ‚Üí ‚àÄ bs ‚Üí Tuple bs (Result T) ‚Üí Tuple bs (Result T) ‚Üí Set‚ÇÅ
rel-results R [] xs ys = Lift (lsuc lzero) True
rel-results R (b ‚à∑ bs) ‚ü® x , xs ‚ü© ‚ü® y , ys ‚ü© =
    (R b x y) √ó (rel-results R bs xs ys)

‚äÜ-result : ‚àÄ b ‚Üí Result (ùí´ Value) b ‚Üí Result (ùí´ Value) b ‚Üí Set‚ÇÅ
‚äÜ-result ‚ñ† x y = Lift (lsuc lzero) (x ‚äÜ y)
‚äÜ-result (ŒΩ b) f g = ‚àÄ X ‚Üí ‚äÜ-result b (f X) (g X)
‚äÜ-result (‚àÅ b) x y = ‚äÜ-result b x y

‚äÜ-results = rel-results ‚äÜ-result

‚äÜ-result‚áí‚äÜ : ‚àÄ D E ‚Üí ‚äÜ-result ‚ñ† D E ‚Üí D ‚äÜ E
‚äÜ-result‚áí‚äÜ D E (lift D‚äÜE) = D‚äÜE

{- Continuous -----------------------------------------------------------------}

continuous-‚àà : (Env ‚Üí ùí´ Value) ‚Üí Env ‚Üí Value ‚Üí Set‚ÇÅ
continuous-‚àà D œÅ v = v ‚àà D œÅ
   ‚Üí Œ£[ œÅ‚Ä≤ ‚àà Env ] finite-env œÅ‚Ä≤ √ó œÅ‚Ä≤ ‚äÜ‚Çë œÅ  √ó v ‚àà D œÅ‚Ä≤

continuous-env : (Env ‚Üí ùí´ Value) ‚Üí Env ‚Üí Set‚ÇÅ
continuous-env D œÅ = ‚àÄ v ‚Üí v ‚àà D œÅ
                     ‚Üí Œ£[ œÅ‚Ä≤ ‚àà Env ] finite-env œÅ‚Ä≤ √ó œÅ‚Ä≤ ‚äÜ‚Çë œÅ  √ó v ‚àà D œÅ‚Ä≤

{- creates an environment that maps each variable x to
   a singleton set of some element in œÅ x.  -}
initial-finite-env : (œÅ : Env) ‚Üí (NE-œÅ : nonempty-env œÅ) ‚Üí Env
initial-finite-env œÅ NE-œÅ x
    with NE-œÅ x
... | ‚ü® v , v‚ààœÅx ‚ü© = ‚åà v ‚åâ

initial-fin : (œÅ : Env) ‚Üí (NE-œÅ : nonempty-env œÅ)
   ‚Üí finite-env (initial-finite-env œÅ NE-œÅ)
initial-fin œÅ NE-œÅ x
    with NE-œÅ x
... | ‚ü® v , v‚ààœÅx ‚ü© =
      ‚ü® v ‚à∑ [] ,
      ‚ü® ‚ü® (Œª {w refl ‚Üí (here refl)}) , (Œª {w (here refl) ‚Üí refl}) ‚ü© , (Œª ()) ‚ü© ‚ü©

initial-fin-‚äÜ : (œÅ : Env) ‚Üí (NE-œÅ : nonempty-env œÅ)
  ‚Üí initial-finite-env œÅ NE-œÅ ‚äÜ‚Çë œÅ
initial-fin-‚äÜ œÅ NE-œÅ x v v‚ààinitial
    with NE-œÅ x
... | ‚ü® w , w‚ààœÅx ‚ü© rewrite v‚ààinitial = w‚ààœÅx

{- single-env maps x to D and any other variable y to something in œÅ y. -}
single-env : Var ‚Üí ùí´ Value ‚Üí (œÅ : Env) ‚Üí (NE-œÅ : nonempty-env œÅ) ‚Üí Env
single-env x D œÅ NE-œÅ y
    with x ‚âü y
... | yes refl = D
... | no neq
    with NE-œÅ y
... | ‚ü® v , v‚ààœÅy ‚ü© = ‚åà v ‚åâ    

single-fin : ‚àÄ{v}{x}{œÅ}{NE-œÅ} ‚Üí finite-env (single-env x ‚åà v ‚åâ œÅ NE-œÅ)
single-fin {v}{x}{œÅ}{NE-œÅ} y
    with x ‚âü y
... | yes refl =
    ‚ü® v ‚à∑ [] ,
    ‚ü® ‚ü® (Œª{v‚ÇÅ refl ‚Üí (here refl)}) , (Œª{v‚ÇÅ (here refl) ‚Üí refl}) ‚ü© , (Œª ()) ‚ü© ‚ü©
... | no neq
    with NE-œÅ y
... | ‚ü® w , w‚ààœÅy ‚ü© =
    ‚ü® w ‚à∑ [] ,
    ‚ü® ‚ü® (Œª{v‚ÇÅ refl ‚Üí here refl}) , (Œª{v‚ÇÅ (here refl) ‚Üí refl}) ‚ü© , (Œª ()) ‚ü© ‚ü©

single-‚äÜ : ‚àÄ{œÅ x v}{NE-œÅ : nonempty-env œÅ}
  ‚Üí  v ‚àà œÅ x  ‚Üí  single-env x ‚åà v ‚åâ œÅ NE-œÅ ‚äÜ‚Çë œÅ
single-‚äÜ {œÅ}{x}{v}{NE-œÅ} v‚ààœÅx y w sing 
    with x ‚âü y
... | yes refl rewrite sing = v‚ààœÅx
... | no neq
    with NE-œÅ y
... | ‚ü® u , u‚ààœÅy ‚ü© rewrite sing = u‚ààœÅy

v‚ààsingle[xv]x : ‚àÄ{v}{x}{œÅ}{NE-œÅ} ‚Üí v ‚àà single-env x ‚åà v ‚åâ œÅ NE-œÅ x
v‚ààsingle[xv]x {v}{x}
    with x ‚âü x
... | yes refl = refl
... | no neq = ‚ä•-elim (neq refl)

continuous-‚àà‚áí‚äÜ : ‚àÄ E œÅ (NE-œÅ : nonempty-env œÅ)
   ‚Üí monotone-env E
   ‚Üí ‚àÄ V ‚Üí mem V ‚äÜ E œÅ
   ‚Üí (‚àÄ v ‚Üí v ‚àà mem V ‚Üí continuous-‚àà E œÅ v)
   ‚Üí Œ£[ œÅ‚Ä≤ ‚àà Env ] finite-env œÅ‚Ä≤ √ó œÅ‚Ä≤ ‚äÜ‚Çë œÅ  √ó mem V ‚äÜ E œÅ‚Ä≤
continuous-‚àà‚áí‚äÜ E œÅ NE-œÅ mE [] V‚äÜE ‚àÄv‚ààV‚áícont =
   ‚ü® initial-finite-env œÅ NE-œÅ , ‚ü® initial-fin œÅ NE-œÅ ,
   ‚ü® initial-fin-‚äÜ œÅ NE-œÅ , (Œª d ()) ‚ü© ‚ü© ‚ü©
continuous-‚àà‚áí‚äÜ E œÅ NE-œÅ mE (v ‚à∑ V) v‚à∑V‚äÜEœÅ v‚ààV‚áícont
    with continuous-‚àà‚áí‚äÜ E œÅ NE-œÅ mE V (Œª d z ‚Üí v‚à∑V‚äÜEœÅ d (there z))
                (Œª w w‚ààV w‚ààMœÅ ‚Üí v‚ààV‚áícont w (there w‚ààV) w‚ààMœÅ)
... | ‚ü® œÅ‚ÇÅ , ‚ü® fœÅ‚ÇÅ , ‚ü® œÅ‚ÇÅ‚äÜœÅ , V‚äÜEœÅ‚ÇÅ ‚ü© ‚ü© ‚ü©
    with v‚ààV‚áícont v (here refl) (v‚à∑V‚äÜEœÅ v (here refl))
... | ‚ü® œÅ‚ÇÇ , ‚ü® fœÅ‚ÇÇ , ‚ü® œÅ‚ÇÇ‚äÜœÅ , v‚ààEœÅ‚ÇÇ ‚ü© ‚ü© ‚ü© =    
    ‚ü® œÅ‚ÇÉ , ‚ü® (join-finite-env fœÅ‚ÇÅ fœÅ‚ÇÇ) , ‚ü® (join-lub œÅ‚ÇÅ‚äÜœÅ œÅ‚ÇÇ‚äÜœÅ) ,
    G ‚ü© ‚ü© ‚ü©
    where
    œÅ‚ÇÉ = œÅ‚ÇÅ ‚äî‚Çë œÅ‚ÇÇ
    G : (d : Value) ‚Üí mem (v ‚à∑ V) d ‚Üí d ‚àà E œÅ‚ÇÉ
    G d (here refl) = mE {œÅ‚ÇÇ}{œÅ‚ÇÉ} join-‚äÜ-right v v‚ààEœÅ‚ÇÇ
    G d (there m) = mE {œÅ‚ÇÅ}{œÅ‚ÇÉ} join-‚äÜ-left d (V‚äÜEœÅ‚ÇÅ d m)

abstract
  ‚ñ™-continuous : ‚àÄ{D E : Env ‚Üí ùí´ Value}{œÅ}{NE-œÅ : nonempty-env œÅ}{w}
    ‚Üí w ‚àà (D œÅ) ‚ñ™ (E œÅ)
    ‚Üí continuous-env D œÅ ‚Üí continuous-env E œÅ
    ‚Üí monotone-env D ‚Üí monotone-env E
    ‚Üí Œ£[ œÅ‚ÇÉ ‚àà Env ] finite-env œÅ‚ÇÉ √ó œÅ‚ÇÉ ‚äÜ‚Çë œÅ √ó w ‚àà (D œÅ‚ÇÉ) ‚ñ™ (E œÅ‚ÇÉ)
  ‚ñ™-continuous {D}{E}{œÅ}{NE-œÅ}{w} ‚ü® V , ‚ü® V‚Ü¶w‚ààDœÅ , ‚ü® V‚äÜEœÅ , V‚â¢[] ‚ü© ‚ü© ‚ü©
      IH-D IH-E mD mE
      with IH-D (V ‚Ü¶ w) V‚Ü¶w‚ààDœÅ 
  ... | ‚ü® œÅ‚ÇÅ , ‚ü® fœÅ‚ÇÅ , ‚ü® œÅ‚ÇÅ‚äÜœÅ , V‚Ü¶w‚ààDœÅ‚ÇÅ ‚ü© ‚ü© ‚ü©
      with ((continuous-‚àà‚áí‚äÜ E œÅ NE-œÅ mE) V V‚äÜEœÅ (Œª v v‚ààV ‚Üí IH-E v))
  ... | ‚ü® œÅ‚ÇÇ , ‚ü® fœÅ‚ÇÇ , ‚ü® œÅ‚ÇÇ‚äÜœÅ , V‚äÜEœÅ‚ÇÇ ‚ü© ‚ü© ‚ü© =
     ‚ü® œÅ‚ÇÉ , ‚ü® join-finite-env fœÅ‚ÇÅ fœÅ‚ÇÇ , ‚ü® join-lub œÅ‚ÇÅ‚äÜœÅ œÅ‚ÇÇ‚äÜœÅ , w‚ààD‚ñ™EœÅ‚ÇÉ ‚ü© ‚ü© ‚ü© 
      where
      œÅ‚ÇÉ : Env
      œÅ‚ÇÉ = œÅ‚ÇÅ ‚äî‚Çë œÅ‚ÇÇ
      œÅ‚ÇÅ‚äÜœÅ‚ÇÉ : œÅ‚ÇÅ ‚äÜ‚Çë œÅ‚ÇÉ
      œÅ‚ÇÅ‚äÜœÅ‚ÇÉ = Œª x v z ‚Üí inj‚ÇÅ z
      V‚Ü¶w‚ààDœÅ‚ÇÉ : V ‚Ü¶ w ‚àà D œÅ‚ÇÉ
      V‚Ü¶w‚ààDœÅ‚ÇÉ = mD œÅ‚ÇÅ‚äÜœÅ‚ÇÉ (V ‚Ü¶ w) V‚Ü¶w‚ààDœÅ‚ÇÅ
      œÅ‚ÇÇ‚äÜœÅ‚ÇÉ : œÅ‚ÇÇ ‚äÜ‚Çë œÅ‚ÇÉ
      œÅ‚ÇÇ‚äÜœÅ‚ÇÉ = Œª x v z ‚Üí inj‚ÇÇ z
      V‚äÜEœÅ‚ÇÉ : mem V ‚äÜ E œÅ‚ÇÉ
      V‚äÜEœÅ‚ÇÉ v v‚ààV = mE œÅ‚ÇÇ‚äÜœÅ‚ÇÉ v (V‚äÜEœÅ‚ÇÇ v v‚ààV)
      w‚ààD‚ñ™EœÅ‚ÇÉ : w ‚àà (D œÅ‚ÇÉ) ‚ñ™ (E œÅ‚ÇÉ)
      w‚ààD‚ñ™EœÅ‚ÇÉ = ‚ü® V , ‚ü® V‚Ü¶w‚ààDœÅ‚ÇÉ , ‚ü® V‚äÜEœÅ‚ÇÉ , V‚â¢[] ‚ü© ‚ü© ‚ü©

Œõ-continuous : ‚àÄ{E : Env  ‚Üí ùí´ Value}{œÅ}{NE-œÅ}{v}
  ‚Üí v ‚àà Œõ (Œª D ‚Üí E (D ‚Ä¢ œÅ))
  ‚Üí (‚àÄ V ‚Üí V ‚â¢ [] ‚Üí continuous-env E (mem V ‚Ä¢ œÅ))
  ‚Üí monotone-env E
  ‚Üí Œ£[ œÅ‚Ä≤ ‚àà Env ] finite-env œÅ‚Ä≤ √ó œÅ‚Ä≤ ‚äÜ‚Çë œÅ √ó v ‚àà Œõ (Œª D ‚Üí E (D ‚Ä¢ œÅ‚Ä≤))
Œõ-continuous {E}{œÅ}{NE-œÅ}{V ‚Ü¶ w} ‚ü® w‚ààEV‚Ä¢œÅ , V‚â¢[] ‚ü© IH mE
    with IH V V‚â¢[] w w‚ààEV‚Ä¢œÅ
... | ‚ü® œÅ‚Ä≤ , ‚ü® fœÅ‚Ä≤ , ‚ü® œÅ‚Ä≤‚äÜV‚Ä¢œÅ , w‚ààEœÅ‚Ä≤ ‚ü© ‚ü© ‚ü© =
    ‚ü® (Œª x ‚Üí œÅ‚Ä≤ (suc x)) , ‚ü® (Œª x ‚Üí fœÅ‚Ä≤ (suc x)) , ‚ü® (Œª x ‚Üí œÅ‚Ä≤‚äÜV‚Ä¢œÅ (suc x)) ,
    ‚ü® mE{œÅ‚Ä≤}{mem V ‚Ä¢ (Œª x ‚Üí œÅ‚Ä≤ (suc x))} G w w‚ààEœÅ‚Ä≤ , V‚â¢[] ‚ü© ‚ü© ‚ü© ‚ü©
    where G : (x : Var) ‚Üí œÅ‚Ä≤ x ‚äÜ (mem V ‚Ä¢ (Œª x‚ÇÅ ‚Üí œÅ‚Ä≤ (suc x‚ÇÅ))) x
          G zero v v‚ààœÅ‚Ä≤x = œÅ‚Ä≤‚äÜV‚Ä¢œÅ 0 v v‚ààœÅ‚Ä≤x
          G (suc x) v v‚ààœÅ‚Ä≤x = v‚ààœÅ‚Ä≤x
Œõ-continuous {E}{œÅ}{NE-œÅ}{ŒΩ} v‚ààŒõ IH mE =
  ‚ü® initial-finite-env œÅ NE-œÅ , ‚ü® initial-fin œÅ NE-œÅ , ‚ü® initial-fin-‚äÜ œÅ NE-œÅ ,
      tt ‚ü© ‚ü© ‚ü©

{- Decidable Equality for Values ----------------------------------------------}

_‚â°?_ : (u : Value) ‚Üí (v : Value) ‚Üí Dec (u ‚â° v)
_‚â°?s_ : (U : List Value) ‚Üí (V : List Value) ‚Üí Dec (U ‚â° V)
const {B} c ‚â°? const {B‚Ä≤} c‚Ä≤
    with base-eq? B B‚Ä≤
... | no neq = no Œª { refl ‚Üí neq refl }
... | yes refl
    with base-rep-eq? c c‚Ä≤
... | no neq = no Œª { refl ‚Üí neq refl }
... | yes refl = yes refl
const x ‚â°? (x‚ÇÅ ‚Ü¶ v) = no Œª ()
const x ‚â°? ŒΩ = no Œª ()
(V ‚Ü¶ w) ‚â°? const x = no Œª ()
(V ‚Ü¶ w) ‚â°? (V‚Ä≤ ‚Ü¶ w‚Ä≤)
    with V ‚â°?s V‚Ä≤ | w ‚â°? w‚Ä≤
... | yes refl | yes refl = yes refl
... | yes refl | no neq = no Œª { refl ‚Üí neq refl }
... | no neq | yes refl = no Œª { refl ‚Üí neq refl }
... | no neq | no neq‚Ä≤ = no Œª { refl ‚Üí neq refl }
(V ‚Ü¶ w) ‚â°? ŒΩ = no Œª ()
ŒΩ ‚â°? const x = no Œª ()
ŒΩ ‚â°? (x ‚Ü¶ v) = no Œª ()
ŒΩ ‚â°? ŒΩ = yes refl

[] ‚â°?s [] = yes refl
[] ‚â°?s (x ‚à∑ V) = no Œª ()
(x ‚à∑ U) ‚â°?s [] = no Œª ()
(x ‚à∑ U) ‚â°?s (x‚ÇÅ ‚à∑ V)
    with x ‚â°? x‚ÇÅ | U ‚â°?s V
... | yes refl | yes refl = yes refl
... | yes refl | no neq = no Œª { refl ‚Üí neq refl }
... | no neq | yes refl = no Œª { refl ‚Üí neq refl }
... | no neq | no neq‚Ä≤ = no Œª { refl ‚Üí neq refl }


