open import NewSigUtil
open import NewSyntaxUtil
open import SetsAsPredicates
open import NewPValueCBVAnnot
open import NewClos3
open import NewClos4
open import NewCompiler using (delay)


{-

open import ISWIMClos1
open import ISWIMClos2
  renaming (Term to Term‚ÇÇ; Arg to Arg‚ÇÇ; Args to Args‚ÇÇ; `_ to #_;
      pair to pair‚ÇÇ; fst to fst‚ÇÇ; snd to snd‚ÇÇ; tuple to tuple‚ÇÇ;
      $ to %; _‚ù≤_‚ù≥ to _‚ù≤_‚ù≥‚ÇÇ; inl to inl‚ÇÇ; inr to inr‚ÇÇ; case to case‚ÇÇ;
      cons to cons‚ÇÇ; ast to ast‚ÇÇ; nil to nil‚ÇÇ; _‚¶Ö_‚¶Ü to _‚¶Ö_‚¶Ü‚ÇÇ;
      ‚ü¶_‚üß to ‚ü¶_‚üß‚ÇÇ; ‚ü¶_‚üß‚Çê to ‚ü¶_‚üß‚ÇÇ‚Çê; ‚ü¶_‚üß‚Çä to ‚ü¶_‚üß‚ÇÇ‚Çä)

-}


open import Data.Nat using (‚Ñï; zero; suc)
open import Data.List using (List; []; _‚à∑_; replicate)
open import Data.Product using (_√ó_; proj‚ÇÅ; proj‚ÇÇ; Œ£; Œ£-syntax)
  renaming (_,_ to ‚ü®_,_‚ü© )
open import Data.Empty using (‚ä•-elim) renaming (‚ä• to False)
open import Data.Sum using (_‚äé_; inj‚ÇÅ; inj‚ÇÇ)
open import Data.Unit using (tt) renaming (‚ä§ to True)
open import Relation.Binary.PropositionalEquality
    using (_‚â°_; _‚â¢_; refl; sym; subst)
open import Level using (Level; Lift; lift)
    renaming (zero to lzero; suc to lsuc; _‚äî_ to _l‚äî_)
open import Relation.Nullary using (¬¨_; Dec; yes; no)
open import Relation.Binary.Core using (Rel)


tos : List Value ‚Üí List Value
to : Value ‚Üí Value
to (const x) = const x
to (fvs ‚ä¢ V ‚Ü¶ w) = ‚¶Ö [] ‚ä¢ tos V ‚Ü¶ to w , ‚à• tos fvs ‚à• ‚¶Ü
to ŒΩ = ‚¶Ö ŒΩ , ‚à• [] ‚à• ‚¶Ü
to œâ = œâ
to ‚¶Ö v , v‚ÇÅ ‚¶Ü = ‚¶Ö to v , to v‚ÇÅ ‚¶Ü
to ‚à• xs ‚à• = ‚à• tos xs ‚à•
to (left V) = left (tos V)
to (right V) = right (tos V)
tos List.[] = []
tos (d List.‚à∑ ds) = to d List.‚à∑ tos ds

to-set : ùí´ Value ‚Üí ùí´ Value
to-set S v = Œ£[ d ‚àà Value ] d ‚àà S √ó v ‚â° to d



