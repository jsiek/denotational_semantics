{-# OPTIONS --allow-unsolved-metas #-}

module NewDomain where

{-

  This is an adaptation of the call-by-name models P(œâ) of Scott
  (1976) and D‚Çê of Engeler (1981) to call-by-value.

-}

open import Primitives
open import Utilities using (extensionality)
open import SetsAsPredicates
open import Var
open import Substitution using (_‚Ä¢_)
open import ScopedTuple hiding (ùí´)
open import Syntax using (Sig; ext; ŒΩ; ‚ñ†; Var; _‚Ä¢_; ‚Üë; id; _‚®ü_) public
open import NewSigUtil
open import NewDOpSig
open import NewDenotProperties

open import Data.Empty using (‚ä•-elim) renaming (‚ä• to False)
open import Data.List using (List ; _‚à∑_ ; []; _++_; length; replicate)
open import Data.List.Relation.Unary.Any using (Any; here; there; any?)
open import Data.List.Relation.Unary.All 
  using (All; []; _‚à∑_; head; tail; lookup; tabulate; all?)
  renaming (map to allmap)
open import Data.List.Relation.Binary.Pointwise using (Pointwise; []; _‚à∑_)
open import Data.List.Relation.Binary.Subset.Propositional using ()
  renaming (_‚äÜ_ to _l‚äÜ_)
open import Data.List.Properties using (++-conicalÀ°; ‚à∑-dec)
open import Data.List.Membership.Propositional renaming (_‚àà_ to _‚ãµ_)
open import Data.List.Membership.Propositional.Properties
  using (‚àà-++‚Å∫À°; ‚àà-++‚Å∫ ≥)
open import Data.Nat using (‚Ñï; zero; suc; _‚âü_; _<_; z‚â§n; s‚â§s; _+_)
open import Data.Product using (_√ó_; Œ£; Œ£-syntax; proj‚ÇÅ; proj‚ÇÇ; ‚àÉ; ‚àÉ-syntax; uncurry)
    renaming (_,_ to ‚ü®_,_‚ü©)
open import Data.Product.Properties using (,-injective)
open import Relation.Nullary.Product using (_√ó-dec_)
open import Data.Sum using (_‚äé_; inj‚ÇÅ; inj‚ÇÇ; [_,_])
open import Data.Unit using (tt) renaming (‚ä§ to True)
open import Data.Unit.Polymorphic using (‚ä§) renaming (tt to ptt)
open import Relation.Binary.PropositionalEquality
    using (_‚â°_; _‚â¢_; refl; sym; trans; subst; cong; cong‚ÇÇ)
open import Level using (Level; Lift; lift; lower)
    renaming (zero to lzero; suc to lsuc)
open import Relation.Nullary using (¬¨_; Dec; yes; no)
open import Relation.Nullary.Decidable using (map‚Ä≤)


{- Denotational Values --------------------------------------------------------}

data Value : Set where
  const : {B : Base} ‚Üí (k : base-rep B) ‚Üí Value  {- A primitive constant of type B. -}
  _,_‚ä¢_,_‚Ü¶_ : (fv : Value) ‚Üí (FV : List Value) ‚Üí (v : Value) ‚Üí (V : List Value) ‚Üí (w : Value) ‚Üí Value
      {- An entry in a function's graph. -}
  _,_‚ä¢ŒΩ : (fv : Value) ‚Üí (FV : List Value) ‚Üí Value      {- The empty function -}
  œâ : Value      {- An error value, to serve as a default value in Envs and
                    to differentiate from converging -}
  ‚¶Ö_‚à£_,_‚¶Ü : {- Closure Representations -}
      (f : Value ) ‚Üí (fv : Value) ‚Üí (FV : List Value) ‚Üí Value
  ‚à•_‚à• : (ds : List Value) ‚Üí Value                 {- Tuples -}
  left_,_ : (v : Value) ‚Üí (V : List Value) ‚Üí Value                {- Sums -}
  right_,_ : (v : Value) ‚Üí (V : List Value) ‚Üí Value               {- Sums -}



{- Equality -------------------------------------------------------------------}

l‚äÜ‚ÜíAll‚àà : ‚àÄ {A : Set} (U V : List A) ‚Üí U l‚äÜ V ‚Üí All (Œª z ‚Üí Any (z ‚â°_) V) U
l‚äÜ‚ÜíAll‚àà U V = tabulate

All‚àà‚Üíl‚äÜ : ‚àÄ {A : Set} {U V : List A} ‚Üí All (Œª z ‚Üí Any (z ‚â°_) V) U ‚Üí U l‚äÜ V
All‚àà‚Üíl‚äÜ = lookup

_‚ä¢_l‚äÜ?_ : ‚àÄ {A : Set} (‚â°? : ‚àÄ (a b : A) ‚Üí Dec (a ‚â° b)) (U V : List A) ‚Üí Dec (U l‚äÜ V)
‚â°? ‚ä¢ U l‚äÜ? V = map‚Ä≤ All‚àà‚Üíl‚äÜ (l‚äÜ‚ÜíAll‚àà U V) (all? (Œª x ‚Üí any? (Œª y ‚Üí ‚â°? x y) V) U)

l‚äÜ‚Üí‚äÜ : ‚àÄ {A : Set} (U V : List A) ‚Üí U l‚äÜ V ‚Üí mem U ‚äÜ mem V
l‚äÜ‚Üí‚äÜ U V Ul‚äÜV d = Ul‚äÜV {d}

‚äÜ‚Üíl‚äÜ : ‚àÄ {A : Set} (U V : List A) ‚Üí mem U ‚äÜ mem V ‚Üí U l‚äÜ V
‚äÜ‚Üíl‚äÜ U V U‚äÜV {d} = U‚äÜV d

const-inj-base : ‚àÄ {B B' k k'} ‚Üí const {B} k ‚â° const {B'} k' ‚Üí B ‚â° B'
const-inj-base {B}{B'} refl = refl

const-inj : ‚àÄ {B k k'} ‚Üí const {B} k ‚â° const {B} k' ‚Üí k ‚â° k'
const-inj refl = refl

clos-inj : ‚àÄ {f f' fv fv' FV FV'} ‚Üí ‚¶Ö f ‚à£ fv , FV ‚¶Ü ‚â° ‚¶Ö f' ‚à£ fv' , FV' ‚¶Ü ‚Üí f ‚â° f' √ó fv ‚â° fv' √ó FV ‚â° FV'
clos-inj refl = ‚ü® refl , ‚ü® refl , refl ‚ü© ‚ü©

clos-inj-uncurried : ‚àÄ {f f' fv fv' FV FV'} ‚Üí ‚¶Ö f ‚à£ fv , FV ‚¶Ü ‚â° ‚¶Ö f' ‚à£ fv' , FV' ‚¶Ü 
  ‚Üí ‚ü® f , ‚ü® fv , FV ‚ü© ‚ü© ‚â° ‚ü® f' , ‚ü® fv' , FV' ‚ü© ‚ü©
clos-inj-uncurried refl = refl

tup-inj : ‚àÄ {ds ds'} ‚Üí ‚à• ds ‚à• ‚â° ‚à• ds' ‚à• ‚Üí ds ‚â° ds'
tup-inj refl = refl

left-inj : ‚àÄ {v v' V V'} ‚Üí (left v , V) ‚â° left v' , V' ‚Üí v ‚â° v' √ó V ‚â° V'
left-inj refl = ‚ü® refl , refl ‚ü©

left-inj-uncurried : ‚àÄ {v v' V V'} ‚Üí (left v , V) ‚â° left v' , V' ‚Üí ‚ü® v , V ‚ü© ‚â° ‚ü® v' , V' ‚ü©
left-inj-uncurried refl = refl

right-inj : ‚àÄ {v v' V V'} ‚Üí  (right v , V) ‚â° right v' , V' ‚Üí v ‚â° v' √ó V ‚â° V'
right-inj refl = ‚ü® refl , refl ‚ü©

right-inj-uncurried : ‚àÄ {v v' V V'} ‚Üí  (right v , V) ‚â° right v' , V' ‚Üí ‚ü® v , V ‚ü© ‚â° ‚ü® v' , V' ‚ü©
right-inj-uncurried refl = refl

ŒΩ-inj : ‚àÄ {fv fv' FV FV'} ‚Üí fv , FV ‚ä¢ŒΩ ‚â° fv' , FV' ‚ä¢ŒΩ ‚Üí fv ‚â° fv' √ó FV ‚â° FV'
ŒΩ-inj refl = ‚ü® refl , refl ‚ü©

‚Ü¶-inj : ‚àÄ {fv fv' FV FV' v v' V V' w w'} ‚Üí fv , FV ‚ä¢ v , V ‚Ü¶ w ‚â° fv' , FV' ‚ä¢ v' , V' ‚Ü¶ w'
      ‚Üí fv ‚â° fv' √ó FV ‚â° FV' √ó v ‚â° v' √ó V ‚â° V' √ó w ‚â° w'
‚Ü¶-inj refl = ‚ü® refl , ‚ü® refl , ‚ü® refl , ‚ü® refl , refl ‚ü© ‚ü© ‚ü© ‚ü©

‚Ü¶-inj-uncurried : ‚àÄ {fv fv' FV FV' v v' V V' w w'} ‚Üí fv , FV ‚ä¢ v , V ‚Ü¶ w ‚â° fv' , FV' ‚ä¢ v' , V' ‚Ü¶ w'
      ‚Üí ‚ü® fv , ‚ü® FV , ‚ü® v , ‚ü® V , w ‚ü© ‚ü© ‚ü© ‚ü© ‚â° ‚ü® fv' , ‚ü® FV' , ‚ü® v' , ‚ü® V' , w' ‚ü© ‚ü© ‚ü© ‚ü©
‚Ü¶-inj-uncurried refl = refl



_d‚âü_ : (d‚ÇÅ : Value) ‚Üí (d‚ÇÇ : Value) ‚Üí Dec (d‚ÇÅ ‚â° d‚ÇÇ)
_ds‚âü_ : (ds‚ÇÅ : List Value) ‚Üí (ds‚ÇÇ : List Value) ‚Üí Dec (ds‚ÇÅ ‚â° ds‚ÇÇ)
const {B} k d‚âü const {B'} k‚ÇÅ with base-eq? B B'
... | no neq = no Œª z ‚Üí neq (const-inj-base z)
... | yes refl = map‚Ä≤ (cong (const {B})) const-inj (base-rep-eq? k k‚ÇÅ)
const k d‚âü (d‚ÇÇ , FV‚ÇÅ ‚ä¢ŒΩ) = no (Œª ())
const k d‚âü (fv , FV ‚ä¢ v , V ‚Ü¶ w) = no (Œª ())
const k d‚âü œâ = no (Œª ())
const k d‚âü ‚¶Ö d‚ÇÇ ‚à£ fv , FV‚ÇÅ ‚¶Ü = no (Œª ())
const k d‚âü ‚à• ds ‚à• = no (Œª ())
const k d‚âü (left v , V‚ÇÅ) = no (Œª ())
const k d‚âü (right v , V‚ÇÅ) = no (Œª ())
(d‚ÇÅ , FV ‚ä¢ v , V ‚Ü¶ d‚ÇÉ) d‚âü const k = no (Œª ())
(d‚ÇÅ , FV ‚ä¢ v , V ‚Ü¶ d‚ÇÉ) d‚âü (d‚ÇÇ , FV‚ÇÅ ‚ä¢ v‚ÇÅ , V‚ÇÅ ‚Ü¶ d‚ÇÑ) = 
  map‚Ä≤ (cong (Œª z ‚Üí proj‚ÇÅ z , proj‚ÇÅ (proj‚ÇÇ z) ‚ä¢ proj‚ÇÅ (proj‚ÇÇ (proj‚ÇÇ z)) , proj‚ÇÅ (proj‚ÇÇ (proj‚ÇÇ (proj‚ÇÇ z))) 
                                              ‚Ü¶ (proj‚ÇÇ (proj‚ÇÇ (proj‚ÇÇ (proj‚ÇÇ z))))))
        ‚Ü¶-inj-uncurried 
        (map‚Ä≤ (uncurry (cong‚ÇÇ ‚ü®_,_‚ü©)) ,-injective ((d‚ÇÅ d‚âü d‚ÇÇ) √ó-dec 
        map‚Ä≤ (uncurry (cong‚ÇÇ ‚ü®_,_‚ü©)) ,-injective ((FV ds‚âü FV‚ÇÅ) √ó-dec 
        map‚Ä≤ (uncurry (cong‚ÇÇ ‚ü®_,_‚ü©)) ,-injective ((v d‚âü v‚ÇÅ) √ó-dec
        map‚Ä≤ (uncurry (cong‚ÇÇ ‚ü®_,_‚ü©)) ,-injective ((V ds‚âü V‚ÇÅ) √ó-dec (d‚ÇÉ d‚âü d‚ÇÑ))))))
(d‚ÇÅ , FV ‚ä¢ v , V ‚Ü¶ d‚ÇÉ) d‚âü (d‚ÇÇ , FV‚ÇÅ ‚ä¢ŒΩ) = no (Œª ())
(d‚ÇÅ , FV ‚ä¢ v , V ‚Ü¶ d‚ÇÉ) d‚âü œâ = no (Œª ())
(d‚ÇÅ , FV ‚ä¢ v , V ‚Ü¶ d‚ÇÉ) d‚âü ‚¶Ö d‚ÇÇ ‚à£ fv , FV‚ÇÅ ‚¶Ü = no (Œª ())
(d‚ÇÅ , FV ‚ä¢ v , V ‚Ü¶ d‚ÇÉ) d‚âü ‚à• ds ‚à• = no (Œª ())
(d‚ÇÅ , FV ‚ä¢ v , V ‚Ü¶ d‚ÇÉ) d‚âü (left v‚ÇÅ , V‚ÇÅ) = no (Œª ())
(d‚ÇÅ , FV ‚ä¢ v , V ‚Ü¶ d‚ÇÉ) d‚âü (right v‚ÇÅ , V‚ÇÅ) = no (Œª ())
(d‚ÇÅ , FV ‚ä¢ŒΩ) d‚âü const k = no (Œª ())
(d‚ÇÅ , FV ‚ä¢ŒΩ) d‚âü (d‚ÇÇ , FV‚ÇÅ ‚ä¢ v , V ‚Ü¶ d‚ÇÉ) = no (Œª ())
(d‚ÇÅ , FV ‚ä¢ŒΩ) d‚âü (d‚ÇÇ , FV‚ÇÅ ‚ä¢ŒΩ) = 
  map‚Ä≤ (uncurry (cong‚ÇÇ _,_‚ä¢ŒΩ)) ŒΩ-inj ((d‚ÇÅ d‚âü d‚ÇÇ) √ó-dec (FV ds‚âü FV‚ÇÅ))
(d‚ÇÅ , FV ‚ä¢ŒΩ) d‚âü œâ = no (Œª ())
(d‚ÇÅ , FV ‚ä¢ŒΩ) d‚âü ‚¶Ö d‚ÇÇ ‚à£ fv , FV‚ÇÅ ‚¶Ü = no (Œª ())
(d‚ÇÅ , FV ‚ä¢ŒΩ) d‚âü ‚à• ds ‚à• = no (Œª ())
(d‚ÇÅ , FV ‚ä¢ŒΩ) d‚âü (left v , V) = no (Œª ())
(d‚ÇÅ , FV ‚ä¢ŒΩ) d‚âü  (right v , V) = no (Œª ())
œâ d‚âü const k = no (Œª ())
œâ d‚âü (d‚ÇÇ , FV ‚ä¢ v , V ‚Ü¶ d‚ÇÉ) = no (Œª ())
œâ d‚âü (d‚ÇÇ , FV ‚ä¢ŒΩ) = no (Œª ())
œâ d‚âü œâ = yes refl
œâ d‚âü ‚¶Ö d‚ÇÇ ‚à£ fv , FV ‚¶Ü = no (Œª ())
œâ d‚âü ‚à• ds ‚à• = no (Œª ())
œâ d‚âü (left v , V) = no (Œª ())
œâ d‚âü  (right v , V) = no (Œª ())
‚¶Ö d‚ÇÅ ‚à£ fv , FV ‚¶Ü d‚âü const k = no (Œª ())
‚¶Ö d‚ÇÅ ‚à£ fv , FV ‚¶Ü d‚âü (d‚ÇÇ , FV‚ÇÅ ‚ä¢ v , V ‚Ü¶ d‚ÇÉ) = no (Œª ())
‚¶Ö d‚ÇÅ ‚à£ fv , FV ‚¶Ü d‚âü (d‚ÇÇ , FV‚ÇÅ ‚ä¢ŒΩ) = no (Œª ())
‚¶Ö d‚ÇÅ ‚à£ fv , FV ‚¶Ü d‚âü œâ = no (Œª ())
‚¶Ö d‚ÇÅ ‚à£ fv‚ÇÅ , FV ‚¶Ü d‚âü ‚¶Ö d‚ÇÇ ‚à£ fv‚ÇÇ , FV‚ÇÅ ‚¶Ü = 
  map‚Ä≤ (cong (Œª z ‚Üí ‚¶Ö proj‚ÇÅ z ‚à£ proj‚ÇÅ (proj‚ÇÇ z) , proj‚ÇÇ (proj‚ÇÇ z)‚¶Ü)) 
       clos-inj-uncurried
       (map‚Ä≤ (uncurry (cong‚ÇÇ ‚ü®_,_‚ü©)) ,-injective ((d‚ÇÅ d‚âü d‚ÇÇ) √ó-dec 
        map‚Ä≤ (uncurry (cong‚ÇÇ ‚ü®_,_‚ü©)) ,-injective ((fv‚ÇÅ d‚âü fv‚ÇÇ) √ó-dec (FV ds‚âü FV‚ÇÅ))))
‚¶Ö d‚ÇÅ ‚à£ fv , FV ‚¶Ü d‚âü ‚à• ds ‚à• = no (Œª ())
‚¶Ö d‚ÇÅ ‚à£ fv , FV ‚¶Ü d‚âü (left v , V) = no (Œª ())
‚¶Ö d‚ÇÅ ‚à£ fv , FV ‚¶Ü d‚âü  (right v , V) = no (Œª ())
‚à• ds ‚à• d‚âü const k = no (Œª ())
‚à• ds ‚à• d‚âü (d‚ÇÇ , FV ‚ä¢ v , V ‚Ü¶ d‚ÇÉ) = no (Œª ())
‚à• ds ‚à• d‚âü (d‚ÇÇ , FV ‚ä¢ŒΩ) = no (Œª ())
‚à• ds ‚à• d‚âü œâ = no (Œª ())
‚à• ds ‚à• d‚âü ‚¶Ö d‚ÇÇ ‚à£ fv , FV ‚¶Ü = no (Œª ())
‚à• ds ‚à• d‚âü ‚à• ds‚ÇÅ ‚à• = map‚Ä≤ (cong¬†‚à•_‚à•) tup-inj (ds ds‚âü ds‚ÇÅ)
‚à• ds ‚à• d‚âü (left v , V) = no (Œª ())
‚à• ds ‚à• d‚âü  (right v , V) = no (Œª ())
(left v , V) d‚âü const k = no (Œª ())
(left v , V) d‚âü (d‚ÇÇ , FV ‚ä¢ v‚ÇÅ  , V‚ÇÅ ‚Ü¶ d‚ÇÉ) = no (Œª ())
(left v , V) d‚âü (d‚ÇÇ , FV ‚ä¢ŒΩ) = no (Œª ())
(left v , V) d‚âü œâ = no (Œª ())
(left v , V) d‚âü ‚¶Ö d‚ÇÇ ‚à£ fv , FV ‚¶Ü = no (Œª ())
(left v , V) d‚âü ‚à• ds ‚à• = no (Œª ())
(left v , V) d‚âü (left v‚ÇÅ , V‚ÇÅ) = map‚Ä≤ (cong (Œª z ‚Üí left proj‚ÇÅ z , proj‚ÇÇ z)) left-inj-uncurried 
   (map‚Ä≤ (uncurry (cong‚ÇÇ ‚ü®_,_‚ü©)) ,-injective ((v d‚âü v‚ÇÅ) √ó-dec (V ds‚âü V‚ÇÅ)))
(left v , V) d‚âü (right v‚ÇÅ , V‚ÇÅ) = no (Œª ())
(right v , V) d‚âü const k = no (Œª ())
(right v , V) d‚âü (d‚ÇÇ , FV ‚ä¢ v‚ÇÅ  , V‚ÇÅ ‚Ü¶ d‚ÇÉ) = no (Œª ())
(right v , V) d‚âü (d‚ÇÇ , FV ‚ä¢ŒΩ) = no (Œª ())
(right v , V) d‚âü œâ = no (Œª ())
(right v , V) d‚âü ‚¶Ö d‚ÇÇ ‚à£ fv , FV ‚¶Ü = no (Œª ())
(right v , V) d‚âü ‚à• ds ‚à• = no (Œª ())
(right v , V) d‚âü (left v‚ÇÅ , V‚ÇÅ) = no (Œª ())
(right v , V) d‚âü (right v‚ÇÅ , V‚ÇÅ) = map‚Ä≤ (cong (Œª z ‚Üí right proj‚ÇÅ z , proj‚ÇÇ z)) right-inj-uncurried 
  (map‚Ä≤ (uncurry (cong‚ÇÇ ‚ü®_,_‚ü©)) ,-injective ((v d‚âü v‚ÇÅ) √ó-dec (V ds‚âü V‚ÇÅ)))
[] ds‚âü [] = yes refl
[] ds‚âü (x ‚à∑ ds‚ÇÇ) = no (Œª ())
(x ‚à∑ ds‚ÇÅ) ds‚âü [] = no (Œª ())
(x ‚à∑ ds‚ÇÅ) ds‚âü (x‚ÇÅ ‚à∑ ds‚ÇÇ) = ‚à∑-dec (x d‚âü x‚ÇÅ) (ds‚ÇÅ ds‚âü ds‚ÇÇ)

_l‚äÜ?_ : ‚àÄ (U V : List Value) ‚Üí Dec (U l‚äÜ V)
U l‚äÜ? V = _d‚âü_ ‚ä¢ U l‚äÜ? V

_mem‚äÜ?_ : ‚àÄ (U V : List Value) ‚Üí Dec (mem U ‚äÜ mem V)
U mem‚äÜ? V = map‚Ä≤ (l‚äÜ‚Üí‚äÜ U V) (‚äÜ‚Üíl‚äÜ U V) (U l‚äÜ? V)

{- Consistency ----------------------------------------------------------------}

infix 5 _~_
infix 5 _‚âà_

_‚âà_ : List Value ‚Üí List Value ‚Üí Set
_~_ : Value ‚Üí Value ‚Üí Set
const {B} x ~ const {B‚ÇÅ} x‚ÇÅ with base-eq? B B‚ÇÅ
... | yes refl = x ‚â° x‚ÇÅ
... | no neq = False
const x ~ (fv , FV ‚ä¢ v‚ÇÅ  , V‚ÇÅ ‚Ü¶ v) = False
const x ~ (fv , FV ‚ä¢ŒΩ) = False
const x ~ œâ = False  
const x ~ ‚¶Ö f ‚à£ fv , FV ‚¶Ü = False
const x ~ ‚à• x‚ÇÅ ‚à• = False
const x ~ (left x‚ÇÅ , X‚ÇÅ) = False
const x ~ (right x‚ÇÅ , X‚ÇÅ) = False
(fv , FV ‚ä¢ v' , V' ‚Ü¶ u) ~ const x‚ÇÇ = False
(fv , us ‚ä¢ v , V ‚Ü¶ w) ~ (fv‚ÇÅ , FV‚ÇÅ ‚ä¢ v‚ÇÅ , V‚ÇÅ ‚Ü¶ w‚ÇÅ) = (¬¨ (v ‚à∑ V) ‚âà (v‚ÇÅ ‚à∑ V‚ÇÅ)) ‚äé ( (v ‚à∑ V) ‚âà (v‚ÇÅ ‚à∑ V‚ÇÅ) √ó w¬†~ w‚ÇÅ )
(fv' , FV' ‚ä¢ v' , V' ‚Ü¶ u) ~ (fv , FV ‚ä¢ŒΩ) = True
(fv' , FV ‚ä¢ v' , V' ‚Ü¶ u) ~ œâ = False
(fv , FV ‚ä¢ v' , V' ‚Ü¶ u) ~ ‚¶Ö f ‚à£ fv' , FV' ‚¶Ü = False
(fv' , FV ‚ä¢ v' , V' ‚Ü¶ u) ~ ‚à• x‚ÇÇ ‚à• = False
(fv' , FV ‚ä¢ v' , V' ‚Ü¶ u) ~ (left x , X) = False
(fv' , FV ‚ä¢ v' , V' ‚Ü¶ u) ~ (right x , X) = False
(fv , FV ‚ä¢ŒΩ) ~ const x = False
(fv , FV ‚ä¢ŒΩ) ~ (fv' , FV' ‚ä¢ v' , V' ‚Ü¶ v) = True
(fv , FV ‚ä¢ŒΩ) ~ (fv' , FV' ‚ä¢ŒΩ) = True
(fv , FV ‚ä¢ŒΩ) ~ œâ = False
(fv , FV ‚ä¢ŒΩ) ~ ‚¶Ö f ‚à£ fv' , FV' ‚¶Ü = False
(fv , FV ‚ä¢ŒΩ) ~ ‚à• x ‚à• = False
(fv , FV ‚ä¢ŒΩ) ~ (left x , X) = False
(fv , FV ‚ä¢ŒΩ) ~ (right x , X) = False
œâ ~ const x = False
œâ ~ (fv' , x ‚ä¢ v' , V' ‚Ü¶ v) = False
œâ ~ (fv , FV ‚ä¢ŒΩ) = False
œâ ~ œâ = True {- starting with œâ related with just itself -}
œâ ~ ‚¶Ö f ‚à£ fv' , FV' ‚¶Ü = False
œâ ~ ‚à• x ‚à• = False
œâ ~ (left x , X) = False
œâ ~ (right x , X) = False
‚¶Ö f ‚à£ fv' , FV' ‚¶Ü ~ const x = False
‚¶Ö f ‚à£ fv' , FV' ‚¶Ü ~ (fv , x ‚ä¢ v' , V' ‚Ü¶ v) = False
‚¶Ö f ‚à£ fv' , FV' ‚¶Ü ~ (fv , FV ‚ä¢ŒΩ) = False
‚¶Ö f ‚à£ fv' , FV' ‚¶Ü ~ œâ = False
‚¶Ö f ‚à£ fv , FV ‚¶Ü ~ ‚¶Ö f' ‚à£ fv' , FV' ‚¶Ü = f ~ f' √ó (fv ‚à∑ FV) ‚âà (fv' ‚à∑ FV')
‚¶Ö f ‚à£ fv' , FV' ‚¶Ü ~ ‚à• x ‚à• = False
‚¶Ö f ‚à£ fv' , FV' ‚¶Ü ~ (left x , X) = False
‚¶Ö f ‚à£ fv' , FV' ‚¶Ü ~ (right x , X) = False
‚à• x ‚à• ~ const x‚ÇÅ = False
‚à• x ‚à• ~ (fv' , FV' ‚ä¢ v‚ÇÅ  , V‚ÇÅ ‚Ü¶ v) = False
‚à• x ‚à• ~ (fv , FV ‚ä¢ŒΩ) = False
‚à• x ‚à• ~ œâ = False
‚à• x ‚à• ~ ‚¶Ö f ‚à£ fv' , FV' ‚¶Ü = False
‚à• [] ‚à• ~ ‚à• [] ‚à• = True
‚à• [] ‚à• ~ ‚à• x ‚à∑ x‚ÇÅ ‚à• = False
‚à• x ‚à∑ x‚ÇÇ ‚à• ~ ‚à• [] ‚à• = False
‚à• x ‚à∑ xs ‚à• ~ ‚à• x‚ÇÅ ‚à∑ xs‚ÇÅ ‚à• = x ~ x‚ÇÅ √ó ‚à• xs ‚à• ~ ‚à• xs‚ÇÅ ‚à•
‚à• x ‚à• ~ (left x‚ÇÅ , X‚ÇÅ) = False
‚à• x ‚à• ~ (right x‚ÇÅ , X‚ÇÅ) = False
(left x , X) ~ const x‚ÇÅ = False
(left x , X) ~ (fv' , FV' ‚ä¢ v‚ÇÅ  , V‚ÇÅ ‚Ü¶ v) = False
(left x , X) ~ (fv , FV ‚ä¢ŒΩ) = False
(left x , X) ~ œâ = False
(left x , X) ~ ‚¶Ö f ‚à£ fv' , FV' ‚¶Ü = False
(left x , X) ~ ‚à• x‚ÇÅ ‚à• = False
(left x , X) ~ (left x‚ÇÅ , X‚ÇÅ) = (x ‚à∑ X) ‚âà (x‚ÇÅ ‚à∑ X‚ÇÅ)
(left x , X) ~ (right x‚ÇÅ , X‚ÇÅ) = False
(right x , X) ~ const x‚ÇÅ = False
(right x , X) ~ (fv' , FV' ‚ä¢ v‚ÇÅ  , V‚ÇÅ ‚Ü¶ v) = False
(right x , X) ~ (fv , FV ‚ä¢ŒΩ) = False
(right x , X) ~ œâ = False
(right x , X) ~ ‚¶Ö f ‚à£ fv' , FV' ‚¶Ü = False
(right x , X) ~ ‚à• x‚ÇÅ ‚à• = False
(right x , X) ~ (left x‚ÇÅ , X‚ÇÅ) = False
(right x , X) ~ (right x‚ÇÅ , X‚ÇÅ) = (x  ‚à∑ X) ‚âà (x‚ÇÅ ‚à∑ X‚ÇÅ)

[] ‚âà vs = True 
(u ‚à∑ us) ‚âà vs = All (u ~_) vs √ó us ‚âà vs

‚âà[] : ‚àÄ V ‚Üí V ‚âà []
‚âà[] [] = tt
‚âà[] (x ‚à∑ V) = ‚ü® All.[] , ‚âà[] V ‚ü©

‚âàhead : ‚àÄ U v V ‚Üí U ‚âà (v ‚à∑ V) ‚Üí All (_~ v) U
‚âàhead [] v V U~vV = []
‚âàhead (x ‚à∑ U) v V ‚ü® x~v ‚à∑ x~V , snd ‚ü© = x~v ‚à∑ ‚âàhead U v V snd

‚âàtail : ‚àÄ U v V ‚Üí U ‚âà (v ‚à∑ V) ‚Üí U ‚âà V
‚âàtail [] v V U~vV = tt
‚âàtail (x ‚à∑ U) v V ‚ü® x~v ‚à∑ x~V , snd ‚ü© = 
  ‚ü® x~V , ‚âàtail U v V snd ‚ü©


‚âà-sym : ‚àÄ U V ‚Üí U ‚âà V ‚Üí V ‚âà U
~-sym-All : ‚àÄ u V ‚Üí All (_~ u) V ‚Üí All (_~_ u) V
~-sym : ‚àÄ u v ‚Üí u ~ v ‚Üí v ~ u
~-sym (const {B} x) (const {B‚ÇÅ} x‚ÇÅ) u~v 
  with base-eq? B B‚ÇÅ | u~v
... | yes refl | refl = u~v
... | no neq | ()
~-sym (fv , fvs ‚ä¢ v , V ‚Ü¶ w) (fv' , fvs' ‚ä¢ v' , V' ‚Ü¶ w') (inj‚ÇÅ ¬¨V~V') = 
  inj‚ÇÅ Œª z ‚Üí ¬¨V~V' (‚âà-sym (v' ‚à∑ V') (v ‚à∑ V) z)
~-sym (fv , fvs ‚ä¢ v , V ‚Ü¶ w) (fv' , fvs' ‚ä¢ v' , V' ‚Ü¶ w') (inj‚ÇÇ ‚ü® V~V' , w~w' ‚ü©) = 
  inj‚ÇÇ ‚ü® ‚âà-sym (v ‚à∑ V) (v' ‚à∑ V') V~V' , ~-sym w w' w~w' ‚ü©
~-sym (fv' , x ‚ä¢ v' , V' ‚Ü¶ u) (fv , FV ‚ä¢ŒΩ) u~v = tt
~-sym (fv , FV ‚ä¢ŒΩ) (fv' , x ‚ä¢ v' , V' ‚Ü¶ v) u~v = tt
~-sym (fv , FV ‚ä¢ŒΩ) (fv' , FV' ‚ä¢ŒΩ) u~v = tt
~-sym œâ œâ u~v = tt
~-sym ‚¶Ö f ‚à£ fv , FV ‚¶Ü ‚¶Ö f' ‚à£ fv' , FV' ‚¶Ü ‚ü® fst , snd ‚ü© = 
  ‚ü® ~-sym f f' fst , ‚âà-sym (fv ‚à∑ FV) (fv' ‚à∑ FV') snd ‚ü©
~-sym ‚à• [] ‚à• ‚à• [] ‚à• u~v = tt
~-sym ‚à• x ‚à∑ x‚ÇÇ ‚à• ‚à• x‚ÇÅ ‚à∑ x‚ÇÉ ‚à• ‚ü® fst , rst ‚ü© = 
  ‚ü® ~-sym x x‚ÇÅ fst , ~-sym ‚à• x‚ÇÇ ‚à• ‚à• x‚ÇÉ ‚à• rst ‚ü©
~-sym ((left x , X)) ((left x‚ÇÅ , X‚ÇÅ)) u~v = ‚âà-sym (x ‚à∑ X) (x‚ÇÅ ‚à∑ X‚ÇÅ) u~v
~-sym ((right x , X)) ((right x‚ÇÅ , X‚ÇÅ)) u~v = ‚âà-sym (x ‚à∑ X) (x‚ÇÅ ‚à∑ X‚ÇÅ) u~v

~-sym-All u [] [] = []
~-sym-All u (x ‚à∑ xs) (px ‚à∑ V~u) = 
  ~-sym x u px ‚à∑ ~-sym-All u xs V~u

‚âà-sym U [] U‚âàV = tt
‚âà-sym U (x ‚à∑ V) U‚âàV = 
  ‚ü® ~-sym-All x U (‚âàhead U x V U‚âàV) 
  , ‚âà-sym U V (‚âàtail U x V U‚âàV) ‚ü©

_‚âà?_ : (U V : List Value) ‚Üí Dec (U ‚âà V)
_~>?_ : (u : Value) (V : List Value) ‚Üí Dec (All (u ~_) V)
_~?_ : (u v : Value) ‚Üí Dec (u ~ v)
const {B} x ~? const {B'} x‚ÇÅ with base-eq? B B'
... | no neq = no (Œª z ‚Üí z)
... | yes refl = base-rep-eq? x x‚ÇÅ
const x ~? (fv' , FV' ‚ä¢ v‚ÇÅ  , V‚ÇÅ ‚Ü¶ v) = no (Œª z ‚Üí z)
const x ~? (fv , FV ‚ä¢ŒΩ) = no (Œª z ‚Üí z)
const x ~? œâ = no (Œª z ‚Üí z)
const x ~? ‚¶Ö f ‚à£ fv' , FV' ‚¶Ü = no (Œª z ‚Üí z)
const x ~? ‚à• x‚ÇÅ ‚à• = no (Œª z ‚Üí z)
const x ~? (left x‚ÇÅ , X‚ÇÅ) = no (Œª z ‚Üí z)
const x ~? (right x‚ÇÅ , X‚ÇÅ) = no (Œª z ‚Üí z)
(fv' , x ‚ä¢ v' , V' ‚Ü¶ u) ~? const x‚ÇÇ = no (Œª z ‚Üí z)
(fv , fvs ‚ä¢ v , V ‚Ü¶ w) ~? (fv' , fvs' ‚ä¢ v' , V' ‚Ü¶ w') with (v ‚à∑ V) ‚âà? (v' ‚à∑ V')
... | no ¬¨V~V' = yes (inj‚ÇÅ ¬¨V~V')
... | yes V~V' with w ~? w'
... | no ¬¨w~w' = no (Œª z ‚Üí [ (Œª x ‚Üí x V~V') 
                           , (Œª x ‚Üí ¬¨w~w' (proj‚ÇÇ x)) ] z )
... | yes w~w' = yes (inj‚ÇÇ ‚ü® V~V' , w~w' ‚ü©)
(fv' , FV' ‚ä¢ v' , V' ‚Ü¶ u) ~? (fv , FV ‚ä¢ŒΩ) = yes tt
(fv' , FV ‚ä¢ v' , V' ‚Ü¶ u) ~? œâ = no (Œª z ‚Üí z)
(fv , FV ‚ä¢ v' , V' ‚Ü¶ u) ~? ‚¶Ö f ‚à£ fv' , FV' ‚¶Ü = no (Œª z ‚Üí z)
(fv' , FV ‚ä¢ v' , V' ‚Ü¶ u) ~? ‚à• x‚ÇÇ ‚à• = no (Œª z ‚Üí z)
(fv' , FV ‚ä¢ v' , V' ‚Ü¶ u) ~? (left x , X) = no (Œª z ‚Üí z)
(fv' , FV ‚ä¢ v' , V' ‚Ü¶ u) ~? (right x , X) = no (Œª z ‚Üí z)
(fv , FV ‚ä¢ŒΩ) ~? const x = no (Œª z ‚Üí z)
(fv , FV ‚ä¢ŒΩ) ~? (fv' , x ‚ä¢ v' , V' ‚Ü¶ v) = yes tt
(fv , FV ‚ä¢ŒΩ) ~? (fv' , FV' ‚ä¢ŒΩ) = yes tt
(fv , FV ‚ä¢ŒΩ) ~? œâ = no (Œª z ‚Üí z)
(fv , FV ‚ä¢ŒΩ) ~? ‚¶Ö f ‚à£ fv' , FV' ‚¶Ü = no (Œª z ‚Üí z)
(fv , FV ‚ä¢ŒΩ) ~? ‚à• x ‚à• = no (Œª z ‚Üí z)
(fv , FV ‚ä¢ŒΩ) ~? (left x , X) = no (Œª z ‚Üí z)
(fv , FV ‚ä¢ŒΩ) ~? (right x , X) = no (Œª z ‚Üí z)
œâ ~? const x = no (Œª z ‚Üí z)
œâ ~? (fv' , x ‚ä¢ v' , V' ‚Ü¶ v) = no (Œª z ‚Üí z)
œâ ~? (fv , FV ‚ä¢ŒΩ) = no (Œª z ‚Üí z)
œâ ~? œâ = yes tt
œâ ~? ‚¶Ö f ‚à£ fv' , FV' ‚¶Ü = no (Œª z ‚Üí z)
œâ ~? ‚à• x ‚à• = no (Œª z ‚Üí z)
œâ ~? (left x , X) = no (Œª z ‚Üí z)
œâ ~? (right x , X) = no (Œª z ‚Üí z)
‚¶Ö f ‚à£ fv' , FV' ‚¶Ü ~? const x = no (Œª z ‚Üí z)
‚¶Ö f ‚à£ fv' , FV' ‚¶Ü ~? (fv , x ‚ä¢ v' , V' ‚Ü¶ v) = no (Œª z ‚Üí z)
‚¶Ö f ‚à£ fv' , FV' ‚¶Ü ~? (fv , FV ‚ä¢ŒΩ) = no (Œª z ‚Üí z)
‚¶Ö f ‚à£ fv' , FV' ‚¶Ü ~? œâ = no (Œª z ‚Üí z)
‚¶Ö f ‚à£ fv , FV ‚¶Ü ~? ‚¶Ö f' ‚à£ fv' , FV' ‚¶Ü = (f ~? f') √ó-dec ((fv ‚à∑ FV) ‚âà? (fv' ‚à∑ FV'))
‚¶Ö f ‚à£ fv' , FV' ‚¶Ü ~? ‚à• x ‚à• = no (Œª z ‚Üí z)
‚¶Ö f ‚à£ fv' , FV' ‚¶Ü ~? (left x , X) = no (Œª z ‚Üí z)
‚¶Ö f ‚à£ fv' , FV' ‚¶Ü ~? (right x , X) = no (Œª z ‚Üí z)
‚à• x ‚à• ~? const x‚ÇÅ = no (Œª z ‚Üí z)
‚à• x ‚à• ~? (fv' , FV' ‚ä¢ v‚ÇÅ  , V‚ÇÅ ‚Ü¶ v) = no (Œª z ‚Üí z)
‚à• x ‚à• ~? (fv , FV ‚ä¢ŒΩ) = no (Œª z ‚Üí z)
‚à• x ‚à• ~? œâ = no (Œª z ‚Üí z)
‚à• x ‚à• ~? ‚¶Ö f ‚à£ fv' , FV' ‚¶Ü = no (Œª z ‚Üí z)
‚à• [] ‚à• ~? ‚à• [] ‚à• = yes tt
‚à• [] ‚à• ~? ‚à• x ‚à∑ x‚ÇÅ ‚à• = no (Œª z ‚Üí z)
‚à• x ‚à∑ x‚ÇÇ ‚à• ~? ‚à• [] ‚à• = no (Œª z ‚Üí z)
‚à• x ‚à∑ x‚ÇÇ ‚à• ~? ‚à• x‚ÇÅ ‚à∑ x‚ÇÉ ‚à• = (x ~? x‚ÇÅ) √ó-dec (‚à• x‚ÇÇ ‚à• ~? ‚à• x‚ÇÉ ‚à•)
‚à• x ‚à• ~? (left x‚ÇÅ , X‚ÇÅ) = no (Œª z ‚Üí z)
‚à• x ‚à• ~? (right x‚ÇÅ , X‚ÇÅ) = no (Œª z ‚Üí z)
(left x , X) ~? const x‚ÇÅ = no (Œª z ‚Üí z)
(left x , X) ~? (fv' , FV' ‚ä¢ v‚ÇÅ  , V‚ÇÅ ‚Ü¶ v) = no (Œª z ‚Üí z)
(left x , X) ~? (fv , FV ‚ä¢ŒΩ) = no (Œª z ‚Üí z)
(left x , X) ~? œâ = no (Œª z ‚Üí z)
(left x , X) ~? ‚¶Ö f ‚à£ fv' , FV' ‚¶Ü = no (Œª z ‚Üí z)
(left x , X) ~? ‚à• x‚ÇÅ ‚à• = no (Œª z ‚Üí z)
(left x , X) ~? (left x‚ÇÅ , X‚ÇÅ) = (x ‚à∑ X) ‚âà? (x‚ÇÅ ‚à∑ X‚ÇÅ)
(left x , X) ~? (right x‚ÇÅ , X‚ÇÅ) = no (Œª z ‚Üí z)
(right x , X) ~? const x‚ÇÅ = no (Œª z ‚Üí z)
(right x , X) ~? (fv' , FV' ‚ä¢ v‚ÇÅ  , V‚ÇÅ ‚Ü¶ v) = no (Œª z ‚Üí z)
(right x , X) ~? (fv , FV ‚ä¢ŒΩ) = no (Œª z ‚Üí z)
(right x , X) ~? œâ = no (Œª z ‚Üí z)
(right x , X) ~? ‚¶Ö f ‚à£ fv' , FV' ‚¶Ü = no (Œª z ‚Üí z)
(right x , X) ~? ‚à• x‚ÇÅ ‚à• = no (Œª z ‚Üí z)
(right x , X) ~? (left x‚ÇÅ , X‚ÇÅ) = no (Œª z ‚Üí z)
(right x , X) ~? (right x‚ÇÅ , X‚ÇÅ) = (x ‚à∑ X) ‚âà? (x‚ÇÅ ‚à∑ X‚ÇÅ)

u ~>? [] = yes All.[]
u ~>? (x ‚à∑ V) with u ~? x
... | no ¬¨u~x = no (Œª z ‚Üí ¬¨u~x (head z))
... | yes u~x with u ~>? V 
... | no ¬¨u~V = no Œª z ‚Üí ¬¨u~V (tail z)
... | yes U~V = yes (u~x All.‚à∑ U~V)

[] ‚âà? V = yes tt
(x ‚à∑ U) ‚âà? V with x ~>? V
... | no ¬¨x~V = no (Œª z ‚Üí ¬¨x~V (proj‚ÇÅ z))
... | yes x~V with U ‚âà? V
... | no ¬¨U~V = no (Œª z ‚Üí ¬¨U~V (proj‚ÇÇ z))
... | yes U~V = yes ‚ü® x~V , U~V ‚ü©



‚âà‚áíEvery : ‚àÄ A B ‚Üí A ‚âà B ‚Üí Every _~_ (mem A) (mem B)
‚âà‚áíEvery (x ‚à∑ A) B ‚ü® x~B , A~B ‚ü© a b (here refl) b‚ààB = 
  lookup x~B b‚ààB
‚âà‚áíEvery (x ‚à∑ A) B ‚ü® x~B , A~B ‚ü© a b (there a‚ààA) b‚ààB = 
  ‚âà‚áíEvery A B A~B a b a‚ààA b‚ààB

Every‚áí‚âà : ‚àÄ A B ‚Üí Every _~_ (mem A) (mem B) ‚Üí A ‚âà B
Every‚áí‚âà [] B A~B = tt
Every‚áí‚âà (x ‚à∑ A) B A~B = 
  ‚ü® tabulate (Œª {b} b‚ààB ‚Üí A~B x b (here refl) b‚ààB) 
  , Every‚áí‚âà A B (Œª a b a‚ààA b‚ààB ‚Üí A~B a b (there a‚ààA) b‚ààB) ‚ü©

