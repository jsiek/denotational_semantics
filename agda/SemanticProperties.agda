open import Data.Empty using (‚ä•-elim) renaming (‚ä• to False)
open import Data.List using (List ; _‚à∑_ ; []; _++_; length)
open import Data.List.Properties using (++-conicalÀ°)
open import Data.List.Membership.Propositional renaming (_‚àà_ to _‚ãµ_)
open import Data.List.Membership.Propositional.Properties
  using (‚àà-++‚Å∫À°; ‚àà-++‚Å∫ ≥)
open import Data.List.Relation.Unary.Any using (here; there) 
open import Data.Nat using (‚Ñï; zero; suc; _‚âü_; _<_; s‚â§s)
open import Data.Product using (_√ó_; Œ£; Œ£-syntax; proj‚ÇÅ; proj‚ÇÇ)
    renaming (_,_ to ‚ü®_,_‚ü©)
open import Data.Sum using (_‚äé_; inj‚ÇÅ; inj‚ÇÇ)
open import Data.Unit using (tt) renaming (‚ä§ to True)
open import Level renaming (zero to lzero; suc to lsuc)
open import Relation.Binary.PropositionalEquality
    using (_‚â°_; _‚â¢_; refl; sym; subst)
open import Relation.Nullary using (¬¨_; Dec; yes; no)

open import Primitives
open import PValueCBV
open import ScopedTuple hiding (ùí´)
open import SetsAsPredicates
open import Sig
open import Syntax hiding (‚åà_‚åâ)
open import Utilities using (extensionality)

module SemanticProperties (Op : Set) (sig : Op ‚Üí List Sig) where

open Syntax.OpSig Op sig
open import Fold2 Op sig

rel-args : ‚àÄ{‚Ñì}{T : Set ‚Ñì}
   ‚Üí (‚àÄ b ‚Üí ArgTy T b ‚Üí ArgTy T b ‚Üí Set‚ÇÅ)
   ‚Üí ‚àÄ bs ‚Üí Tuple bs (ArgTy T)
   ‚Üí Tuple bs (ArgTy T) ‚Üí Set‚ÇÅ
rel-args R [] xs ys = Lift (lsuc lzero) True
rel-args R (b ‚à∑ bs) ‚ü® x , xs ‚ü© ‚ü® y , ys ‚ü© = (R b x y) √ó (rel-args R bs xs ys)

‚äÜ-arg : ‚àÄ b ‚Üí ArgTy (ùí´ Value) b ‚Üí ArgTy (ùí´ Value) b ‚Üí Set‚ÇÅ
‚äÜ-arg ‚ñ† x y = Lift (lsuc lzero) (x ‚äÜ y)
‚äÜ-arg (ŒΩ b) f g = ‚àÄ X ‚Üí ‚äÜ-arg b (f X) (g X)
‚äÜ-arg (‚àÅ b) x y = ‚äÜ-arg b x y

‚äÜ-args = rel-args ‚äÜ-arg

pred-args : (‚àÄ b ‚Üí Arg b ‚Üí Set‚ÇÅ) ‚Üí ‚àÄ bs ‚Üí Args bs ‚Üí Set‚ÇÅ
pred-args P [] args = Lift (lsuc lzero) True
pred-args P (b ‚à∑ bs) (cons arg args) = P b arg √ó pred-args P bs args


record Semantics : Set‚ÇÅ where
  field interp-op  : (op : Op) ‚Üí Tuple (sig op) (ArgTy (ùí´ Value)) ‚Üí ùí´ Value
  
  ‚ü¶_‚üß : ABT ‚Üí Env ‚Üí ùí´ Value
  ‚ü¶ M ‚üß œÅ = fold interp-op ‚àÖ œÅ M

  ‚ü¶_‚üß‚Çê : ‚àÄ{b} ‚Üí Arg b ‚Üí Env  ‚Üí ArgTy (ùí´ Value) b
  ‚ü¶ arg ‚üß‚Çê œÅ = fold-arg interp-op ‚àÖ œÅ arg

  ‚ü¶_‚üß‚Çä : ‚àÄ{bs} ‚Üí Args bs ‚Üí Env  ‚Üí Tuple bs (ArgTy (ùí´ Value))
  ‚ü¶ args ‚üß‚Çä œÅ = fold-args interp-op ‚àÖ œÅ args

  field mono-op : ‚àÄ{op}{xs}{ys} ‚Üí ‚äÜ-args (sig op) xs ys ‚Üí interp-op op xs ‚äÜ interp-op op ys

  Cont-Env-Arg : ‚àÄ {{_ : Semantics}} (œÅ : Env) (NE-œÅ : nonempty-env œÅ)
    ‚Üí ‚àÄ b ‚Üí (arg : Arg b)  ‚Üí Set‚ÇÅ
  Cont-Env-Arg œÅ NE-œÅ ‚ñ† (ast M) = continuous-env ‚ü¶ M ‚üß œÅ
  Cont-Env-Arg œÅ NE-œÅ (ŒΩ b) (bind arg) =
    ‚àÄ V ‚Üí (ne : V ‚â¢ [])
    ‚Üí Cont-Env-Arg (mem V ‚Ä¢ œÅ)
          (extend-nonempty-env NE-œÅ (E‚â¢[]‚áínonempty-mem ne)) b arg
  Cont-Env-Arg œÅ NE-œÅ (‚àÅ b) (clear arg) = Lift (lsuc lzero) True

open Semantics {{...}}

record ContinuousSemantics : Set‚ÇÅ where
  field {{Sem}} : Semantics
  field continuous-op : ‚àÄ{op}{œÅ}{NE-œÅ}{v}{args} ‚Üí v ‚àà ‚ü¶ op ‚¶Ö args ‚¶Ü ‚üß œÅ ‚Üí pred-args (Cont-Env-Arg œÅ NE-œÅ) (sig op) args  ‚Üí   Œ£[ œÅ‚Ä≤ ‚àà Env ] finite-env œÅ‚Ä≤ √ó œÅ‚Ä≤ ‚äÜ‚Çë œÅ √ó v ‚àà (‚ü¶ op ‚¶Ö args ‚¶Ü ‚üß œÅ‚Ä≤)

open ContinuousSemantics {{...}}

{- Monotone -------------------------------------------------------------------}

‚ü¶‚üß-monotone : ‚àÄ{{_ : Semantics}} {œÅ œÅ‚Ä≤} (M : ABT)
  ‚Üí  œÅ ‚äÜ‚Çë œÅ‚Ä≤ ‚Üí  ‚ü¶ M ‚üß œÅ ‚äÜ ‚ü¶ M ‚üß œÅ‚Ä≤
‚ü¶‚üß-monotone-arg : ‚àÄ{{_ : Semantics}} {b}{œÅ œÅ‚Ä≤} (arg : Arg b)
  ‚Üí  œÅ ‚äÜ‚Çë œÅ‚Ä≤ ‚Üí  ‚äÜ-arg b (‚ü¶ arg ‚üß‚Çê œÅ) (‚ü¶ arg ‚üß‚Çê œÅ‚Ä≤)
‚ü¶‚üß-monotone-args : ‚àÄ{{_ : Semantics}} {bs}{œÅ œÅ‚Ä≤} (args : Args bs)
  ‚Üí  œÅ ‚äÜ‚Çë œÅ‚Ä≤  ‚Üí  ‚äÜ-args bs (‚ü¶ args ‚üß‚Çä œÅ) (‚ü¶ args ‚üß‚Çä œÅ‚Ä≤)
  
‚ü¶‚üß-monotone {œÅ}{œÅ‚Ä≤} (` x) œÅ<œÅ‚Ä≤ = œÅ<œÅ‚Ä≤ x
‚ü¶‚üß-monotone {œÅ}{œÅ‚Ä≤} (op ‚¶Ö args ‚¶Ü) œÅ<œÅ‚Ä≤ = mono-op (‚ü¶‚üß-monotone-args  args œÅ<œÅ‚Ä≤)

‚ü¶‚üß-monotone-arg {‚ñ†} (ast M) œÅ<œÅ‚Ä≤ = lift (‚ü¶‚üß-monotone M œÅ<œÅ‚Ä≤)
‚ü¶‚üß-monotone-arg {ŒΩ b}{œÅ}{œÅ‚Ä≤} (bind arg) œÅ<œÅ‚Ä≤ X =
    ‚ü¶‚üß-monotone-arg {b}{X ‚Ä¢ œÅ}{X ‚Ä¢ œÅ‚Ä≤} arg (env-ext œÅ<œÅ‚Ä≤)
‚ü¶‚üß-monotone-arg {‚àÅ b} (clear arg) œÅ<œÅ‚Ä≤ =
    ‚ü¶‚üß-monotone-arg {b}{Œª x ‚Üí ‚àÖ}{Œª x ‚Üí ‚àÖ} arg Œª x d z ‚Üí z

‚ü¶‚üß-monotone-args {bs = []} nil œÅ<œÅ‚Ä≤ = lift tt
‚ü¶‚üß-monotone-args {bs = b ‚à∑ bs} (cons arg args) œÅ<œÅ‚Ä≤ =
  ‚ü® ‚ü¶‚üß-monotone-arg arg œÅ<œÅ‚Ä≤ , ‚ü¶‚üß-monotone-args args œÅ<œÅ‚Ä≤ ‚ü©

‚ü¶‚üß-monotone-one : ‚àÄ{{_ : Semantics}}{N : ABT}{œÅ}
   ‚Üí monotone (Œª D ‚Üí ‚ü¶ N ‚üß (D ‚Ä¢ œÅ))
‚ü¶‚üß-monotone-one {N}{œÅ} D‚ÇÅ D‚ÇÇ D12 = ‚ü¶‚üß-monotone N G
  where G : (x : Var) ‚Üí (D‚ÇÅ ‚Ä¢ œÅ) x ‚äÜ (D‚ÇÇ ‚Ä¢ œÅ) x
        G zero = D12
        G (suc x) = Œª v z ‚Üí z

{- Continuous -----------------------------------------------------------------}

‚ü¶‚üß-continuous : ‚àÄ{{_ : ContinuousSemantics}}{œÅ}{NE-œÅ : nonempty-env œÅ}
    (M : ABT)
  ‚Üí continuous-env ‚ü¶ M ‚üß œÅ 
‚ü¶‚üß-cont-env-arg : ‚àÄ{{_ : ContinuousSemantics}}
    {œÅ}{NE-œÅ : nonempty-env œÅ} {b}(arg : Arg b)
  ‚Üí Cont-Env-Arg œÅ NE-œÅ b arg 
‚ü¶‚üß-cont-env-args : ‚àÄ{{_ : ContinuousSemantics}}
    {œÅ}{NE-œÅ : nonempty-env œÅ}{bs} (args : Args bs)
  ‚Üí pred-args (Cont-Env-Arg œÅ NE-œÅ) bs args

‚ü¶‚üß-continuous {œÅ}{NE-œÅ} (` x) v v‚àà‚ü¶M‚üßœÅ =
   ‚ü® (single-env x ‚åà v ‚åâ œÅ NE-œÅ) , ‚ü® (single-fin {v}{x}) , ‚ü® (single-‚äÜ v‚àà‚ü¶M‚üßœÅ) ,
     (v‚ààsingle[xv]x {v}{x}) ‚ü© ‚ü© ‚ü©

‚ü¶‚üß-continuous {œÅ}{NE-œÅ} (op ‚¶Ö args ‚¶Ü) v v‚àà‚ü¶M‚üßœÅ =
    continuous-op{NE-œÅ = NE-œÅ} v‚àà‚ü¶M‚üßœÅ (‚ü¶‚üß-cont-env-args {œÅ}{NE-œÅ} args)
‚ü¶‚üß-cont-env-arg {œÅ} {NE-œÅ} {‚ñ†} (ast M) v v‚àà‚ü¶M‚üßœÅ =
    ‚ü¶‚üß-continuous {œÅ}{NE-œÅ = NE-œÅ} M v v‚àà‚ü¶M‚üßœÅ
‚ü¶‚üß-cont-env-arg {œÅ} {NE-œÅ} {ŒΩ b} (bind arg) V V‚â¢[] =
   let NE-V‚Ä¢œÅ = (extend-nonempty-env NE-œÅ (E‚â¢[]‚áínonempty-mem V‚â¢[])) in
   ‚ü¶‚üß-cont-env-arg {mem V ‚Ä¢ œÅ}{NE-V‚Ä¢œÅ} {b} arg
‚ü¶‚üß-cont-env-arg {œÅ} {NE-œÅ} {‚àÅ b} (clear arg) = lift tt

‚ü¶‚üß-cont-env-args {œÅ} {NE-œÅ} {[]} nil = lift tt
‚ü¶‚üß-cont-env-args {œÅ} {NE-œÅ} {b ‚à∑ bs} (cons arg args) =
    ‚ü® ‚ü¶‚üß-cont-env-arg {œÅ}{NE-œÅ}{b} arg ,
      ‚ü¶‚üß-cont-env-args {œÅ} {NE-œÅ} {bs} args ‚ü©

‚ü¶‚üß-continuous-‚äÜ  : ‚àÄ{{_ : ContinuousSemantics}}{œÅ}{NE-œÅ : nonempty-env œÅ}
    (M : ABT)
  ‚Üí ‚àÄ V ‚Üí mem V ‚äÜ ‚ü¶ M ‚üß œÅ
  ‚Üí Œ£[ œÅ‚Ä≤ ‚àà Env ] finite-env œÅ‚Ä≤ √ó œÅ‚Ä≤ ‚äÜ‚Çë œÅ  √ó mem V ‚äÜ ‚ü¶ M ‚üß œÅ‚Ä≤
‚ü¶‚üß-continuous-‚äÜ {œÅ}{NE-œÅ} M V V‚äÜEœÅ =
    continuous-‚àà‚áí‚äÜ ‚ü¶ M ‚üß œÅ NE-œÅ (‚ü¶‚üß-monotone M) V V‚äÜEœÅ
        (Œª v v‚ààV ‚Üí ‚ü¶‚üß-continuous {NE-œÅ = NE-œÅ} M v)

‚ü¶‚üß-continuous-one : ‚àÄ{{_ : ContinuousSemantics}}{N : ABT}
    {œÅ}{NE-œÅ : nonempty-env œÅ}
  ‚Üí continuous (Œª D ‚Üí ‚ü¶ N ‚üß (D ‚Ä¢ œÅ))
‚ü¶‚üß-continuous-one {N}{œÅ}{NE-œÅ} X E E‚äÜ‚ü¶N‚üßX‚Ä¢œÅ NE-X
    with ‚ü¶‚üß-continuous-‚äÜ {X ‚Ä¢ œÅ}{extend-nonempty-env NE-œÅ NE-X} N E E‚äÜ‚ü¶N‚üßX‚Ä¢œÅ
... | ‚ü® œÅ‚Ä≤ , ‚ü® fœÅ‚Ä≤ , ‚ü® œÅ‚Ä≤‚äÜX‚Ä¢œÅ , E‚äÜ‚ü¶N‚üßœÅ‚Ä≤ ‚ü© ‚ü© ‚ü©
    with fœÅ‚Ä≤ 0
... | ‚ü® D , ‚ü® œÅ‚Ä≤x=D , NE-D ‚ü© ‚ü© =
    ‚ü® D , ‚ü® (Œª v v‚ààD ‚Üí œÅ‚Ä≤‚äÜX‚Ä¢œÅ 0 v ((proj‚ÇÇ œÅ‚Ä≤x=D) v v‚ààD)) ,
    ‚ü® (Œª d d‚ààE ‚Üí ‚ü¶‚üß-monotone {œÅ‚Ä≤}{mem D ‚Ä¢ œÅ} N G d (E‚äÜ‚ü¶N‚üßœÅ‚Ä≤ d d‚ààE)) , NE-D ‚ü© ‚ü© ‚ü©
    where
    G : (x : Var) ‚Üí œÅ‚Ä≤ x ‚äÜ (mem D ‚Ä¢ œÅ) x
    G zero d d‚ààœÅ0 = (proj‚ÇÅ œÅ‚Ä≤x=D) d d‚ààœÅ0 
    G (suc x) d m = œÅ‚Ä≤‚äÜX‚Ä¢œÅ (suc x) d m

Œõ‚ü¶‚üß-‚ñ™-id : ‚àÄ {{_ : ContinuousSemantics}}{N : ABT}{œÅ}{NE-œÅ : nonempty-env œÅ}
    {X : ùí´ Value}
  ‚Üí nonempty X
  ‚Üí (Œõ Œª X ‚Üí ‚ü¶ N ‚üß (X ‚Ä¢ œÅ)) ‚ñ™ X ‚âÉ ‚ü¶ N ‚üß (X ‚Ä¢ œÅ)
Œõ‚ü¶‚üß-‚ñ™-id {N}{œÅ}{NE-œÅ}{X} NE-X =
    Œõ-‚ñ™-id {Œª D ‚Üí ‚ü¶ N ‚üß (D ‚Ä¢ œÅ)} (‚ü¶‚üß-continuous-one{N}{œÅ}{NE-œÅ})
        (‚ü¶‚üß-monotone-one{N}) NE-X
