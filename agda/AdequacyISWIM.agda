open import Utilities using (_iff_)
open import Primitives
open import Structures
open import ValueConst
open import EvalISWIM
open import ISWIM
open ISWIM.ASTMod
   using (`_; _‚¶Ö_‚¶Ü; Subst; Ctx; plug;
          exts; cons; bind; nil; rename; ‚ü™_‚ü´; subst-zero; _[_]; rename-id;
          WF; WF-var; WF-op; WF-cons; WF-nil; WF-ast; WF-bind;
          WF-rel; WF-Ctx; WF-plug; ctx-depth)
open import ValueConst
open import ValueStructAux value_struct
open import OrderingAux value_struct ordering
open import Consistency
open import ConsistentAux value_struct ordering consistent
open import CurryConst
open import PrimConst
open import ModelCurryConst
open import ModelCallByValue value_struct ordering consistent ‚Ñ± model_curry
open import ISWIMDenot value_struct ordering _‚óè_ ‚Ñ± (Œª {P} k v ‚Üí ‚Ñò {P} k v)
open import Compositionality
open ISWIMDenotAux value_struct ordering _‚óè_ ‚Ñ± consistent model_curry_apply (Œª {P} k v ‚Üí ‚Ñò {P} k v)
open import SoundnessISWIM using (soundness; ‚Ñ∞-‚ä•)

import Relation.Binary.PropositionalEquality as Eq
open Eq using (_‚â°_; _‚â¢_; refl; trans; sym; cong; cong‚ÇÇ; cong-app)
open Eq.‚â°-Reasoning using (begin_; _‚â°‚ü®‚ü©_; _‚â°‚ü®_‚ü©_; _‚àé)
open import Data.Nat using (‚Ñï; zero; suc; s‚â§s; _<_)
open import Data.List using (List; []; _‚à∑_; length)
open import Data.Product using (_√ó_; Œ£; Œ£-syntax; ‚àÉ; ‚àÉ-syntax; proj‚ÇÅ; proj‚ÇÇ)
  renaming (_,_ to ‚ü®_,_‚ü©)
open import Data.Sum
open import Data.Empty using (‚ä•-elim) renaming (‚ä• to Bot)
open import Data.Unit
open import Relation.Nullary using (¬¨_)
open import Relation.Nullary.Negation using (contradiction)
open import Relation.Nullary using (Dec; yes; no)


module AdequacyISWIM where


ùïç : Value ‚Üí Val ‚Üí Set
ùïç ‚ä• (val-const x) = ‚ä§
ùïç ‚ä• (val-clos N Œ≥) = ‚ä§
ùïç (const {B} k) (val-const {P} p) = ‚Ñò {P} p (const {B} k)
ùïç (const {B} k) (val-clos N Œ≥) = Bot
ùïç (v ‚Ü¶ w) (val-const {P} p) = ‚Ñò {P} p (v ‚Ü¶ w)
ùïç (v ‚Ü¶ w) (val-clos N Œ≥) =
    (‚àÄ{c : Val} ‚Üí ùïç v c ‚Üí Œ£[ c' ‚àà Val ] (Œ≥ ,' c) ‚ä¢ N ‚áì c'  √ó  ùïç w c')
ùïç (u ‚äî v) c = ùïç u c √ó ùïç v c
ùïç _ bogus = Bot

data ùîæ : Env ‚Üí ValEnv ‚Üí Set where
  ùîæ-‚àÖ : ùîæ `‚àÖ ‚àÖ'
  ùîæ-ext : ‚àÄ{Œ≥ : Env}{Œ≥' : ValEnv}{v c}
        ‚Üí ùîæ Œ≥ Œ≥' ‚Üí ùïç v c 
        ‚Üí ùîæ (Œ≥ `, v) (Œ≥' ,' c)

ùîæ‚Üíùïç : (Œ≥ : Env) ‚Üí (Œ≥' : ValEnv)
    ‚Üí ùîæ Œ≥ Œ≥'
    ‚Üí (x : Var) ‚Üí (lt : x < length Œ≥')
    ‚Üí ùïç (Œ≥ x) (nth Œ≥' x)
ùîæ‚Üíùïç .(Œª x‚ÇÅ ‚Üí ‚ä•) .[] ùîæ-‚àÖ x ()
ùîæ‚Üíùïç .(_ `, _) .(_ ‚à∑ _) (ùîæ-ext ùîæŒ≥Œ≥' ùîºvc) zero (s‚â§s lt) = ùîºvc
ùîæ‚Üíùïç Œ≥‚ÇÇ (c ‚à∑ Œ≥') (ùîæ-ext {Œ≥}{Œ≥'}{v}{c} ùîæŒ≥Œ≥' ùîºvc) (suc x) (s‚â§s lt) =
    ùîæ‚Üíùïç Œ≥ Œ≥' ùîæŒ≥Œ≥' x lt

¬¨ùïç[bogus] : ‚àÄ v ‚Üí ¬¨ ùïç v bogus
¬¨ùïç[bogus] ‚ä• ()
¬¨ùïç[bogus] (v ‚Ü¶ w) ()
¬¨ùïç[bogus] (v ‚äî w) ‚ü® vv , vw ‚ü© = ¬¨ùïç[bogus] v vv

sub-ùïç : ‚àÄ{c : Val}{v v'} ‚Üí wf v ‚Üí wf v' ‚Üí ùïç v c ‚Üí v' ‚äë v ‚Üí ùïç v' c

sub-ùïç {val-const x} wfv wfv' vc ‚äë-‚ä• = tt
sub-ùïç {val-clos N Œ≥} wfv wfv' vc ‚äë-‚ä• = tt
sub-ùïç {bogus}{v} wfv wfv' vc ‚äë-‚ä• = ¬¨ùïç[bogus] v vc
sub-ùïç {val-const {base B} k} wfv wfv' vc (‚äë-const {B‚Ä≤} {k‚Ä≤})
    with base-eq? B B‚Ä≤
... | yes eq rewrite eq = vc
... | no neq = vc
sub-ùïç {val-const {B ‚áí P} p} wfv wfv' () (‚äë-const {B‚Ä≤} {k}) 
sub-ùïç {val-clos N x} wfv wfv' () ‚äë-const
sub-ùïç wfu (wf-‚äî v~w wfv wfw) vc (‚äë-conj-L lt1 lt2) =
    ‚ü® sub-ùïç wfu wfv vc lt1 , sub-ùïç wfu wfw vc lt2 ‚ü©
sub-ùïç (wf-‚äî v‚ÇÅ~v‚ÇÇ wfv‚ÇÅ wfv‚ÇÇ) wfv' ‚ü® vv1 , vv2 ‚ü© (‚äë-conj-R1 lt) =
    sub-ùïç wfv‚ÇÅ wfv' vv1 lt
sub-ùïç (wf-‚äî v‚ÇÅ~v‚ÇÇ wfv‚ÇÅ wfv‚ÇÇ) wfv' ‚ü® vv1 , vv2 ‚ü© (‚äë-conj-R2 lt) =
    sub-ùïç wfv‚ÇÇ wfv' vv2 lt
sub-ùïç {c}{u}{v' = v ‚Ü¶ w} wfu (wf-fun wfv wfw) ùïçuc
   (‚äë-fun{u‚Ä≤ = u‚Ä≤} u‚Ä≤‚äÜu fu‚Ä≤ du‚Ä≤‚äëv w‚äëcu‚Ä≤) =
   let ùïçu‚Ä≤c = ùïç-‚äÜ ùïçuc u‚Ä≤‚äÜu in
   let ùïçdu‚Ä≤‚Ü¶cu‚Ä≤c = ùïç-dom-cod wfv fu‚Ä≤ du‚Ä≤‚äëv ùïçu‚Ä≤c in
   lemma {dom u‚Ä≤}{cod u‚Ä≤}{v}{w}{c} wfv wfw
         (wf-dom (wf-‚äÜ u‚Ä≤‚äÜu wfu) wfv fu‚Ä≤ du‚Ä≤‚äëv)
         (wf-cod (wf-‚äÜ u‚Ä≤‚äÜu wfu) wfv fu‚Ä≤ du‚Ä≤‚äëv)
         du‚Ä≤‚äëv w‚äëcu‚Ä≤ ùïçdu‚Ä≤‚Ü¶cu‚Ä≤c  

   where
   ùïç-‚àà : ‚àÄ{c}{u v} ‚Üí ùïç u c ‚Üí v ‚àà u ‚Üí ùïç v c
   ùïç-‚àà {val-const x} {‚ä•} {.‚ä•} ùïçuc refl = tt
   ùïç-‚àà {val-clos N Œ≥} {‚ä•} {.‚ä•} ùïçuc refl = tt
   ùïç-‚àà {c} {const k} {v} ùïçuc refl = ùïçuc
   ùïç-‚àà {c} {u‚ÇÅ ‚Ü¶ u‚ÇÇ} {v} ùïçuc refl = ùïçuc
   ùïç-‚àà {c} {u‚ÇÅ ‚äî u‚ÇÇ} {v} ‚ü® fst‚ÇÅ , snd‚ÇÅ ‚ü© (inj‚ÇÅ x) = ùïç-‚àà fst‚ÇÅ x
   ùïç-‚àà {c} {u‚ÇÅ ‚äî u‚ÇÇ} {v} ‚ü® fst‚ÇÅ , snd‚ÇÅ ‚ü© (inj‚ÇÇ y) = ùïç-‚àà snd‚ÇÅ y
   
   ùïç-‚äÜ : ‚àÄ{c}{u v} ‚Üí ùïç u c ‚Üí v ‚äÜ u ‚Üí ùïç v c
   ùïç-‚äÜ {val-const x} {u} {‚ä•} ùïçuc v‚äÜu = tt
   ùïç-‚äÜ {val-clos N Œ≥} {u} {‚ä•} ùïçuc v‚äÜu = tt
   ùïç-‚äÜ {bogus} {u} {‚ä•} ùïçuc v‚äÜu = ¬¨ùïç[bogus] u ùïçuc
   ùïç-‚äÜ {c} {u} {const k} ùïçuc v‚äÜu = ùïç-‚àà ùïçuc (v‚äÜu refl) 
   ùïç-‚äÜ {c} {u} {v‚ÇÅ ‚Ü¶ v‚ÇÇ} ùïçuc v‚äÜu = ùïç-‚àà ùïçuc (v‚äÜu refl) 
   ùïç-‚äÜ {c} {u} {v‚ÇÅ ‚äî v‚ÇÇ} ùïçuc v‚äÜu
       with ‚äî‚äÜ-inv v‚äÜu
   ... | ‚ü® v‚ÇÅ‚äÜu , v‚ÇÇ‚äÜu ‚ü© = ‚ü® ùïç-‚äÜ ùïçuc v‚ÇÅ‚äÜu , ùïç-‚äÜ ùïçuc v‚ÇÇ‚äÜu ‚ü©

   dist : ‚àÄ{c}{v w v' w' u}
        ‚Üí wf u ‚Üí v ‚äë u ‚Üí v' ‚äë u
        ‚Üí ùïç (v ‚Ü¶ w) c
        ‚Üí ùïç (v' ‚Ü¶ w') c
        ‚Üí ùïç ((v ‚äî v') ‚Ü¶ (w ‚äî w')) c
   dist {val-const {p} f} {v} {w} {v'} {w'} {u} wfu v‚äëu v'‚äëu ùïçv‚Ü¶wc ùïçv'‚Ü¶w'c
       with p
   ... | base b = ‚ä•-elim ùïçv‚Ü¶wc
   ... | b ‚áí p'
       with ùïçv‚Ü¶wc | ùïçv'‚Ü¶w'c
   ... | ‚ü® k , ‚ü® k‚äëv , ‚Ñòpkw ‚ü© ‚ü© | ‚ü® k‚Ä≤ , ‚ü® k‚Ä≤‚äëv' , ‚Ñòpk‚Ä≤w' ‚ü© ‚ü© 
       rewrite sym (k‚äëv‚Üík‚Ä≤‚äëv‚Üík‚Ä≤‚â°k wfu (‚äë-trans k‚äëv v‚äëu) (‚äë-trans k‚Ä≤‚äëv' v'‚äëu)) =
       ‚ü® k , ‚ü® (‚äë-conj-R1 k‚äëv) , ‚ü® ‚Ñòpkw , ‚Ñòpk‚Ä≤w' ‚ü© ‚ü© ‚ü©
   dist {val-clos N Œ≥} {v} {w} {v'} {w'} {u} wfu v‚äëu v'‚äëu ùïçv‚Ü¶wc ùïçv'‚Ü¶w'c
        {c} ‚ü® ùïçvc , ùïçv'c ‚ü©
       with ùïçv‚Ü¶wc ùïçvc | ùïçv'‚Ü¶w'c ùïçv'c 
   ... | ‚ü® c‚ÇÅ , ‚ü® L‚áìc‚ÇÅ , ùïçwc‚ÇÅ ‚ü© ‚ü©
       | ‚ü® c‚ÇÇ , ‚ü® L‚áìc‚ÇÇ , ùïçw'c‚ÇÇ ‚ü© ‚ü©
       rewrite sym (‚áì-determ L‚áìc‚ÇÅ L‚áìc‚ÇÇ) =
       ‚ü® c‚ÇÅ , ‚ü® L‚áìc‚ÇÅ , ‚ü® ùïçwc‚ÇÅ , ùïçw'c‚ÇÇ ‚ü© ‚ü© ‚ü©
   dist {bogus} wfu v‚äëu v'‚äëu () ùïçv'‚Ü¶w'c

   ùïç-dom-cod : ‚àÄ{c}{u v}
             ‚Üí wf v
             ‚Üí (fu : AllFun u)
             ‚Üí dom u {fu} ‚äë v
             ‚Üí ùïç u c
             ‚Üí ùïç (dom u {fu} ‚Ü¶ cod u {fu}) c
   ùïç-dom-cod {c} {‚ä•} {v} wfv () du‚äëv ùïçuc
   ùïç-dom-cod {c} {const k} {v} wfv () du‚äëv ùïçuc
   ùïç-dom-cod {c} {u‚ÇÅ ‚Ü¶ u‚ÇÇ} {v} wfv fu du‚äëv ùïçuc = ùïçuc
   ùïç-dom-cod {c} {u‚ÇÅ ‚äî u‚ÇÇ} {v} wfv ‚ü® fu‚ÇÅ , fu‚ÇÇ ‚ü© du‚äëv ‚ü® ùïçu‚ÇÅc , ùïçu‚ÇÇc ‚ü©
       with ‚äî‚äë-inv du‚äëv
   ... | ‚ü® du‚ÇÅ‚äëv , du‚ÇÇ‚äëv ‚ü© =
       let ih1 = ùïç-dom-cod wfv fu‚ÇÅ du‚ÇÅ‚äëv ùïçu‚ÇÅc in
       let ih2 = ùïç-dom-cod wfv fu‚ÇÇ du‚ÇÇ‚äëv ùïçu‚ÇÇc in
       dist{c} wfv du‚ÇÅ‚äëv du‚ÇÇ‚äëv ih1 ih2

   lemma : ‚àÄ{du cu v w}{c}
         ‚Üí wf v ‚Üí wf w ‚Üí wf du ‚Üí wf cu
         ‚Üí du ‚äë v ‚Üí w ‚äë cu ‚Üí ùïç (du ‚Ü¶ cu) c
         ‚Üí ùïç (v ‚Ü¶ w) c
   lemma {du} {cu} {v} {w} {val-const {p} f} wfv wfw wfdu wfcu
       du‚Ä≤‚äëv w‚äëcu‚Ä≤ ùïçdu‚Ä≤‚Ü¶cu‚Ä≤c
       with p
   ... | base b = ‚ä•-elim ùïçdu‚Ä≤‚Ü¶cu‚Ä≤c
   ... | b ‚áí p‚Ä≤
       with ùïçdu‚Ä≤‚Ü¶cu‚Ä≤c
   ... | ‚ü® k , ‚ü® k‚äëdu , ‚Ñò-fk-cu ‚ü© ‚ü© =
         ‚ü® k , ‚ü® ‚äë-trans k‚äëdu du‚Ä≤‚äëv , ‚Ñò-‚äë wfw ‚Ñò-fk-cu w‚äëcu‚Ä≤ ‚ü© ‚ü©
   lemma {du}{cu}{v}{w}{val-clos N Œ≥} wfv wfw wfdu wfcu
        du‚Ä≤‚äëv w‚äëcu‚Ä≤ ùïçdu‚Ä≤‚Ü¶cu‚Ä≤c {c} ùïçvc 
        with  ùïçdu‚Ä≤‚Ü¶cu‚Ä≤c (sub-ùïç wfv wfdu ùïçvc du‚Ä≤‚äëv)
   ... | ‚ü® v' , ‚ü® N‚áìv' , ùïç-cu-v' ‚ü© ‚ü© =
         ‚ü® v' , ‚ü® N‚áìv' , sub-ùïç wfcu wfw ùïç-cu-v' w‚äëcu‚Ä≤ ‚ü© ‚ü©
   lemma {c = bogus} wfv wfw wfdu wfcu du‚Ä≤‚äëv w‚äëcu‚Ä≤ ()



{-
sub-ùïç vc (‚äë-trans {v = v‚ÇÇ} lt1 lt2) = sub-ùïç (sub-ùïç vc lt2) lt1
-}
{-
sub-ùïç {val-const {P} f} vc (‚äë-fun{v}{w}{v‚Ä≤}{w‚Ä≤} lt1 lt2)
    with P
... | base B = ‚ä•-elim vc
... | B ‚áí P‚Ä≤ 
    with vc
... | ‚ü® k , ‚ü® k‚äëv‚Ä≤ , ‚Ñòfkw‚Ä≤ ‚ü© ‚ü© =
      ‚ü® k , ‚ü® (‚äë-trans k‚äëv‚Ä≤ lt1) , ‚Ñò-‚äë ‚Ñòfkw‚Ä≤ lt2 ‚ü© ‚ü©
sub-ùïç {val-clos N Œ≥} vc (‚äë-fun lt1 lt2) ev1
    with vc (sub-ùïç ev1 lt1)
... | ‚ü® c , ‚ü® Nc , v4 ‚ü© ‚ü© = ‚ü® c , ‚ü® Nc , sub-ùïç v4 lt2 ‚ü© ‚ü©
sub-ùïç {val-const {P} p} {v ‚Ü¶ w ‚äî v ‚Ü¶ w‚Ä≤} ‚ü® vc1 , vc2 ‚ü© ‚äë-dist
    with P
... | base B = ‚ä•-elim vc1
... | B ‚áí P‚Ä≤
    with vc1 | vc2
... | ‚ü® k , ‚ü® k‚äëv , ‚Ñòpkw ‚ü© ‚ü© | ‚ü® k‚Ä≤ , ‚ü® k‚Ä≤‚äëv , ‚Ñòpk‚Ä≤w‚Ä≤ ‚ü© ‚ü© 
    rewrite k‚äëv‚Üík‚Ä≤‚äëv‚Üík‚Ä≤‚â°k ? k‚äëv k‚Ä≤‚äëv =
      ‚ü® k , ‚ü® k‚äëv , ‚ü® ‚Ñòpkw , ‚Ñòpk‚Ä≤w‚Ä≤ ‚ü© ‚ü© ‚ü©

sub-ùïç {val-clos N Œ≥} {v ‚Ü¶ w ‚äî v ‚Ü¶ w'} ‚ü® vcw , vcw' ‚ü© ‚äë-dist ev1c
    with vcw ev1c | vcw' ev1c
... | ‚ü® c , ‚ü® L‚áìc‚ÇÇ , ùïçw ‚ü© ‚ü©
    | ‚ü® c‚ÇÉ , ‚ü® L‚áìc‚ÇÉ , ùïçw' ‚ü© ‚ü© rewrite ‚áì-determ L‚áìc‚ÇÉ L‚áìc‚ÇÇ =
      ‚ü® c , ‚ü® L‚áìc‚ÇÇ , ‚ü® ùïçw , ùïçw' ‚ü© ‚ü© ‚ü©
-}

‚Ñòpv‚Üíùïçvp : ‚àÄ {P : Prim} {p : rep P} {v : Value}
        ‚Üí ‚Ñò {P} p v
        ‚Üí ùïç v (val-const {P} p)
‚Ñòpv‚Üíùïçvp {v = ‚ä•} ‚Ñòpv = tt
‚Ñòpv‚Üíùïçvp {v = const x} ‚Ñòpv = ‚Ñòpv
‚Ñòpv‚Üíùïçvp {base b} {v = v ‚Ü¶ v‚ÇÅ} ()
‚Ñòpv‚Üíùïçvp {b ‚áí p} {v = v ‚Ü¶ v‚ÇÅ} ‚Ñòpv = ‚Ñòpv
‚Ñòpv‚Üíùïçvp {P} {p} {v‚ÇÅ ‚äî v‚ÇÇ} ‚ü® ‚Ñòpv‚ÇÅ , ‚Ñòpv‚ÇÇ ‚ü© =
  ‚ü® ‚Ñòpv‚Üíùïçvp {P}{p}{v‚ÇÅ} ‚Ñòpv‚ÇÅ , ‚Ñòpv‚Üíùïçvp {P}{p}{v‚ÇÇ} ‚Ñòpv‚ÇÇ ‚ü©

ùîº : Value ‚Üí Term ‚Üí ValEnv ‚Üí Set
ùîº v M Œ≥ = Œ£[ c ‚àà Val ] Œ≥ ‚ä¢ M ‚áì c √ó ùïç v c

‚Ñ∞‚Üíùîº : ‚àÄ{Œ≥ : Env}{Œ≥' : ValEnv}{M : Term}{wfM : WF (length Œ≥') M}{v : Value}
    ‚Üí WFEnv Œ≥ ‚Üí wf v
    ‚Üí ùîæ Œ≥ Œ≥' ‚Üí ‚Ñ∞ M Œ≥ v ‚Üí ùîº v M Œ≥'
‚Ñ∞‚Üíùîº {Œ≥} {Œ≥'} { $ P p} {wf} {v} wfŒ≥ wfv ùîæŒ≥Œ≥' ‚Ñ∞MŒ≥v =
   ‚ü® (val-const {P} p) , ‚ü® ‚áì-lit , ‚Ñòpv‚Üíùïçvp {P}{p}{v} ‚Ñ∞MŒ≥v ‚ü© ‚ü©
‚Ñ∞‚Üíùîº {Œ≥} {Œ≥'} {` x} {WF-var x lt} {v} wfŒ≥ wfv ùîæŒ≥Œ≥' ‚Ñ∞MŒ≥v =
   ‚ü® nth Œ≥' x , ‚ü® ‚áì-var , sub-ùïç wfŒ≥ wfv (ùîæ‚Üíùïç _ _ ùîæŒ≥Œ≥' x lt) ‚Ñ∞MŒ≥v ‚ü© ‚ü©
‚Ñ∞‚Üíùîº {Œ≥} {Œ≥'} {∆õ N} {WF-op (WF-cons (WF-bind (WF-ast wfN)) WF-nil)}
   {v} wfŒ≥ wfv ùîæŒ≥Œ≥' ‚Ñ∞MŒ≥v =
   ‚ü® val-clos N Œ≥' , ‚ü® ‚áì-lam {wf = wfN} , G {v} wfv ‚Ñ∞MŒ≥v ‚ü© ‚ü©
   where
   G : ‚àÄ{v} ‚Üí wf v ‚Üí ‚Ñ± (‚Ñ∞ N) Œ≥ v ‚Üí ùïç v (val-clos N Œ≥' {wfN})
   G {‚ä•} wfv ‚Ñ±‚Ñ∞NŒ≥v = tt
   G {const {B} k} wfv ()
   G {v ‚Ü¶ w} (wf-fun wfv wfw) ‚Ñ±‚Ñ∞NŒ≥v {c} vc =
      ‚Ñ∞‚Üíùîº {M = N} {wfN} {w} (Œª {x} ‚Üí WFEnv-extend wfŒ≥ wfv {x}) wfw
          (ùîæ-ext ùîæŒ≥Œ≥' vc) ‚Ñ±‚Ñ∞NŒ≥v
   G {v‚ÇÅ ‚äî v‚ÇÇ} (wf-‚äî _ wfv‚ÇÅ wfv‚ÇÇ) ‚ü® ‚Ñ±‚Ñ∞NŒ≥v‚ÇÅ , ‚Ñ±‚Ñ∞NŒ≥v‚ÇÇ ‚ü© =
      ‚ü® G {v‚ÇÅ} wfv‚ÇÅ ‚Ñ±‚Ñ∞NŒ≥v‚ÇÅ , G {v‚ÇÇ} wfv‚ÇÇ ‚Ñ±‚Ñ∞NŒ≥v‚ÇÇ ‚ü©
‚Ñ∞‚Üíùîº {Œ≥} {Œ≥'} {L ¬∑ M}
    {WF-op (WF-cons (WF-ast wfL) (WF-cons (WF-ast wfM) WF-nil))}
    {v} wfŒ≥ wfv ùîæŒ≥Œ≥'
    ‚ü® v‚ÇÅ , ‚ü® wfv‚ÇÅ , ‚ü® d‚ÇÅ , d‚ÇÇ ‚ü© ‚ü© ‚ü©
    with ‚Ñ∞‚Üíùîº {M = L}{wfL} wfŒ≥ (wf-fun wfv‚ÇÅ wfv) ùîæŒ≥Œ≥' d‚ÇÅ
       | ‚Ñ∞‚Üíùîº {M = M}{wfM} wfŒ≥ wfv‚ÇÅ ùîæŒ≥Œ≥' d‚ÇÇ
... | ‚ü® val-clos L' Œ¥‚ÇÅ {wfL'} , ‚ü® L‚áìL' , ùïçv‚ÇÅ‚Ü¶v ‚ü© ‚ü© | ‚ü® c , ‚ü® M‚áìc , ùïçv‚ÇÅ ‚ü© ‚ü© 
    with ùïçv‚ÇÅ‚Ü¶v {c} ùïçv‚ÇÅ
... | ‚ü® c' , ‚ü® L'‚áìc' , ùïçv ‚ü© ‚ü© =
    ‚ü® c' , ‚ü® (‚áì-app {wf = WF-rel L' wfL'} L‚áìL' M‚áìc L'‚áìc') , ùïçv ‚ü© ‚ü©
‚Ñ∞‚Üíùîº {Œ≥} {Œ≥'} {L ¬∑ M}
    {WF-op (WF-cons (WF-ast wfL) (WF-cons (WF-ast wfM) WF-nil))}
    {v} wfŒ≥ wfv ùîæŒ≥Œ≥'
    ‚ü® v‚ÇÅ , ‚ü® wfv‚ÇÅ , ‚ü® d‚ÇÅ , d‚ÇÇ ‚ü© ‚ü© ‚ü© 
    | ‚ü® val-const {P} f , ‚ü® L‚áìf , ùïçv‚ÇÅ‚Ü¶v ‚ü© ‚ü© | ‚ü® c , ‚ü® M‚áìc , ùïçv‚ÇÅ ‚ü© ‚ü©
    with P
... | base B = ‚ä•-elim ùïçv‚ÇÅ‚Ü¶v
... | B ‚áí P‚Ä≤
    with ùïçv‚ÇÅ‚Ü¶v
... | ‚ü® k , ‚ü® k‚äëv‚ÇÅ , ‚Ñòfkv ‚ü© ‚ü©
    with c
... | bogus = ‚ä•-elim (¬¨ùïç[bogus] v‚ÇÅ ùïçv‚ÇÅ)
... | val-clos N Œ≥‚ÇÅ = ‚ä•-elim (sub-ùïç wfv‚ÇÅ wf-const ùïçv‚ÇÅ k‚äëv‚ÇÅ)
... | val-const {B‚ÇÅ ‚áí P‚ÇÅ} f‚Ä≤ = ‚ä•-elim (sub-ùïç wfv‚ÇÅ wf-const ùïçv‚ÇÅ k‚äëv‚ÇÅ)
... | val-const {base B‚Ä≤} k‚Ä≤
    with base-eq? B‚Ä≤ B | sub-ùïç wfv‚ÇÅ wf-const ùïçv‚ÇÅ k‚äëv‚ÇÅ
... | no neq | ()
... | yes eq | ùïçkc rewrite eq | ùïçkc =
    ‚ü® val-const {P‚Ä≤} (f k) , ‚ü® ‚áì-prim L‚áìf M‚áìc , ‚Ñòpv‚Üíùïçvp {P‚Ä≤}{f k}{v} ‚Ñòfkv ‚ü© ‚ü© 

adequacy : ‚àÄ{M : Term}{N : Term}{wfM : WF 0 M}
         ‚Üí TermValue N
         ‚Üí ‚Ñ∞ M ‚âÉ ‚Ñ∞ N
           ----------------------------------------------------------
         ‚Üí Œ£[ c ‚àà Val ] ‚àÖ' ‚ä¢ M ‚áì c
adequacy{M}{N}{wfM} Nv eq 
    with ‚Ñ∞‚Üíùîº {wfM = wfM}(Œª {x} ‚Üí wf-bot) wf-bot ùîæ-‚àÖ
         (proj‚ÇÇ (eq `‚àÖ ‚ä• (Œª {x} ‚Üí wf-bot) wf-bot) (‚Ñ∞-‚ä• {M = N} Nv))
... | ‚ü® c , ‚ü® M‚áìc , Vc ‚ü© ‚ü© = ‚ü® c , M‚áìc ‚ü©

reduce‚Üí‚áì : ‚àÄ {M : Term} {N : Term}{wfM : WF 0 M}
           ‚Üí TermValue N
           ‚Üí M ‚Äî‚Ü† N
           ‚Üí Œ£[ c ‚àà Val ] ‚àÖ' ‚ä¢ M ‚áì c
reduce‚Üí‚áì {M}{N}{wfM} Nv M‚Äî‚Ü†N = adequacy {M}{N}{wfM} Nv (soundness Nv M‚Äî‚Ü†N)


‚áì‚Üîreduce : ‚àÄ {M : Term}{wfM : WF 0 M}
           ‚Üí (Œ£[ N ‚àà Term ] TermValue N √ó (M ‚Äî‚Ü† N))
             iff
             (Œ£[ c ‚àà Val ] ‚àÖ' ‚ä¢ M ‚áì c)
‚áì‚Üîreduce {M}{wfM} =
    ‚ü® (Œª x ‚Üí reduce‚Üí‚áì {wfM = wfM} (proj‚ÇÅ (proj‚ÇÇ x)) (proj‚ÇÇ (proj‚ÇÇ x))) ,
      (Œª x ‚Üí ‚áì‚Üí‚Äî‚Ü† {wfM = wfM} (proj‚ÇÇ x)) ‚ü©

denot-equal-terminates : ‚àÄ{M N : Term} {C : Ctx}{wfM : WF (ctx-depth C) M}
    {wfN : WF (ctx-depth C) N}{wfC : WF-Ctx 0 C}
  ‚Üí ‚Ñ∞ M ‚âÉ ‚Ñ∞ N  ‚Üí  terminates (plug C M)
    -----------------------------------
  ‚Üí terminates (plug C N)
denot-equal-terminates {M}{N}{C}{wfM}{wfN}{wfC}
    ‚Ñ∞M‚âÉ‚Ñ∞N ‚ü® N‚Ä≤ , ‚ü® Nv , CM‚Äî‚Ü†N‚Ä≤ ‚ü© ‚ü© =
    let ‚Ñ∞CM‚âÉ‚Ñ∞∆õN‚Ä≤ = soundness Nv CM‚Äî‚Ü†N‚Ä≤ in
    let ‚Ñ∞CM‚âÉ‚Ñ∞CN = compositionality{C = C} ‚Ñ∞M‚âÉ‚Ñ∞N in
    let ‚Ñ∞CN‚âÉ‚Ñ∞∆õN‚Ä≤ = ‚âÉ-trans (‚âÉ-sym ‚Ñ∞CM‚âÉ‚Ñ∞CN) ‚Ñ∞CM‚âÉ‚Ñ∞∆õN‚Ä≤ in
    let adeq = adequacy{N = N‚Ä≤}{wfM = WF-plug wfC wfN} Nv ‚Ñ∞CN‚âÉ‚Ñ∞∆õN‚Ä≤ in
      ‚áì‚Üí‚Äî‚Ü† {wfM = WF-plug wfC wfN} (proj‚ÇÇ adeq)


denot-equal-contex-equal : ‚àÄ{M N : Term}
  ‚Üí ‚Ñ∞ M ‚âÉ ‚Ñ∞ N
    ---------
  ‚Üí M ‚âÖ N
denot-equal-contex-equal {M}{N} eq {C}{wfC}{wfM}{wfN} =
   ‚ü® (Œª tm ‚Üí denot-equal-terminates{M = M}{wfM = wfM}{wfN}{wfC} eq tm) ,
     (Œª tn ‚Üí denot-equal-terminates{M = N}{wfM = wfN}{wfM}{wfC} (‚âÉ-sym eq) tn) ‚ü©


