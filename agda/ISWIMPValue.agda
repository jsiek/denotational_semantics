module ISWIMPValue where

open import Primitives
open import Syntax using (Rename)
open import ISWIM hiding (Ctx)
open import AbstractBindingTree Op sig using (Ctx; CHole)
open import WellScoped Op sig using (WF-plug) 
open import Fold2 Op sig
open import ScopedTuple hiding (ùí´)
open import Sig
open import Utilities using (extensionality)
open import SetsAsPredicates
open import PValueCBV
open import PValueCBVProperties Op sig


open import Data.Empty using (‚ä•-elim) renaming (‚ä• to False)
open import Data.List using (List ; _‚à∑_ ; []; _++_; length)
open import Data.List.Properties using (++-conicalÀ°)
open import Data.List.Membership.Propositional renaming (_‚àà_ to _‚ãµ_)
open import Data.List.Membership.Propositional.Properties
  using (‚àà-++‚Å∫À°; ‚àà-++‚Å∫ ≥)
open import Data.List.Relation.Unary.Any using (here; there) 
open import Data.Nat using (‚Ñï; zero; suc; _‚âü_; _<_; s‚â§s)
open import Data.Product using (_√ó_; Œ£; Œ£-syntax; proj‚ÇÅ; proj‚ÇÇ)
    renaming (_,_ to ‚ü®_,_‚ü©)
open import Data.Sum using (_‚äé_; inj‚ÇÅ; inj‚ÇÇ)
open import Data.Unit using (tt) renaming (‚ä§ to True)
open import Level renaming (zero to lzero; suc to lsuc)
open import Relation.Binary.PropositionalEquality
    using (_‚â°_; _‚â¢_; refl; sym; subst)
open import Relation.Nullary using (¬¨_; Dec; yes; no)


{- Denotational Semantics of the ISWIM Language via fold ----------------------}

interp-op  : (op : Op) ‚Üí Tuple (sig op) (ArgTy (ùí´ Value)) ‚Üí ùí´ Value
interp-op lam ‚ü® F , _ ‚ü© = Œõ F
interp-op app ‚ü® D‚ÇÅ , ‚ü® D‚ÇÇ , _ ‚ü© ‚ü© = D‚ÇÅ ‚ñ™ D‚ÇÇ
interp-op (lit P k) _ = ‚Ñò P k

{- interp-op is monotonic -}
mono-op : {op : Op} {xs ys : Tuple (sig op) (ArgTy (ùí´ Value))}
   ‚Üí ‚äÜ-args (sig op) xs ys ‚Üí interp-op op xs ‚äÜ interp-op op ys
mono-op {lam} {‚ü® f , _ ‚ü© } {‚ü® g , _ ‚ü©} ‚ü® f‚äÜg , _ ‚ü© =
    Œõ-ext-‚äÜ (Œª {X} ‚Üí lower (f‚äÜg X))
mono-op {app} {‚ü® a , ‚ü® b , _ ‚ü© ‚ü©} {‚ü® c , ‚ü® d , _ ‚ü© ‚ü©} ‚ü® a<c , ‚ü® b<d , _ ‚ü© ‚ü© =
    ‚ñ™-cong-‚äÜ (lower a<c) (lower b<d)
mono-op {lit P k} {xs} {ys} xs‚äÜys d d‚ààk = d‚ààk

instance
  ISWIM-Semantics : Semantics
  ISWIM-Semantics = record { interp-op = interp-op ; mono-op = mono-op }

open Semantics {{...}}

‚ü¶‚üß-app : ‚àÄ{L M : Term}{œÅ : Env}
  ‚Üí ‚ü¶ L ¬∑ M ‚üß œÅ ‚â° ‚ü¶ L ‚üß œÅ ‚ñ™ ‚ü¶ M ‚üß œÅ
‚ü¶‚üß-app = refl

‚ü¶‚üß-lam : ‚àÄ{N : Term}{œÅ : Env}
  ‚Üí ‚ü¶ ∆õ N ‚üß œÅ ‚â° Œõ (Œª D ‚Üí ‚ü¶ N ‚üß (D ‚Ä¢ œÅ))
‚ü¶‚üß-lam = refl

‚ü¶‚üß-prim : ‚àÄ{P : Prim}{k : rep P}{œÅ : Env}
  ‚Üí ‚ü¶ $ P k ‚üß œÅ ‚â° ‚Ñò P k
‚ü¶‚üß-prim = refl

continuous-op : ‚àÄ{op}{œÅ}{NE-œÅ}{v}{args}
   ‚Üí v ‚àà ‚ü¶ op ‚¶Ö args ‚¶Ü ‚üß œÅ
   ‚Üí pred-args (Cont-Env-Arg œÅ NE-œÅ) (sig op) args
   ‚Üí Œ£[ œÅ‚Ä≤ ‚àà Env ] fin-env œÅ‚Ä≤ √ó œÅ‚Ä≤ ‚äÜ‚Çë œÅ √ó v ‚àà (‚ü¶ op ‚¶Ö args ‚¶Ü ‚üß œÅ‚Ä≤)
continuous-op {lam} {œÅ} {NE-œÅ} {V ‚Ü¶ w} {cons (bind (ast N)) nil}
    ‚ü® w‚àà‚ü¶N‚üßV‚Ä¢œÅ , V‚â¢[] ‚ü©
    ‚ü® IH-N , _ ‚ü©
    with IH-N V V‚â¢[] w w‚àà‚ü¶N‚üßV‚Ä¢œÅ
... | ‚ü® œÅ‚Ä≤ , ‚ü® fœÅ‚Ä≤ , ‚ü® œÅ‚Ä≤‚äÜV‚Ä¢œÅ , w‚àà‚ü¶N‚üßœÅ‚Ä≤ ‚ü© ‚ü© ‚ü© =
    ‚ü® (Œª x ‚Üí œÅ‚Ä≤ (suc x)) , ‚ü® (Œª x ‚Üí fœÅ‚Ä≤ (suc x)) , ‚ü® (Œª x ‚Üí œÅ‚Ä≤‚äÜV‚Ä¢œÅ (suc x)) ,
    ‚ü® ‚ü¶‚üß-monotone{œÅ‚Ä≤}{mem V ‚Ä¢ (Œª z ‚Üí œÅ‚Ä≤ (suc z))} N G w w‚àà‚ü¶N‚üßœÅ‚Ä≤ , V‚â¢[] ‚ü© ‚ü© ‚ü© ‚ü©
    where G : (x : Var) ‚Üí œÅ‚Ä≤ x ‚äÜ (mem V ‚Ä¢ (Œª x‚ÇÅ ‚Üí œÅ‚Ä≤ (suc x‚ÇÅ))) x
          G zero v v‚ààœÅ‚Ä≤x = œÅ‚Ä≤‚äÜV‚Ä¢œÅ 0 v v‚ààœÅ‚Ä≤x
          G (suc x) v v‚ààœÅ‚Ä≤x = v‚ààœÅ‚Ä≤x
continuous-op {lam} {œÅ} {NE-œÅ} {ŒΩ} {cons (bind (ast N)) nil} v‚àà IHs =
    ‚ü® initial-fin-env œÅ NE-œÅ , ‚ü® initial-fin œÅ NE-œÅ , ‚ü® initial-fin-‚äÜ œÅ NE-œÅ ,
      tt ‚ü© ‚ü© ‚ü©
continuous-op {app} {œÅ} {NE-œÅ} {w} {cons (ast L) (cons (ast M) nil)}
    w‚àà‚ü¶L¬∑M‚üßœÅ ‚ü® IH-L , ‚ü® IH-M , _ ‚ü© ‚ü© =
    ‚ñ™-continuous {NE-œÅ = NE-œÅ} w‚àà‚ü¶L¬∑M‚üßœÅ IH-L IH-M
        (‚ü¶‚üß-monotone L) (‚ü¶‚üß-monotone M) (‚ü¶‚üß-continuous-‚äÜ {œÅ}{NE-œÅ} M)
continuous-op {lit p x} {œÅ} {NE-œÅ} {v} {args} IHs = {!!}


instance
  ISWIM-Continuous : ContinuousSemantics
  ISWIM-Continuous = record { continuous-op = {!!} }
