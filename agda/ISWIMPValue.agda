module ISWIMPValue where

open import Primitives
open import Syntax using (Rename)
open import ISWIM hiding (Ctx)
open ISWIM.ASTMod using (WF-rel; len-mk-list)
open import AbstractBindingTree Op sig using (Ctx; CHole)
open import WellScoped Op sig using (WF-plug) 
open import Fold2 Op sig
open import ScopedTuple hiding (ùí´)
open import Sig
open import Utilities using (extensionality)
open import SetsAsPredicates
open import PValueCBV
open import SemanticProperties Op sig

open import Data.Empty using (‚ä•-elim) renaming (‚ä• to False)
open import Data.List using (List ; _‚à∑_ ; []; _++_; length)
open import Data.List.Properties using (++-conicalÀ°)
open import Data.List.Membership.Propositional renaming (_‚àà_ to _‚ãµ_)
open import Data.List.Membership.Propositional.Properties
  using (‚àà-++‚Å∫À°; ‚àà-++‚Å∫ ≥)
open import Data.List.Relation.Unary.Any using (here; there) 
open import Data.Nat using (‚Ñï; zero; suc; _‚âü_; _<_; s‚â§s)
open import Data.Product using (_√ó_; Œ£; Œ£-syntax; proj‚ÇÅ; proj‚ÇÇ)
    renaming (_,_ to ‚ü®_,_‚ü©)
open import Data.Sum using (_‚äé_; inj‚ÇÅ; inj‚ÇÇ)
open import Data.Unit using (tt) renaming (‚ä§ to True)
open import Level renaming (zero to lzero; suc to lsuc)
open import Relation.Binary.PropositionalEquality
    using (_‚â°_; _‚â¢_; refl; sym; subst)
open import Relation.Nullary using (¬¨_; Dec; yes; no)


{- Denotational Semantics of the ISWIM Language via fold ----------------------}

interp-op  : (op : Op) ‚Üí Tuple (sig op) (ArgTy (ùí´ Value)) ‚Üí ùí´ Value
interp-op lam ‚ü® F , _ ‚ü© = Œõ F
interp-op app ‚ü® D‚ÇÅ , ‚ü® D‚ÇÇ , _ ‚ü© ‚ü© = D‚ÇÅ ‚ñ™ D‚ÇÇ
interp-op (lit P k) _ = ‚Ñò P k

{- interp-op is monotonic -}
mono-op : {op : Op} {xs ys : Tuple (sig op) (ArgTy (ùí´ Value))}
   ‚Üí ‚äÜ-args (sig op) xs ys ‚Üí interp-op op xs ‚äÜ interp-op op ys
mono-op {lam} {‚ü® f , _ ‚ü© } {‚ü® g , _ ‚ü©} ‚ü® f‚äÜg , _ ‚ü© =
    Œõ-ext-‚äÜ (Œª {X} ‚Üí lower (f‚äÜg X))
mono-op {app} {‚ü® a , ‚ü® b , _ ‚ü© ‚ü©} {‚ü® c , ‚ü® d , _ ‚ü© ‚ü©} ‚ü® a<c , ‚ü® b<d , _ ‚ü© ‚ü© =
    ‚ñ™-cong-‚äÜ (lower a<c) (lower b<d)
mono-op {lit P k} {xs} {ys} xs‚äÜys d d‚ààk = d‚ààk

instance
  ISWIM-Semantics : Semantics
  ISWIM-Semantics = record { interp-op = interp-op ; mono-op = mono-op }
open Semantics {{...}}

‚ü¶‚üß-app : ‚àÄ{L M : Term}{œÅ : Env}
  ‚Üí ‚ü¶ L ¬∑ M ‚üß œÅ ‚â° ‚ü¶ L ‚üß œÅ ‚ñ™ ‚ü¶ M ‚üß œÅ
‚ü¶‚üß-app = refl

‚ü¶‚üß-lam : ‚àÄ{N : Term}{œÅ : Env}
  ‚Üí ‚ü¶ ∆õ N ‚üß œÅ ‚â° Œõ (Œª D ‚Üí ‚ü¶ N ‚üß (D ‚Ä¢ œÅ))
‚ü¶‚üß-lam = refl

‚ü¶‚üß-prim : ‚àÄ{P : Prim}{k : rep P}{œÅ : Env}
  ‚Üí ‚ü¶ $ P k ‚üß œÅ ‚â° ‚Ñò P k
‚ü¶‚üß-prim = refl

{- interp-op is continuous -}
continuous-op : ‚àÄ{op}{œÅ}{NE-œÅ}{v}{args}
   ‚Üí v ‚àà ‚ü¶ op ‚¶Ö args ‚¶Ü ‚üß œÅ
   ‚Üí pred-args (Cont-Env-Arg œÅ NE-œÅ) (sig op) args
   ‚Üí Œ£[ œÅ‚Ä≤ ‚àà Env ] finite-env œÅ‚Ä≤ √ó œÅ‚Ä≤ ‚äÜ‚Çë œÅ √ó v ‚àà (‚ü¶ op ‚¶Ö args ‚¶Ü ‚üß œÅ‚Ä≤)
continuous-op {lam} {œÅ} {NE-œÅ} {v} {cons (bind (ast N)) nil}
    v‚ààŒõ ‚ü® IH-N , _ ‚ü© =
    Œõ-continuous {NE-œÅ = NE-œÅ} v‚ààŒõ IH-N (‚ü¶‚üß-monotone N)
continuous-op {app} {œÅ} {NE-œÅ} {w} {cons (ast L) (cons (ast M) nil)}
    w‚àà‚ü¶L¬∑M‚üßœÅ ‚ü® IH-L , ‚ü® IH-M , _ ‚ü© ‚ü© =
    ‚ñ™-continuous{NE-œÅ = NE-œÅ} w‚àà‚ü¶L¬∑M‚üßœÅ IH-L IH-M (‚ü¶‚üß-monotone L) (‚ü¶‚üß-monotone M)
continuous-op {lit p x} {œÅ} {NE-œÅ} {v} {nil} v‚àà‚ü¶M‚üßœÅ _ =
  ‚ü® initial-finite-env œÅ NE-œÅ , ‚ü® initial-fin œÅ NE-œÅ , ‚ü® initial-fin-‚äÜ œÅ NE-œÅ ,
    v‚àà‚ü¶M‚üßœÅ ‚ü© ‚ü© ‚ü©

instance
  ISWIM-Continuous : ContinuousSemantics
  ISWIM-Continuous = record { continuous-op =
      Œª{op}{œÅ}{NE-œÅ} ‚Üí continuous-op{op}{œÅ}{NE-œÅ} }
open ContinuousSemantics {{...}}

{- Syntactic values terminate (i.e., have nonempty denotations) ---------------}

value-nonempty : ‚àÄ{V : Term}{œÅ}
  ‚Üí nonempty-env œÅ ‚Üí TermValue V ‚Üí nonempty (‚ü¶ V ‚üß œÅ)
value-nonempty NE-œÅ (V-var {x}) = NE-œÅ x
value-nonempty NE-œÅ (V-∆õ) = ‚ü® ŒΩ , tt ‚ü©
value-nonempty NE-œÅ (V-lit {base B} {k}) = ‚ü® const k , k‚àà‚Ñòk ‚ü©
value-nonempty NE-œÅ (V-lit {B ‚áí P} {k}) = ‚ü® ŒΩ , tt ‚ü©

{- Substitution Lemma (via fold-subst-fusion) ---------------------------------}

‚ü¶‚üß-par-subst : ‚àÄ {M : Term}{œÉ : Subst}{œÅ : Var ‚Üí ùí´ Value}
  ‚Üí ‚ü¶ ‚ü™ œÉ ‚ü´ M ‚üß œÅ ‚â° ‚ü¶ M ‚üß (Œª x ‚Üí ‚ü¶ œÉ x ‚üß œÅ)
‚ü¶‚üß-par-subst {M}{œÅ} = fold-subst-fusion M

‚ü¶‚üß-subst : ‚àÄ {M N : Term}{œÅ : Var ‚Üí ùí´ Value}
  ‚Üí ‚ü¶ M [ N ] ‚üß œÅ ‚â° ‚ü¶ M ‚üß ((‚ü¶ N ‚üß œÅ) ‚Ä¢ œÅ)
‚ü¶‚üß-subst {M}{N}{œÅ} =
  subst (Œª X ‚Üí ‚ü¶ M [ N ] ‚üß œÅ ‚â° ‚ü¶ M ‚üß X) (extensionality EQ)
        (‚ü¶‚üß-par-subst {M}{N ‚Ä¢ id})
  where 
  EQ : (x : Var) ‚Üí ‚ü¶ (N ‚Ä¢ id) x ‚üß œÅ ‚â° (‚ü¶ N ‚üß œÅ ‚Ä¢ œÅ) x
  EQ zero = refl
  EQ (suc x) = refl

{- Soundness of Reduction with respect to Denotations -------------------------}

‚ü¶‚üß‚Äî‚Üí : ‚àÄ{M N : Term}{œÅ : Var ‚Üí ùí´ Value} {NE-œÅ : nonempty-env œÅ}
   ‚Üí M ‚Äî‚Üí N
   ‚Üí ‚ü¶ M ‚üß œÅ ‚âÉ ‚ü¶ N ‚üß œÅ
‚ü¶‚üß‚Äî‚Üí {L ¬∑ M} {L‚Ä≤ ¬∑ M} {œÅ}{NE-œÅ} (Œæ‚ÇÅ-rule L‚Äî‚ÜíL‚Ä≤) =
    let IH = ‚ü¶‚üß‚Äî‚Üí{œÅ = œÅ}{NE-œÅ} L‚Äî‚ÜíL‚Ä≤ in
    ‚ü¶ L ¬∑ M ‚üß œÅ              ‚âÉ‚ü®‚ü©
    (‚ü¶ L ‚üß œÅ) ‚ñ™ (‚ü¶ M ‚üß œÅ)    ‚âÉ‚ü® ‚ñ™-cong IH ‚âÉ-refl ‚ü©
    (‚ü¶ L‚Ä≤ ‚üß œÅ) ‚ñ™ (‚ü¶ M ‚üß œÅ)   ‚âÉ‚ü®‚ü©
    ‚ü¶ L‚Ä≤ ¬∑ M ‚üß œÅ             ‚àé where open ‚âÉ-Reasoning  
‚ü¶‚üß‚Äî‚Üí {V ¬∑ M} {.(_ ¬∑ _)} {œÅ}{NE-œÅ} (Œæ‚ÇÇ-rule {M‚Ä≤ = M‚Ä≤} v M‚Äî‚ÜíM‚Ä≤) =
    let IH = ‚ü¶‚üß‚Äî‚Üí{œÅ = œÅ}{NE-œÅ} M‚Äî‚ÜíM‚Ä≤ in
    ‚ü¶ V ¬∑ M ‚üß œÅ              ‚âÉ‚ü®‚ü©
    (‚ü¶ V ‚üß œÅ) ‚ñ™ (‚ü¶ M ‚üß œÅ)    ‚âÉ‚ü® ‚ñ™-cong (‚âÉ-refl{D = ‚ü¶ V ‚üß œÅ}) IH ‚ü©
    (‚ü¶ V ‚üß œÅ) ‚ñ™ (‚ü¶ M‚Ä≤ ‚üß œÅ)   ‚âÉ‚ü®‚ü©
    ‚ü¶ V ¬∑ M‚Ä≤ ‚üß œÅ             ‚àé where open ‚âÉ-Reasoning  
‚ü¶‚üß‚Äî‚Üí {∆õ N ¬∑ V} {_} {œÅ} {NE-œÅ} (Œ≤-rule v) =
    ‚ü¶ ∆õ N ¬∑ V ‚üß œÅ                           ‚âÉ‚ü®‚ü©
    (Œõ (Œª D ‚Üí ‚ü¶ N ‚üß (D ‚Ä¢ œÅ))) ‚ñ™ (‚ü¶ V ‚üß œÅ)   ‚âÉ‚ü® Œõ‚ü¶‚üß-‚ñ™-id {N}{œÅ}{NE-œÅ}
                                                   (value-nonempty NE-œÅ v) ‚ü©
    ‚ü¶ N ‚üß (‚ü¶ V ‚üß œÅ ‚Ä¢ œÅ)               ‚âÉ‚ü® ‚âÉ-reflexive (sym (‚ü¶‚üß-subst{N}{V}{œÅ})) ‚ü©
    ‚ü¶ N [ V ] ‚üß œÅ                     ‚àé where open ‚âÉ-Reasoning
‚ü¶‚üß‚Äî‚Üí {($ (B ‚áí P) f ¬∑ $ (base B) k)} {_} {œÅ} Œ¥-rule =
    ‚ü¶ $ (B ‚áí P) f ¬∑ $ (base B) k ‚üß œÅ        ‚âÉ‚ü®‚ü©
    (‚Ñò (B ‚áí P) f) ‚ñ™ (‚Ñò (base B) k)         ‚âÉ‚ü® ‚Ñò-‚ñ™-‚âÉ {B}{P} ‚ü©
    ‚ü¶ $ P (f k) ‚üß œÅ                         ‚àé where open ‚âÉ-Reasoning

soundness : ‚àÄ {M N : Term} {œÅ : Env}{NE-œÅ : nonempty-env œÅ}
  ‚Üí M ‚Äî‚Ü† N
    -------------------
  ‚Üí ‚ü¶ M ‚üß œÅ ‚âÉ ‚ü¶ N ‚üß œÅ
soundness {M}{_}{œÅ} (M ‚ñ°) =
    ‚ü¶ M ‚üß œÅ ‚âÉ‚ü®‚ü© ‚ü¶ M ‚üß œÅ ‚àé where open ‚âÉ-Reasoning
soundness {M}{N}{œÅ}{NE-œÅ} (_‚Äî‚Üí‚ü®_‚ü©_ M {M = M‚Ä≤} M‚Äî‚ÜíM‚Ä≤ M‚Ä≤‚Äî‚Ü†N) =
    ‚ü¶ M ‚üß œÅ      ‚âÉ‚ü® ‚ü¶‚üß‚Äî‚Üí{œÅ = œÅ}{NE-œÅ} M‚Äî‚ÜíM‚Ä≤ ‚ü© 
    ‚ü¶ M‚Ä≤ ‚üß œÅ     ‚âÉ‚ü® soundness{œÅ = œÅ}{NE-œÅ} M‚Ä≤‚Äî‚Ü†N ‚ü© 
    ‚ü¶ N ‚üß œÅ      ‚àé where open ‚âÉ-Reasoning

{- Adequacy of Denotations ----------------------------------------------------}

open import EvalISWIM {- the big-step semantics of ISWIM -}

{- Relate denotational values to big-step values -}
ùïç : Value ‚Üí Val ‚Üí Set
ùïçs : List Value ‚Üí Val ‚Üí Set

ùïç (const {B} k) (val-const {P} p) = ‚Ñò P p (const {B} k)
ùïç (const {B} k) (val-clos N Œ≥) = False
ùïç (const {B} k) bogus = False
ùïç (V ‚Ü¶ w) (val-const {P} f) = ‚Ñò P f (V ‚Ü¶ w)
ùïç (V ‚Ü¶ w) (val-clos N Œ≥) =
    (‚àÄ{c : Val} ‚Üí ùïçs V c ‚Üí Œ£[ c' ‚àà Val ] (Œ≥ ,' c) ‚ä¢ N ‚áì c'  √ó  ùïç w c')
ùïç (V ‚Ü¶ w) bogus = False
ùïç ŒΩ (val-const {base B} k) = False
ùïç ŒΩ (val-const {B ‚áí P} f) = True
ùïç ŒΩ (val-clos N Œ≥) = True
ùïç ŒΩ bogus = False

ùïçs [] c = True
ùïçs (v ‚à∑ V) c = ùïç v c √ó ùïçs V c

ùïçkc‚áíc‚â°k : ‚àÄ{B}{k}{c} ‚Üí ùïç (const {B} k) c  ‚Üí  c ‚â° val-const {base B} k
ùïçkc‚áíc‚â°k {B} {k} {val-const {P} k‚Ä≤} ùïçkc
    with k‚Ä≤‚àà‚Ñòk‚áíP‚â°B {P}{B} ùïçkc
... | refl
    with k‚Ä≤‚àà‚Ñòk‚áík‚Ä≤‚â°k ùïçkc
... | refl = refl

‚Ñò‚áíùïç : ‚àÄ{P}{k}{w}  ‚Üí ‚Ñò P k w  ‚Üí  ùïç w (val-const {P} k)
‚Ñò‚áíùïç {P} {k} {const x} w‚ààk = w‚ààk
‚Ñò‚áíùïç {P} {k} {x ‚Ü¶ w} w‚ààk = w‚ààk
‚Ñò‚áíùïç {B ‚áí P} {k} {ŒΩ} w‚ààk = tt

V‚äÜùïçc‚áíùïçsV : ‚àÄ{V}{c} ‚Üí (‚àÄ u ‚Üí mem V u ‚Üí ùïç u c) ‚Üí ùïçs V c
V‚äÜùïçc‚áíùïçsV {[]} V‚äÜùïçc = tt
V‚äÜùïçc‚áíùïçsV {v ‚à∑ V} V‚äÜùïçc =
    ‚ü® V‚äÜùïçc v (here refl) , V‚äÜùïçc‚áíùïçsV (Œª u z ‚Üí V‚äÜùïçc u (there z)) ‚ü©

ùïçsV‚áíV‚äÜùïçc : ‚àÄ{V}{c} ‚Üí ùïçs V c ‚Üí (‚àÄ u ‚Üí mem V u ‚Üí ùïç u c)
ùïçsV‚áíV‚äÜùïçc {[]} {c} vs u ()
ùïçsV‚áíV‚äÜùïçc {x ‚à∑ V} {c} ‚ü® ùïçc , ùïçsc ‚ü© .x (here refl) = ùïçc
ùïçsV‚áíV‚äÜùïçc {x ‚à∑ V} {c} ‚ü® ùïçc , ùïçsc ‚ü© u (there u‚ààV) = ùïçsV‚áíV‚äÜùïçc ùïçsc u u‚ààV

{- Relate denotational environments to big-step environments -}
data ùîæ : Env ‚Üí ValEnv ‚Üí Set‚ÇÅ where
  ùîæ-‚àÖ : ‚àÄ {œÅ} ‚Üí ùîæ œÅ ‚àÖ'
  ùîæ-ext : ‚àÄ{Œ≥ : Env}{Œ≥' : ValEnv}{D c} ‚Üí ùîæ Œ≥ Œ≥' ‚Üí (‚àÄ v ‚Üí v ‚àà D ‚Üí ùïç v c)
     ‚Üí ùîæ (D ‚Ä¢ Œ≥) (Œ≥' ,' c)

ùîæ‚áíùïç : ‚àÄ {œÅ : Env}{Œ≥ : ValEnv}{x}{lt : x < length Œ≥}{v}
   ‚Üí ùîæ œÅ Œ≥  ‚Üí  v ‚àà œÅ x  ‚Üí  ùïç v (nth Œ≥ x)
ùîæ‚áíùïç {.(_ ‚Ä¢ _)} {.(_ ‚à∑ _)} {zero} {s‚â§s lt} {v} (ùîæ-ext ùîæœÅŒ≥ D‚äÜV) v‚ààD = D‚äÜV v v‚ààD
ùîæ‚áíùïç {.(_ ‚Ä¢ _)} {.(_ ‚à∑ _)} {suc x} {s‚â§s lt} {v} (ùîæ-ext ùîæœÅŒ≥ D‚äÜV) v‚ààœÅx =
  ùîæ‚áíùïç{lt = lt} ùîæœÅŒ≥ v‚ààœÅx

¬¨ùïç[bogus] : ‚àÄ v ‚Üí ¬¨ ùïç v bogus
¬¨ùïç[bogus] (const k) x = x
¬¨ùïç[bogus] (V ‚Ü¶ w) x = x

‚Ñòpv‚áíùïçvp : ‚àÄ {P}{p}{v} ‚Üí  ‚Ñò P p v  ‚Üí  ùïç v (val-const {P} p)
‚Ñòpv‚áíùïçvp {v = const k} ‚Ñòpv = ‚Ñòpv
‚Ñòpv‚áíùïçvp {v = V ‚Ü¶ w} ‚Ñòpv = ‚Ñòpv
‚Ñòpv‚áíùïçvp {B ‚áí P} {p} {ŒΩ} ‚Ñòpv = tt

{- the main lemma -}
‚ü¶‚üß‚áí‚áì : ‚àÄ{M : Term}{Œ≥}{wfM : WF (length Œ≥) M}{œÅ}{v}
   ‚Üí ùîæ œÅ Œ≥  ‚Üí  v ‚àà ‚ü¶ M ‚üß œÅ
   ‚Üí Œ£[ c ‚àà Val ] Œ≥ ‚ä¢ M ‚áì c  √ó  (‚àÄ u ‚Üí u ‚àà ‚ü¶ M ‚üß œÅ ‚Üí ùïç u c)
‚ü¶‚üß‚áí‚áì {` x}{Œ≥}{WF-var ‚àãx lt}{œÅ}{v} ùîæœÅŒ≥ v‚àà‚ü¶M‚üßœÅ =
    let lt' = subst (Œª ‚ñ° ‚Üí x < ‚ñ°) (len-mk-list (length Œ≥)) lt in
   ‚ü® nth Œ≥ x , ‚ü® ‚áì-var , (Œª v v‚ààœÅx ‚Üí ùîæ‚áíùïç{lt = lt'} ùîæœÅŒ≥ v‚ààœÅx) ‚ü© ‚ü©
‚ü¶‚üß‚áí‚áì {L ¬∑ M}{Œ≥}
    {WF-op (WF-cons (WF-ast wfL) (WF-cons (WF-ast wfM) WF-nil)) _}
    {œÅ}{w} ùîæœÅŒ≥ w‚ààLMœÅ = G
    where
    Part1 : ‚àÄ{L}{M}{œÅ}{w}{wfL : WF (length Œ≥) L}{wfM : WF (length Œ≥) M}
      ‚Üí ùîæ œÅ Œ≥  ‚Üí  w ‚àà ‚ü¶ L ¬∑ M ‚üß œÅ
      ‚Üí Œ£[ c ‚àà Val ] Œ≥ ‚ä¢ L ¬∑ M ‚áì c √ó ùïç w c
    Part2 : ‚àÄ{c‚ÇÅ c‚ÇÇ}{L M}{Œ≥}{V w}
       ‚Üí Œ≥ ‚ä¢ L ‚áì c‚ÇÅ  ‚Üí  ùïç (V ‚Ü¶ w) c‚ÇÅ
       ‚Üí Œ≥ ‚ä¢ M ‚áì c‚ÇÇ  ‚Üí  ùïçs V c‚ÇÇ
       ‚Üí Œ£[ c ‚àà Val ] Œ≥ ‚ä¢ L ¬∑ M ‚áì c √ó ùïç w c
       
    Part1 {L}{M}{œÅ}{w}{wfL}{wfM} ùîæœÅŒ≥ ‚ü® V , ‚ü® V‚Ü¶w‚àà‚ü¶L‚üßœÅ , ‚ü® V‚äÜ‚ü¶M‚üßœÅ , V‚â¢[] ‚ü© ‚ü© ‚ü© 
        with V
    ... | [] = ‚ä•-elim (V‚â¢[] refl)    
    ... | v ‚à∑ V‚Ä≤
        with ‚ü¶‚üß‚áí‚áì {L}{Œ≥}{wfL}{œÅ}{(v ‚à∑ V‚Ä≤) ‚Ü¶ w} ùîæœÅŒ≥ V‚Ü¶w‚àà‚ü¶L‚üßœÅ
    ... | ‚ü® c‚ÇÅ , ‚ü® L‚áìc‚ÇÅ , ‚ü¶L‚üß‚äÜùïçc‚ÇÅ ‚ü© ‚ü© 
        with ‚ü¶‚üß‚áí‚áì {M}{Œ≥}{wfM}{œÅ}{v} ùîæœÅŒ≥ (V‚äÜ‚ü¶M‚üßœÅ v (here refl))
    ... | ‚ü® c‚ÇÇ , ‚ü® M‚áìc‚ÇÇ , ‚ü¶M‚üß‚äÜùïçc‚ÇÇ ‚ü© ‚ü© =
        Part2 L‚áìc‚ÇÅ ùïçVwc‚ÇÅ M‚áìc‚ÇÇ ùïçsc‚ÇÇ
        where
        ùïçVwc‚ÇÅ : ùïç ((v ‚à∑ V‚Ä≤) ‚Ü¶ w) c‚ÇÅ
        ùïçVwc‚ÇÅ = ‚ü¶L‚üß‚äÜùïçc‚ÇÅ ((v ‚à∑ V‚Ä≤) ‚Ü¶ w) V‚Ü¶w‚àà‚ü¶L‚üßœÅ
        ùïçsc‚ÇÇ : ùïçs (v ‚à∑ V‚Ä≤) c‚ÇÇ
        ùïçsc‚ÇÇ = ‚ü® (‚ü¶M‚üß‚äÜùïçc‚ÇÇ v (V‚äÜ‚ü¶M‚üßœÅ v (here refl))) ,
                 (V‚äÜùïçc‚áíùïçsV (Œª u u‚ààV‚Ä≤ ‚Üí ‚ü¶M‚üß‚äÜùïçc‚ÇÇ u (V‚äÜ‚ü¶M‚üßœÅ u (there u‚ààV‚Ä≤)) )) ‚ü©
    Part2 {val-const {B ‚áí P} f}{c‚ÇÇ}{L}{M}{Œ≥}{V}{w}
        L‚áìc‚ÇÅ ‚ü® k , ‚ü® refl , w‚ààfk ‚ü© ‚ü© M‚áì ‚ü® ùïçkc‚ÇÇ , _ ‚ü© 
           rewrite ùïçkc‚áíc‚â°k {B}{k}{c‚ÇÇ} ùïçkc‚ÇÇ =
       ‚ü® (val-const {P} (f k)) , ‚ü® (‚áì-prim L‚áìc‚ÇÅ M‚áì) , ‚Ñò‚áíùïç {P} w‚ààfk ‚ü© ‚ü©
    Part2 {val-clos N Œ≥‚Ä≤{wfN}}{c‚ÇÇ}{L}{M}{Œ≥}{V}{w} L‚áìc‚ÇÅ ùïçVwc‚ÇÅ M‚áì ùïçsVc‚ÇÇ
       with ùïçVwc‚ÇÅ {c‚ÇÇ} ùïçsVc‚ÇÇ
    ... | ‚ü® c‚ÇÉ , ‚ü® N‚áìc‚ÇÉ , ùïçwc‚ÇÉ ‚ü© ‚ü© =
        ‚ü® c‚ÇÉ , ‚ü® (‚áì-app{wf = WF-rel N wfN} L‚áìc‚ÇÅ M‚áì N‚áìc‚ÇÉ) , ùïçwc‚ÇÉ ‚ü© ‚ü©
          
    G : Œ£[ c ‚àà Val ] Œ≥ ‚ä¢ L ¬∑ M ‚áì c  √ó  (‚àÄ u ‚Üí u ‚àà ‚ü¶ L ¬∑ M ‚üß œÅ ‚Üí ùïç u c)
    G   with Part1{L}{M}{wfL = wfL}{wfM} ùîæœÅŒ≥ w‚ààLMœÅ
    ... | ‚ü® c , ‚ü® LM‚áìc , ùïçwc ‚ü© ‚ü© = ‚ü® c , ‚ü® LM‚áìc , H ‚ü© ‚ü©
        where
        H : ‚àÄ u ‚Üí u ‚àà ‚ü¶ L ¬∑ M ‚üß œÅ ‚Üí ùïç u c
        H u u‚ààLM
            with Part1{L}{M}{wfL = wfL}{wfM} ùîæœÅŒ≥ u‚ààLM
        ... | ‚ü® c‚Ä≤ , ‚ü® LM‚áìc‚Ä≤ , ùïçwc‚Ä≤ ‚ü© ‚ü© rewrite ‚áì-determ LM‚áìc‚Ä≤ LM‚áìc = ùïçwc‚Ä≤
‚ü¶‚üß‚áí‚áì {∆õ N}{Œ≥}{WF-op (WF-cons (WF-bind (WF-ast wfN)) WF-nil) _}{œÅ}{v}
    ùîæœÅŒ≥ v‚àà‚ü¶M‚üßœÅ =
    ‚ü® (val-clos N Œ≥ {wfN}) , ‚ü® ‚áì-lam {wf = wfN} , G ‚ü© ‚ü©
    where
    G : (u : Value) ‚Üí u ‚àà ‚ü¶ ∆õ N ‚üß œÅ ‚Üí ùïç u (val-clos N Œ≥ {wfN})
    G ŒΩ u‚àà∆õN = tt
    G (V ‚Ü¶ w) ‚ü® w‚àà‚ü¶N‚üß[V‚Ä¢œÅ] , V‚â†[] ‚ü© {c} ùïçsVc
        with ‚ü¶‚üß‚áí‚áì {N}{c ‚à∑ Œ≥}{wfN}{mem V ‚Ä¢ œÅ}{w}
                   (ùîæ-ext{c = c} ùîæœÅŒ≥ (ùïçsV‚áíV‚äÜùïçc ùïçsVc)) w‚àà‚ü¶N‚üß[V‚Ä¢œÅ]
    ... | ‚ü® c‚Ä≤ , ‚ü® N‚áìc‚Ä≤ , ‚ü¶N‚üß‚äÜùïçc‚Ä≤ ‚ü© ‚ü© =
          ‚ü® c‚Ä≤ , ‚ü® N‚áìc‚Ä≤ , ‚ü¶N‚üß‚äÜùïçc‚Ä≤ w w‚àà‚ü¶N‚üß[V‚Ä¢œÅ] ‚ü© ‚ü©
‚ü¶‚üß‚áí‚áì {$ P k}{Œ≥}{wfPk}{œÅ}{v} ùîæœÅŒ≥ v‚àà‚ü¶M‚üßœÅ =
    ‚ü® val-const {P} k , ‚ü® ‚áì-lit , (Œª u ‚Ñòpu ‚Üí ‚Ñòpv‚áíùïçvp {P} ‚Ñòpu) ‚ü© ‚ü©

adequacy : ‚àÄ{M V : Term}{wfM : WF 0 M}{œÅ}{NE-œÅ : nonempty-env œÅ}
   ‚Üí TermValue V  ‚Üí  ‚ü¶ M ‚üß œÅ ‚âÉ ‚ü¶ V ‚üß œÅ
    ----------------------------------
   ‚Üí Œ£[ c ‚àà Val ] ‚àÖ' ‚ä¢ M ‚áì c
adequacy{M}{V}{wfM}{œÅ}{NE-œÅ} Vval ‚ü¶M‚üß‚âÉ‚ü¶V‚üß
    with value-nonempty{V}{œÅ} NE-œÅ Vval
... | ‚ü® v , v‚àà‚ü¶V‚üß ‚ü©
    with ‚ü¶‚üß‚áí‚áì {wfM = wfM} ùîæ-‚àÖ (proj‚ÇÇ ‚ü¶M‚üß‚âÉ‚ü¶V‚üß v v‚àà‚ü¶V‚üß)
... | ‚ü® c , ‚ü® M‚áìc , _ ‚ü© ‚ü© =
    ‚ü® c , M‚áìc ‚ü©

{- corollary of adequacy and soundness:
   reduction to a value implies big-step termination -}
reduce‚Üí‚áì : ‚àÄ {M V : Term}{wfM : WF 0 M}
   ‚Üí TermValue V  ‚Üí  M ‚Äî‚Ü† V
    -------------------------
   ‚Üí Œ£[ c ‚àà Val ] ‚àÖ' ‚ä¢ M ‚áì c
reduce‚Üí‚áì {M}{V}{wfM} v M‚Äî‚Ü†N =
   let œÅ = Œª x ‚Üí ‚åà ŒΩ ‚åâ in
   let NE-œÅ = Œª x ‚Üí ‚ü® ŒΩ , refl ‚ü© in
   adequacy {M}{V}{wfM}{œÅ = œÅ}{NE-œÅ} v (soundness{NE-œÅ = NE-œÅ} M‚Äî‚Ü†N)

{- Compositionality -----------------------------------------------------------}

compositionality : ‚àÄ{C : Ctx} {M N : Term}{œÅ}
   ‚Üí (‚àÄ {œÅ} ‚Üí ‚ü¶ M ‚üß œÅ ‚âÉ ‚ü¶ N ‚üß œÅ)
    --------------------------------
   ‚Üí ‚ü¶ plug C M ‚üß œÅ ‚âÉ ‚ü¶ plug C N ‚üß œÅ
compositionality{CHole}{M}{N}{œÅ} ‚ü¶M‚üß=‚ü¶N‚üß = ‚ü¶M‚üß=‚ü¶N‚üß
compositionality{COp lam (ccons (CBind (CAst C‚Ä≤)) nil refl)}{M}{N}{œÅ} ‚ü¶M‚üß=‚ü¶N‚üß =
   Œõ-ext Œª {X} ‚Üí compositionality {C‚Ä≤}{M}{N}{X ‚Ä¢ œÅ} ‚ü¶M‚üß=‚ü¶N‚üß
compositionality{COp app (tcons (ast L) (tcons x Cs refl) refl)} ‚ü¶M‚üß=‚ü¶N‚üß =
   ‚âÉ-refl
compositionality {COp app (tcons (ast L) (ccons (CAst C‚Ä≤) nil refl) refl)}
   {M}{N}{œÅ} ‚ü¶M‚üß=‚ü¶N‚üß =
   ‚ñ™-cong{‚ü¶ L ‚üß œÅ} ‚âÉ-refl (compositionality {C‚Ä≤} ‚ü¶M‚üß=‚ü¶N‚üß)
compositionality{COp app (ccons (CAst C‚Ä≤) (cons (ast M‚Ä≤) nil) refl)}{M}{N}{œÅ}
  ‚ü¶M‚üß=‚ü¶N‚üß =
  ‚ñ™-cong{D‚ÇÇ = ‚ü¶ M‚Ä≤ ‚üß œÅ} (compositionality {C‚Ä≤}{M}{N}{œÅ} ‚ü¶M‚üß=‚ü¶N‚üß) ‚âÉ-refl

{- Denotational Equality implies Contextual Equivalence -----------------------}

denot-equal‚áícontext-equal : ‚àÄ{M N : Term}
  ‚Üí (‚àÄ {œÅ} ‚Üí ‚ü¶ M ‚üß œÅ ‚âÉ ‚ü¶ N ‚üß œÅ)
    ---------------------------
  ‚Üí M ‚âÖ N
denot-equal‚áícontext-equal {M}{N} eq {C}{wfC}{wfM}{wfN} =
  record { to = Œª tm ‚Üí equal‚áíterminates{wfM = wfM}{wfN}{wfC} eq tm ;
           from = Œª tn ‚Üí equal‚áíterminates{wfM = wfN}{wfM}{wfC} (‚âÉ-sym eq) tn }
  where
  equal‚áíterminates : ‚àÄ{M N : Term} {C : Ctx}{wfM : WF (ctx-depth C 0) M}
      {wfN : WF (ctx-depth C 0) N}{wfC : WF-Ctx 0 C}
    ‚Üí (‚àÄ {œÅ} ‚Üí ‚ü¶ M ‚üß œÅ ‚âÉ ‚ü¶ N ‚üß œÅ)  ‚Üí  terminates (plug C M)
    ‚Üí terminates (plug C N)
  equal‚áíterminates {M}{N}{C}{wfM}{wfN}{wfC} M‚âÉN ‚ü® N‚Ä≤ , ‚ü® Nv , CM‚Äî‚Ü†N‚Ä≤ ‚ü© ‚ü© =
     let œÅ = Œª x ‚Üí ‚åà ŒΩ ‚åâ in
     let NE-œÅ = Œª x ‚Üí ‚ü® ŒΩ , refl ‚ü© in
     let CM‚âÉŒªN‚Ä≤ = soundness{œÅ = œÅ}{NE-œÅ} CM‚Äî‚Ü†N‚Ä≤ in
     let CM‚âÉCN = compositionality{C}{M}{N}{œÅ} M‚âÉN in
     let CN‚âÉŒªN‚Ä≤ = ‚âÉ-trans (‚âÉ-sym CM‚âÉCN) CM‚âÉŒªN‚Ä≤ in
     let adq = adequacy{plug C N}{wfM = WF-plug wfC wfN}{œÅ}{NE-œÅ} Nv CN‚âÉŒªN‚Ä≤ in
     ‚áì‚Üí‚Äî‚Ü† {wfM = WF-plug wfC wfN} (proj‚ÇÇ adq)
