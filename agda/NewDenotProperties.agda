open import Data.Empty using (‚ä•-elim) renaming (‚ä• to False)
open import Data.List using (List ; _‚à∑_ ; []; _++_; length; replicate)
open import Data.List.Properties using (++-conicalÀ°)
open import Data.List.Membership.Propositional renaming (_‚àà_ to _‚ãµ_)
open import Data.List.Membership.Propositional.Properties
  using (‚àà-++‚Å∫À°; ‚àà-++‚Å∫ ≥)
open import Data.List.Relation.Unary.Any using (here; there) 
open import Data.Nat using (‚Ñï; zero; suc; _‚âü_; _<_; s‚â§s; _+_)
open import Data.Product using (_√ó_; Œ£; Œ£-syntax; proj‚ÇÅ; proj‚ÇÇ)
    renaming (_,_ to ‚ü®_,_‚ü©)
open import Data.Sum using (_‚äé_; inj‚ÇÅ; inj‚ÇÇ)
open import Data.Unit using (tt) renaming (‚ä§ to True)
open import Level renaming (zero to lzero; suc to lsuc; _‚äî_ to _l‚äî_)
open import Relation.Binary.PropositionalEquality
    using (_‚â°_; _‚â¢_; refl; sym; subst)
open import Relation.Nullary using (¬¨_; Dec; yes; no)

open import Primitives
open import ScopedTuple hiding (ùí´)
open import SetsAsPredicates
open import Syntax hiding (‚åà_‚åâ)
open import NewSigUtil
open import NewSyntaxUtil
open import NewDOpSig
open import Utilities using (extensionality)

module NewDenotProperties where


{- =================== Monotonicity ================================= -}

monotone : ‚àÄ {A : Set} bs b ‚Üí DFun (ùí´ A) bs b ‚Üí Set‚ÇÅ
monotone bs b ùíª = fun-rel-pres _‚äÜ_ bs b ùíª ùíª

ùïÜ-monotone : ‚àÄ {A : Set} {Op} sig ‚Üí DOpSig {Op = Op} (ùí´ A) sig ‚Üí Set‚ÇÅ
ùïÜ-monotone sig ùïÜ = opsig-rel-pres _‚äÜ_ sig ùïÜ ùïÜ

congruent : ‚àÄ {A : Set} bs b ‚Üí DFun (ùí´ A) bs b ‚Üí Set‚ÇÅ
congruent bs b ùíª = fun-rel-pres _‚âÉ_ bs b ùíª ùíª

ùïÜ-congruent : ‚àÄ {A : Set} {Op} sig ‚Üí DOpSig {Op = Op} (ùí´ A) sig ‚Üí Set‚ÇÅ
ùïÜ-congruent sig ùïÜ = opsig-rel-pres _‚âÉ_ sig ùïÜ ùïÜ


{- =================== Consitency ================================= -}

Every : ‚àÄ {A : Set} (R : A ‚Üí A ‚Üí Set) ‚Üí ùí´ A ‚Üí ùí´ A ‚Üí Set
Every R A B = ‚àÄ a b ‚Üí a ‚àà A ‚Üí b ‚àà B ‚Üí R a b

Every-‚äÜ : ‚àÄ {T R A B U V}
     ‚Üí Every {T} R A B ‚Üí U ‚äÜ A ‚Üí V ‚äÜ B ‚Üí Every R U V
Every-‚äÜ A~B U‚äÜA V‚äÜB a b a‚ààU b‚ààV = A~B a b (U‚äÜA a a‚ààU) (V‚äÜB b b‚ààV)

consistent : ‚àÄ {A : Set} (consistent : A ‚Üí A ‚Üí Set) bs b ‚Üí DFun (ùí´ A) bs b ‚Üí Set‚ÇÅ
consistent consistent bs b ùíª = fun-rel-pres (Every consistent) bs b ùíª ùíª

ùïÜ-consistent : ‚àÄ {A : Set} (consistent : A ‚Üí A ‚Üí Set) {Op} sig ‚Üí DOpSig {Op = Op} (ùí´ A) sig ‚Üí Set‚ÇÅ
ùïÜ-consistent consistent sig ùïÜ = opsig-rel-pres (Every consistent) sig ùïÜ ùïÜ

