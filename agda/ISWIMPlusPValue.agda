module ISWIMPlusPValue where

open import Primitives
open import Syntax using (Rename)
open import ISWIMPlus hiding (Ctx)
open ISWIMPlus.ASTMod using (WF-rel; len-mk-list)
open import AbstractBindingTree Op sig using (Ctx; CHole)
open import WellScoped Op sig using (WF-plug; not-WF-0-var) 
open import Fold2 Op sig
open import ScopedTuple hiding (ùí´)
open import Sig
open import Utilities using (extensionality)
open import SetsAsPredicates
open import PValueCBV
open import SemanticProperties Op sig

open import Data.Empty using (‚ä•-elim) renaming (‚ä• to False)
open import Data.List using (List ; _‚à∑_ ; []; length; replicate)
open import Data.List.Relation.Unary.Any using (here; there) 
open import Data.Nat using (‚Ñï; zero; suc; _<_; s‚â§s; _+_)
open import Data.Product using (_√ó_; Œ£; Œ£-syntax; proj‚ÇÅ; proj‚ÇÇ)
    renaming (_,_ to ‚ü®_,_‚ü©)
open import Data.Sum using (_‚äé_; inj‚ÇÅ; inj‚ÇÇ)
open import Data.Unit using (tt) renaming (‚ä§ to True)
open import Level renaming (zero to lzero; suc to lsuc)
open import Relation.Binary.PropositionalEquality
    using (_‚â°_; _‚â¢_; refl; sym; subst)
open import Relation.Nullary using (¬¨_; Dec; yes; no)


{- Denotational Semantics of the ISWIM Language via fold ----------------------}

interp-op  : (op : Op) ‚Üí Tuple (sig op) (Result (ùí´ Value)) ‚Üí ùí´ Value
interp-op lam ‚ü® F , _ ‚ü© = Œõ F
interp-op app ‚ü® D‚ÇÅ , ‚ü® D‚ÇÇ , _ ‚ü© ‚ü© = D‚ÇÅ ‚ñ™ D‚ÇÇ
interp-op (lit P k) _ = ‚Ñò P k
interp-op pair-op ‚ü® D‚ÇÅ , ‚ü® D‚ÇÇ , _ ‚ü© ‚ü© = „Äò D‚ÇÅ , D‚ÇÇ „Äô
interp-op fst-op ‚ü® D , _ ‚ü©  = car D
interp-op snd-op ‚ü® D , _ ‚ü© = cdr D
interp-op (tuple n) results = ùíØ n results
interp-op (get i) ‚ü® D , _ ‚ü© = proj D i
interp-op inl-op ‚ü® D , _ ‚ü© = ‚Ñí D
interp-op inr-op ‚ü® D , _ ‚ü© = ‚Ñõ D
interp-op case-op ‚ü® D , ‚ü® E , ‚ü® F , _ ‚ü© ‚ü© ‚ü© = ùíû D (Œõ E) (Œõ F)

{- interp-op is monotonic -}
mono-op : {op : Op} {xs ys : Tuple (sig op) (Result (ùí´ Value))}
   ‚Üí ‚äÜ-results (sig op) xs ys ‚Üí interp-op op xs ‚äÜ interp-op op ys
mono-op {lam} {‚ü® f , _ ‚ü© } {‚ü® g , _ ‚ü©} ‚ü® f‚äÜg , _ ‚ü© =
    Œõ-ext-‚äÜ (Œª {X} ‚Üí lower (f‚äÜg X))
mono-op {app} {‚ü® a , ‚ü® b , _ ‚ü© ‚ü©} {‚ü® c , ‚ü® d , _ ‚ü© ‚ü©} ‚ü® a<c , ‚ü® b<d , _ ‚ü© ‚ü© =
    ‚ñ™-mono-‚äÜ (lower a<c) (lower b<d)
mono-op {lit P k} {xs} {ys} xs‚äÜys d d‚ààk = d‚ààk
mono-op {pair-op} {‚ü® D‚ÇÅ , ‚ü® D‚ÇÇ , _ ‚ü© ‚ü©} {‚ü® E‚ÇÅ , ‚ü® E‚ÇÇ , _ ‚ü© ‚ü©}
    ‚ü® lift D‚ÇÅ‚äÜE‚ÇÅ , ‚ü® lift D‚ÇÇ‚äÜE‚ÇÇ , _ ‚ü© ‚ü© = cons-mono-‚äÜ D‚ÇÅ‚äÜE‚ÇÅ D‚ÇÇ‚äÜE‚ÇÇ
mono-op {fst-op} {‚ü® D , _ ‚ü©} {‚ü® E , _ ‚ü©} ‚ü® lift D‚äÜE , _ ‚ü© = car-mono-‚äÜ D‚äÜE 
mono-op {snd-op} {‚ü® D , _ ‚ü©} {‚ü® E , _ ‚ü©} ‚ü® lift D‚äÜE , _ ‚ü© = cdr-mono-‚äÜ D‚äÜE 
mono-op {tuple n} {args‚ÇÅ}{args‚ÇÇ} IHs =
    ùíØ-mono-‚äÜ (rel-results‚áírel-‚àè ‚äÜ-result‚áí‚äÜ IHs)
mono-op {get i} {‚ü® D , _ ‚ü©} {‚ü® E , _ ‚ü©} ‚ü® lift D‚äÜE , _ ‚ü© = proj-mono-‚äÜ D‚äÜE
mono-op {inl-op} {‚ü® D , _ ‚ü©} {‚ü® E , _ ‚ü©} ‚ü® lift D‚äÜE , _ ‚ü© = ‚Ñí-mono-‚äÜ D‚äÜE
mono-op {inr-op} {‚ü® D , _ ‚ü©} {‚ü® E , _ ‚ü©} ‚ü® lift D‚äÜE , _ ‚ü© = ‚Ñõ-mono-‚äÜ D‚äÜE
mono-op {case-op} {‚ü® D‚ÇÅ , ‚ü® f‚ÇÅ , ‚ü® g‚ÇÅ , _ ‚ü© ‚ü© ‚ü©}
                  {‚ü® D‚ÇÇ , ‚ü® f‚ÇÇ , ‚ü® g‚ÇÇ , _ ‚ü© ‚ü© ‚ü©}
                  ‚ü® lift D‚ÇÅ‚äÜD‚ÇÇ , ‚ü® f‚ÇÅ‚äÜf‚ÇÇ , ‚ü® g‚ÇÅ‚äÜg‚ÇÇ , _ ‚ü© ‚ü© ‚ü© =
    ùíû-mono-‚äÜ D‚ÇÅ‚äÜD‚ÇÇ (Œª X ‚Üí lower (f‚ÇÅ‚äÜf‚ÇÇ X)) (Œª X ‚Üí lower (g‚ÇÅ‚äÜg‚ÇÇ X))

instance
  ISWIM-Semantics : Semantics
  ISWIM-Semantics = record { interp-op = interp-op ;
                             mono-op = Œª {op} ‚Üí mono-op {op} }
open Semantics {{...}}

‚ü¶‚üß-app : ‚àÄ{L M : Term}{œÅ : Env}
  ‚Üí ‚ü¶ L ¬∑ M ‚üß œÅ ‚â° ‚ü¶ L ‚üß œÅ ‚ñ™ ‚ü¶ M ‚üß œÅ
‚ü¶‚üß-app = refl

‚ü¶‚üß-lam : ‚àÄ{N : Term}{œÅ : Env}
  ‚Üí ‚ü¶ ∆õ N ‚üß œÅ ‚â° Œõ (Œª D ‚Üí ‚ü¶ N ‚üß (D ‚Ä¢ œÅ))
‚ü¶‚üß-lam = refl

‚ü¶‚üß-prim : ‚àÄ{P : Prim}{k : rep P}{œÅ : Env}
  ‚Üí ‚ü¶ $ P k ‚üß œÅ ‚â° ‚Ñò P k
‚ü¶‚üß-prim = refl

{- interp-op is continuous -}
continuous-op : ‚àÄ{op}{œÅ}{NE-œÅ}{v}{args}
   ‚Üí v ‚àà ‚ü¶ op ‚¶Ö args ‚¶Ü ‚üß œÅ
   ‚Üí all-args (Cont-Env-Arg œÅ NE-œÅ) (sig op) args
   ‚Üí Œ£[ œÅ‚Ä≤ ‚àà Env ] finite-env œÅ‚Ä≤ √ó œÅ‚Ä≤ ‚äÜ‚Çë œÅ √ó v ‚àà (‚ü¶ op ‚¶Ö args ‚¶Ü ‚üß œÅ‚Ä≤)
continuous-op {lam} {œÅ} {NE-œÅ} {v} {cons (bind (ast N)) nil}
    v‚ààŒõ ‚ü® IH-N , _ ‚ü© =
    Œõ-continuous {NE-œÅ = NE-œÅ} v‚ààŒõ IH-N (‚ü¶‚üß-monotone N)
continuous-op {app} {œÅ} {NE-œÅ} {w} {cons (ast L) (cons (ast M) nil)}
    w‚àà‚ü¶L¬∑M‚üßœÅ ‚ü® IH-L , ‚ü® IH-M , _ ‚ü© ‚ü© =
    ‚ñ™-continuous{NE-œÅ = NE-œÅ} w‚àà‚ü¶L¬∑M‚üßœÅ IH-L IH-M (‚ü¶‚üß-monotone L) (‚ü¶‚üß-monotone M)
continuous-op {lit p x} {œÅ} {NE-œÅ} {v} {nil} v‚àà‚ü¶M‚üßœÅ _ =
    ‚ü® initial-finite-env œÅ NE-œÅ , ‚ü® initial-fin œÅ NE-œÅ ,
    ‚ü® initial-fin-‚äÜ œÅ NE-œÅ ,
      v‚àà‚ü¶M‚üßœÅ ‚ü© ‚ü© ‚ü©
continuous-op {pair-op}{œÅ}{NE-œÅ}{v}{cons (ast M) (cons (ast N) nil)} v‚àà‚ü¶M‚üßœÅ
    ‚ü® IH-M , ‚ü® IH-N , _ ‚ü© ‚ü© =
    cons-continuous{NE-œÅ = NE-œÅ} v‚àà‚ü¶M‚üßœÅ IH-M IH-N
        (‚ü¶‚üß-monotone M) (‚ü¶‚üß-monotone N)
continuous-op {fst-op} {œÅ} {NE-œÅ} {v} {cons (ast M) nil} v‚àà‚ü¶M‚üßœÅ
    ‚ü® IH-M , _ ‚ü© =
    car-continuous{NE-œÅ = NE-œÅ} v‚àà‚ü¶M‚üßœÅ IH-M (‚ü¶‚üß-monotone M)
continuous-op {snd-op} {œÅ} {NE-œÅ} {v} {cons (ast M) nil} v‚àà‚ü¶M‚üßœÅ
    ‚ü® IH-M , _ ‚ü© =
    cdr-continuous{NE-œÅ = NE-œÅ} v‚àà‚ü¶M‚üßœÅ IH-M (‚ü¶‚üß-monotone M)
continuous-op {tuple n} {œÅ} {NE-œÅ} {v} {args} v‚àà‚ü¶M‚üßœÅ cont-args =
   ùíØ-continuous{NE-œÅ = NE-œÅ} v‚àà‚ü¶M‚üßœÅ
       (all-Cont-Env-Arg‚áícont-envs{NE-œÅ = NE-œÅ} cont-args)
       (‚ü¶‚üß-monotone-args args)
continuous-op {get i} {œÅ} {NE-œÅ} {v} {cons (ast M) nil} v‚àà‚ü¶M‚üßœÅ ‚ü® cM , _ ‚ü© =
    proj-continuous{NE-œÅ = NE-œÅ} v‚àà‚ü¶M‚üßœÅ cM (‚ü¶‚üß-monotone M)
continuous-op {inl-op}{œÅ}{NE-œÅ}{v}{cons (ast M) nil} v‚àà ‚ü® cM , _ ‚ü© =
    ‚Ñí-continuous{NE-œÅ = NE-œÅ} v‚àà cM (‚ü¶‚üß-monotone M)
continuous-op {inr-op}{œÅ}{NE-œÅ}{v}{cons (ast M) nil} v‚àà ‚ü® cM , _ ‚ü© =
    ‚Ñõ-continuous{NE-œÅ = NE-œÅ} v‚àà cM (‚ü¶‚üß-monotone M)
continuous-op {case-op}{œÅ}{NE-œÅ}{v}
    {cons (ast L) (cons (bind (ast M)) (cons (bind (ast N)) nil))}
    v‚àà ‚ü® IH-L , ‚ü® IH-M , ‚ü® IH-N , _ ‚ü© ‚ü© ‚ü© =
   ùíû-continuous{NE-œÅ = NE-œÅ} v‚àà IH-L (‚ü¶‚üß-monotone L) IH-M (‚ü¶‚üß-monotone M)
       IH-N (‚ü¶‚üß-monotone N)

instance
  ISWIM-Continuous : ContinuousSemantics
  ISWIM-Continuous = record { continuous-op =
      Œª{op}{œÅ}{NE-œÅ} ‚Üí continuous-op{op}{œÅ}{NE-œÅ} }
open ContinuousSemantics {{...}}

{- Syntactic values terminate (i.e., have nonempty denotations) ---------------}

values-NE-‚àè : ‚àÄ{n}{args : Args (replicate n ‚ñ†)}{œÅ}{NE-œÅ : nonempty-env œÅ}
  ‚Üí (vargs : ArgsValue args)  ‚Üí  NE-‚àè (‚ü¶ args ‚üß‚Çä œÅ)

value-nonempty : ‚àÄ{V : Term}{œÅ}
  ‚Üí nonempty-env œÅ ‚Üí TermValue V ‚Üí nonempty (‚ü¶ V ‚üß œÅ)
value-nonempty NE-œÅ (V-var {x}) = NE-œÅ x
value-nonempty NE-œÅ (V-∆õ) = ‚ü® ŒΩ , tt ‚ü©
value-nonempty NE-œÅ (V-lit {base B} {k}) = ‚ü® const k , k‚àà‚Ñòk ‚ü©
value-nonempty NE-œÅ (V-lit {B ‚áí P} {k}) = ‚ü® ŒΩ , tt ‚ü©
value-nonempty NE-œÅ (V-pair Mv Nv)
    with value-nonempty NE-œÅ Mv | value-nonempty NE-œÅ Nv
... | ‚ü® u , u‚àà ‚ü© | ‚ü® v , v‚àà ‚ü© =
    ‚ü® ‚ù≤ u , v ‚ù≥ , ‚ü® u‚àà , v‚àà ‚ü© ‚ü©
value-nonempty {œÅ = œÅ} NE-œÅ (V-tuple {n}{args} vargs) =
    NE-‚àè‚áíNE-ùíØ (values-NE-‚àè {NE-œÅ = NE-œÅ} vargs)
value-nonempty {œÅ = œÅ} NE-œÅ (V-inl Mv)
    with value-nonempty NE-œÅ Mv
... | ‚ü® u , u‚àà ‚ü© = ‚ü® left (u ‚à∑ []) , ‚ü® (Œª ()) , (Œª{d (here refl) ‚Üí u‚àà}) ‚ü© ‚ü©
value-nonempty {œÅ = œÅ} NE-œÅ (V-inr Mv)
    with value-nonempty NE-œÅ Mv
... | ‚ü® u , u‚àà ‚ü© = ‚ü® right (u ‚à∑ []) , ‚ü® (Œª ()) , (Œª{d (here refl) ‚Üí u‚àà}) ‚ü© ‚ü©

values-NE-‚àè {zero} {nil} vargs = lift tt
values-NE-‚àè {suc n} {cons (ast M) args‚Ä≤}{œÅ}{NE-œÅ} (V-cons Mv vargs) =
    ‚ü® value-nonempty NE-œÅ Mv , values-NE-‚àè {n}{args‚Ä≤}{œÅ}{NE-œÅ} vargs ‚ü©

{- Substitution Lemma (via fold-subst-fusion) ---------------------------------}

‚ü¶‚üß-par-subst : ‚àÄ {M : Term}{œÉ : Subst}{œÅ : Var ‚Üí ùí´ Value}
  ‚Üí ‚ü¶ ‚ü™ œÉ ‚ü´ M ‚üß œÅ ‚â° ‚ü¶ M ‚üß (Œª x ‚Üí ‚ü¶ œÉ x ‚üß œÅ)
‚ü¶‚üß-par-subst {M}{œÅ} = fold-subst-fusion M

‚ü¶‚üß-subst : ‚àÄ {M N : Term}{œÅ : Var ‚Üí ùí´ Value}
  ‚Üí ‚ü¶ M [ N ] ‚üß œÅ ‚â° ‚ü¶ M ‚üß ((‚ü¶ N ‚üß œÅ) ‚Ä¢ œÅ)
‚ü¶‚üß-subst {M}{N}{œÅ} =
  subst (Œª X ‚Üí ‚ü¶ M [ N ] ‚üß œÅ ‚â° ‚ü¶ M ‚üß X) (extensionality EQ)
        (‚ü¶‚üß-par-subst {M}{N ‚Ä¢ id})
  where 
  EQ : (x : Var) ‚Üí ‚ü¶ (N ‚Ä¢ id) x ‚üß œÅ ‚â° (‚ü¶ N ‚üß œÅ ‚Ä¢ œÅ) x
  EQ zero = refl
  EQ (suc x) = refl

{- Soundness of Reduction with respect to Denotations -------------------------}

ArgsValue‚áíNE-‚àè : ‚àÄ{n}{args : Args (Data.List.replicate n ‚ñ†)}
    {œÅ}{NE-œÅ : nonempty-env œÅ}
   ‚Üí ArgsValue args ‚Üí NE-‚àè (‚ü¶ args ‚üß‚Çä œÅ)
ArgsValue‚áíNE-‚àè {zero} {nil} vs = lift tt
ArgsValue‚áíNE-‚àè {suc n} {cons (ast M) args}{œÅ}{NE-œÅ} (V-cons Mv vs) =
    ‚ü® value-nonempty NE-œÅ Mv , ArgsValue‚áíNE-‚àè {NE-œÅ = NE-œÅ} vs ‚ü©

‚ü¶append‚Çä‚üß : ‚àÄ{n m}{xs : Args (replicate n ‚ñ†)}{ys : Args (replicate m ‚ñ†)}{œÅ}
   ‚Üí ‚ü¶ append‚Çä xs ys ‚üß‚Çä œÅ ‚©≠ ‚àè-append (‚ü¶ xs ‚üß‚Çä œÅ) (‚ü¶ ys ‚üß‚Çä œÅ)
‚ü¶append‚Çä‚üß {zero} {m} {nil} {ys} = ‚©≠-refl
‚ü¶append‚Çä‚üß {suc n} {m} {cons x xs} {ys} = ‚ü® ‚âÉ-refl , (‚ü¶append‚Çä‚üß {n}{m}{xs}{ys}) ‚ü©

‚ü¶‚üß‚Äî‚Üí : ‚àÄ{M N : Term}{œÅ : Var ‚Üí ùí´ Value} {NE-œÅ : nonempty-env œÅ}
   ‚Üí M ‚Äî‚Üí N
   ‚Üí ‚ü¶ M ‚üß œÅ ‚âÉ ‚ü¶ N ‚üß œÅ
‚ü¶‚üß‚Äî‚Üí {.(_ ¬∑ _)} {.(_ ¬∑ _)} {œÅ} {NE-œÅ} (Œæ-rule {L}{L‚Ä≤} (F-¬∑‚ÇÅ M) L‚Äî‚ÜíL‚Ä≤) = 
    let IH = ‚ü¶‚üß‚Äî‚Üí{œÅ = œÅ}{NE-œÅ} L‚Äî‚ÜíL‚Ä≤ in
    ‚ü¶ L ¬∑ M ‚üß œÅ              ‚âÉ‚ü®‚ü©
    (‚ü¶ L ‚üß œÅ) ‚ñ™ (‚ü¶ M ‚üß œÅ)    ‚âÉ‚ü® ‚ñ™-cong IH ‚âÉ-refl ‚ü©
    (‚ü¶ L‚Ä≤ ‚üß œÅ) ‚ñ™ (‚ü¶ M ‚üß œÅ)   ‚âÉ‚ü®‚ü©
    ‚ü¶ L‚Ä≤ ¬∑ M ‚üß œÅ             ‚àé where open ‚âÉ-Reasoning  
‚ü¶‚üß‚Äî‚Üí {.(_ ¬∑ _)} {.(_ ¬∑ _)} {œÅ} {NE-œÅ} (Œæ-rule {M}{M‚Ä≤} (F-¬∑‚ÇÇ V {v}) M‚Äî‚ÜíM‚Ä≤) =
    let IH = ‚ü¶‚üß‚Äî‚Üí{œÅ = œÅ}{NE-œÅ} M‚Äî‚ÜíM‚Ä≤ in
    ‚ü¶ V ¬∑ M ‚üß œÅ              ‚âÉ‚ü®‚ü©
    (‚ü¶ V ‚üß œÅ) ‚ñ™ (‚ü¶ M ‚üß œÅ)    ‚âÉ‚ü® ‚ñ™-cong (‚âÉ-refl{D = ‚ü¶ V ‚üß œÅ}) IH ‚ü©
    (‚ü¶ V ‚üß œÅ) ‚ñ™ (‚ü¶ M‚Ä≤ ‚üß œÅ)   ‚âÉ‚ü®‚ü©
    ‚ü¶ V ¬∑ M‚Ä≤ ‚üß œÅ             ‚àé where open ‚âÉ-Reasoning
‚ü¶‚üß‚Äî‚Üí {.(pair _ _)} {.(pair _ _)} {œÅ} {NE-œÅ} (Œæ-rule {M}{M‚Ä≤} (F-√ó‚ÇÅ N) M‚Äî‚ÜíM‚Ä≤) =
    let IH = ‚ü¶‚üß‚Äî‚Üí{œÅ = œÅ}{NE-œÅ} M‚Äî‚ÜíM‚Ä≤ in
    ‚ü¶ pair M N ‚üß œÅ              ‚âÉ‚ü®‚ü©
    „Äò ‚ü¶ M ‚üß œÅ , ‚ü¶ N ‚üß œÅ „Äô      ‚âÉ‚ü® cons-cong IH ‚âÉ-refl ‚ü©
    „Äò ‚ü¶ M‚Ä≤ ‚üß œÅ , ‚ü¶ N ‚üß œÅ „Äô     ‚âÉ‚ü®‚ü©
    ‚ü¶ pair M‚Ä≤ N ‚üß œÅ             ‚àé where open ‚âÉ-Reasoning  
‚ü¶‚üß‚Äî‚Üí {.(pair V _)} {.(pair V _)} {œÅ} {NE-œÅ} (Œæ-rule {M}{M‚Ä≤}(F-√ó‚ÇÇ V {v}) M‚Äî‚ÜíM‚Ä≤) =
    let IH = ‚ü¶‚üß‚Äî‚Üí{œÅ = œÅ}{NE-œÅ} M‚Äî‚ÜíM‚Ä≤ in
    ‚ü¶ pair V M ‚üß œÅ              ‚âÉ‚ü®‚ü©
   „Äò ‚ü¶ V ‚üß œÅ , ‚ü¶ M ‚üß œÅ „Äô      ‚âÉ‚ü® cons-cong (‚âÉ-refl{D = ‚ü¶ V ‚üß œÅ}) IH ‚ü©
   „Äò ‚ü¶ V ‚üß œÅ , ‚ü¶ M‚Ä≤ ‚üß œÅ „Äô     ‚âÉ‚ü®‚ü©
    ‚ü¶ pair V M‚Ä≤ ‚üß œÅ             ‚àé where open ‚âÉ-Reasoning
‚ü¶‚üß‚Äî‚Üí {.(fst _)} {.(fst _)} {œÅ} {NE-œÅ} (Œæ-rule {M}{M‚Ä≤} F-fst M‚Äî‚ÜíM‚Ä≤) =
    let IH = ‚ü¶‚üß‚Äî‚Üí{œÅ = œÅ}{NE-œÅ} M‚Äî‚ÜíM‚Ä≤ in
    ‚ü¶ fst M ‚üß œÅ              ‚âÉ‚ü®‚ü©
    car (‚ü¶ M ‚üß œÅ)            ‚âÉ‚ü® car-cong IH ‚ü©
    car (‚ü¶ M‚Ä≤ ‚üß œÅ)            ‚âÉ‚ü®‚ü©
    ‚ü¶ fst M‚Ä≤ ‚üß œÅ             ‚àé where open ‚âÉ-Reasoning
‚ü¶‚üß‚Äî‚Üí {.(snd _)} {.(snd _)} {œÅ} {NE-œÅ} (Œæ-rule {M}{M‚Ä≤} F-snd M‚Äî‚ÜíM‚Ä≤) =
    let IH = ‚ü¶‚üß‚Äî‚Üí{œÅ = œÅ}{NE-œÅ} M‚Äî‚ÜíM‚Ä≤ in
    ‚ü¶ snd M ‚üß œÅ              ‚âÉ‚ü®‚ü©
    cdr (‚ü¶ M ‚üß œÅ)            ‚âÉ‚ü® cdr-cong IH ‚ü©
    cdr (‚ü¶ M‚Ä≤ ‚üß œÅ)            ‚âÉ‚ü®‚ü©
    ‚ü¶ snd M‚Ä≤ ‚üß œÅ             ‚àé where open ‚âÉ-Reasoning
‚ü¶‚üß‚Äî‚Üí {.(inl _)} {.(inl _)} {œÅ} {NE-œÅ} (Œæ-rule {M}{M‚Ä≤} F-inl M‚Äî‚ÜíM‚Ä≤) =
    let IH = ‚ü¶‚üß‚Äî‚Üí{œÅ = œÅ}{NE-œÅ} M‚Äî‚ÜíM‚Ä≤ in
    ‚ü¶ inl M ‚üß œÅ              ‚âÉ‚ü®‚ü©
    ‚Ñí (‚ü¶ M ‚üß œÅ)              ‚âÉ‚ü® ‚Ñí-cong IH ‚ü©
    ‚Ñí (‚ü¶ M‚Ä≤ ‚üß œÅ)             ‚âÉ‚ü®‚ü©
    ‚ü¶ inl M‚Ä≤ ‚üß œÅ             ‚àé where open ‚âÉ-Reasoning
‚ü¶‚üß‚Äî‚Üí {.(inr _)} {.(inr _)} {œÅ} {NE-œÅ} (Œæ-rule {M}{M‚Ä≤} F-inr M‚Äî‚ÜíM‚Ä≤) =
    let IH = ‚ü¶‚üß‚Äî‚Üí{œÅ = œÅ}{NE-œÅ} M‚Äî‚ÜíM‚Ä≤ in
    ‚ü¶ inr M ‚üß œÅ              ‚âÉ‚ü®‚ü©
    ‚Ñõ (‚ü¶ M ‚üß œÅ)              ‚âÉ‚ü® ‚Ñõ-cong IH ‚ü©
    ‚Ñõ (‚ü¶ M‚Ä≤ ‚üß œÅ)             ‚âÉ‚ü®‚ü©
    ‚ü¶ inr M‚Ä≤ ‚üß œÅ             ‚àé where open ‚âÉ-Reasoning
‚ü¶‚üß‚Äî‚Üí {_}{_}{œÅ}{NE-œÅ} (Œæ-rule {M}{M‚Ä≤} (F-tuple {n = n}{m} vargs vs args) M‚Äî‚ÜíM‚Ä≤) =
    let IH = ‚ü¶‚üß‚Äî‚Üí{œÅ = œÅ}{NE-œÅ} M‚Äî‚ÜíM‚Ä≤ in
    ‚ü¶ tuple (n + suc m) ‚¶Ö append‚Çä vargs (cons (ast M) args) ‚¶Ü ‚üß œÅ     ‚âÉ‚ü®‚ü© 
    ùíØ (n + suc m) (‚ü¶ append‚Çä vargs (cons (ast M) args) ‚üß‚Çä œÅ)
        ‚âÉ‚ü® ùíØ-cong-‚âÉ (‚ü¶append‚Çä‚üß{n}{suc m}) ‚ü© 
    ùíØ (n + suc m) (‚àè-append (‚ü¶ vargs ‚üß‚Çä œÅ) ‚ü® ‚ü¶ M ‚üß œÅ , ‚ü¶ args ‚üß‚Çä œÅ ‚ü©)
        ‚âÉ‚ü® ùíØ-cong-‚âÉ (‚àè-append-‚©≠ ‚©≠-refl ‚ü® IH , ‚©≠-refl ‚ü©) ‚ü© 
    ùíØ (n + suc m) (‚àè-append (‚ü¶ vargs ‚üß‚Çä œÅ) ‚ü® ‚ü¶ M‚Ä≤ ‚üß œÅ , ‚ü¶ args ‚üß‚Çä œÅ ‚ü©)
        ‚âÉ‚ü® ùíØ-cong-‚âÉ (‚©≠-sym (‚ü¶append‚Çä‚üß{n}{suc m})) ‚ü© 
    ùíØ (n + suc m) (‚ü¶ append‚Çä vargs (cons (ast M‚Ä≤) args) ‚üß‚Çä œÅ)        ‚âÉ‚ü®‚ü© 
    ‚ü¶ tuple (n + suc m) ‚¶Ö append‚Çä vargs (cons (ast M‚Ä≤) args) ‚¶Ü ‚üß œÅ
             ‚àé where open ‚âÉ-Reasoning
‚ü¶‚üß‚Äî‚Üí {_} {_} {œÅ} {NE-œÅ} (Œæ-rule {M}{M‚Ä≤} (F-get i) M‚Äî‚ÜíM‚Ä≤) =
    let IH = ‚ü¶‚üß‚Äî‚Üí{œÅ = œÅ}{NE-œÅ} M‚Äî‚ÜíM‚Ä≤ in
    ‚ü¶ M ‚ù≤ i ‚ù≥ ‚üß œÅ          ‚âÉ‚ü®‚ü©
    proj (‚ü¶ M ‚üß œÅ) i       ‚âÉ‚ü® proj-cong-‚âÉ IH ‚ü©
    proj (‚ü¶ M‚Ä≤ ‚üß œÅ) i       ‚âÉ‚ü®‚ü©
    ‚ü¶ M‚Ä≤ ‚ù≤ i ‚ù≥ ‚üß œÅ         ‚àé where open ‚âÉ-Reasoning
‚ü¶‚üß‚Äî‚Üí {∆õ N ¬∑ V} {_} {œÅ} {NE-œÅ} (Œ≤-rule v) =
    ‚ü¶ ∆õ N ¬∑ V ‚üß œÅ                           ‚âÉ‚ü®‚ü©
    (Œõ (Œª D ‚Üí ‚ü¶ N ‚üß (D ‚Ä¢ œÅ))) ‚ñ™ (‚ü¶ V ‚üß œÅ)   ‚âÉ‚ü® Œõ‚ü¶‚üß-‚ñ™-id {N}{œÅ}{NE-œÅ}
                                                   (value-nonempty NE-œÅ v) ‚ü©
    ‚ü¶ N ‚üß (‚ü¶ V ‚üß œÅ ‚Ä¢ œÅ)               ‚âÉ‚ü® ‚âÉ-reflexive (sym (‚ü¶‚üß-subst{N}{V}{œÅ})) ‚ü©
    ‚ü¶ N [ V ] ‚üß œÅ                     ‚àé where open ‚âÉ-Reasoning
‚ü¶‚üß‚Äî‚Üí {($ (B ‚áí P) f ¬∑ $ (base B) k)} {_} {œÅ} Œ¥-rule =
    ‚ü¶ $ (B ‚áí P) f ¬∑ $ (base B) k ‚üß œÅ        ‚âÉ‚ü®‚ü©
    (‚Ñò (B ‚áí P) f) ‚ñ™ (‚Ñò (base B) k)         ‚âÉ‚ü® ‚Ñò-‚ñ™-‚âÉ {B}{P} ‚ü©
    ‚ü¶ $ P (f k) ‚üß œÅ                         ‚àé where open ‚âÉ-Reasoning
‚ü¶‚üß‚Äî‚Üí {.(fst (pair _ _))} {_} {œÅ} {NE-œÅ} (fst-rule {N}{M} Mv Nv) =
    ‚ü¶ fst (pair M N) ‚üß œÅ          ‚âÉ‚ü®‚ü© 
    car „Äò ‚ü¶ M ‚üß œÅ , ‚ü¶ N ‚üß œÅ „Äô    ‚âÉ‚ü® car-of-cons (value-nonempty NE-œÅ Nv) ‚ü© 
    ‚ü¶ M ‚üß œÅ                        ‚àé where open ‚âÉ-Reasoning
‚ü¶‚üß‚Äî‚Üí {.(snd (pair _ _))} {_} {œÅ} {NE-œÅ} (snd-rule {N}{M} Mv Nv) =
    ‚ü¶ snd (pair M N) ‚üß œÅ          ‚âÉ‚ü®‚ü© 
    cdr „Äò ‚ü¶ M ‚üß œÅ , ‚ü¶ N ‚üß œÅ „Äô    ‚âÉ‚ü® cdr-of-cons (value-nonempty NE-œÅ Mv) ‚ü© 
    ‚ü¶ N ‚üß œÅ                        ‚àé where open ‚âÉ-Reasoning
‚ü¶‚üß‚Äî‚Üí {_} {_} {œÅ} {NE-œÅ} (get-rule {n}{i}{args} vs lt) =
    ‚ü¶ get i ‚¶Ö cons (ast (tuple n ‚¶Ö args ‚¶Ü)) nil ‚¶Ü ‚üß œÅ   ‚âÉ‚ü®‚ü©
    proj (ùíØ n (‚ü¶ args ‚üß‚Çä œÅ)) i            ‚âÉ‚ü® G i n args vs lt ‚ü©
    ‚ü¶ nth-arg args i ‚üß œÅ               ‚àé
    where
    open ‚âÉ-Reasoning
    G : ‚àÄ i n (args : Args (replicate n ‚ñ†)) ‚Üí ArgsValue args
       ‚Üí i < n
       ‚Üí proj (ùíØ n (‚ü¶ args ‚üß‚Çä œÅ)) i ‚âÉ ‚ü¶ nth-arg args i ‚üß œÅ
    G i 0 nil V-nil ()
    G 0 (suc n) (cons (ast M) args) (V-cons Mv vargs) lt =
        proj (ùíØ (suc n) (‚ü¶ cons (ast M) args ‚üß‚Çä œÅ)) 0
                                 ‚âÉ‚ü® ùíØ-nth-0 (values-NE-‚àè{NE-œÅ = NE-œÅ} vargs) ‚ü©
        ‚ü¶ M ‚üß œÅ ‚âÉ‚ü®‚ü©
        ‚ü¶ nth-arg (cons (ast M) args) 0 ‚üß œÅ   ‚àé
    G (suc i) (suc n) (cons (ast M) args) (V-cons Mv vargs) (s‚â§s lt) =
        proj (ùíØ (suc n) (‚ü¶ cons (ast M) args ‚üß‚Çä œÅ)) (suc i)
                                         ‚âÉ‚ü® ùíØ-nth-suc (value-nonempty NE-œÅ Mv)
                                             (values-NE-‚àè{NE-œÅ = NE-œÅ} vargs) ‚ü©
        proj (ùíØ n (‚ü¶ args ‚üß‚Çä œÅ)) i         ‚âÉ‚ü® G i n args vargs lt ‚ü©
        ‚ü¶ nth-arg args i ‚üß œÅ                ‚âÉ‚ü®‚ü©
        ‚ü¶ nth-arg (cons (ast M) args) (suc i) ‚üß œÅ   ‚àé
‚ü¶‚üß‚Äî‚Üí {_} {_} {œÅ} {NE-œÅ} (inl-rule {V}{M}{N} Vv) =
    ‚ü¶ case (inl V) M N ‚üß œÅ                       ‚âÉ‚ü®‚ü©
    ùíû (‚Ñí (‚ü¶ V ‚üß œÅ)) (Œõ (Œª D ‚Üí ‚ü¶ M ‚üß (D ‚Ä¢ œÅ))) (Œõ (Œª D ‚Üí ‚ü¶ N ‚üß (D ‚Ä¢ œÅ)))
                     ‚âÉ‚ü® ‚Ñí-ùíû{G = (Œª D ‚Üí ‚ü¶ N ‚üß (D ‚Ä¢ œÅ))}
                            (‚ü¶‚üß-continuous-one{M}{œÅ}{NE-œÅ}) (‚ü¶‚üß-monotone-one{M})
                            (value-nonempty NE-œÅ Vv) ‚ü©
    ‚ü¶ M ‚üß (‚ü¶ V ‚üß œÅ ‚Ä¢ œÅ)       ‚âÉ‚ü® ‚âÉ-reflexive (sym (‚ü¶‚üß-subst{M}{V}{œÅ})) ‚ü©
    ‚ü¶ M [ V ] ‚üß œÅ             ‚àé   where open ‚âÉ-Reasoning
‚ü¶‚üß‚Äî‚Üí {_} {_} {œÅ} {NE-œÅ} (inr-rule {V}{M}{N} Vv) =
    ‚ü¶ case (inr V) M N ‚üß œÅ                       ‚âÉ‚ü®‚ü©
    ùíû (‚Ñõ (‚ü¶ V ‚üß œÅ)) (Œõ (Œª D ‚Üí ‚ü¶ M ‚üß (D ‚Ä¢ œÅ))) (Œõ (Œª D ‚Üí ‚ü¶ N ‚üß (D ‚Ä¢ œÅ)))
                     ‚âÉ‚ü® ‚Ñõ-ùíû{F = (Œª D ‚Üí ‚ü¶ M ‚üß (D ‚Ä¢ œÅ))}
                            (‚ü¶‚üß-continuous-one{N}{œÅ}{NE-œÅ}) (‚ü¶‚üß-monotone-one{N})
                            (value-nonempty NE-œÅ Vv) ‚ü©
    ‚ü¶ N ‚üß (‚ü¶ V ‚üß œÅ ‚Ä¢ œÅ)       ‚âÉ‚ü® ‚âÉ-reflexive (sym (‚ü¶‚üß-subst{N}{V}{œÅ})) ‚ü©
    ‚ü¶ N [ V ] ‚üß œÅ             ‚àé   where open ‚âÉ-Reasoning


soundness : ‚àÄ {M N : Term} {œÅ : Env}{NE-œÅ : nonempty-env œÅ}
  ‚Üí M ‚Äî‚Ü† N
    -------------------
  ‚Üí ‚ü¶ M ‚üß œÅ ‚âÉ ‚ü¶ N ‚üß œÅ
soundness {M}{_}{œÅ} (M ‚ñ°) =
    ‚ü¶ M ‚üß œÅ ‚âÉ‚ü®‚ü© ‚ü¶ M ‚üß œÅ ‚àé where open ‚âÉ-Reasoning
soundness {M}{N}{œÅ}{NE-œÅ} (_‚Äî‚Üí‚ü®_‚ü©_ M {M = M‚Ä≤} M‚Äî‚ÜíM‚Ä≤ M‚Ä≤‚Äî‚Ü†N) =
    ‚ü¶ M ‚üß œÅ      ‚âÉ‚ü® ‚ü¶‚üß‚Äî‚Üí{œÅ = œÅ}{NE-œÅ} M‚Äî‚ÜíM‚Ä≤ ‚ü© 
    ‚ü¶ M‚Ä≤ ‚üß œÅ     ‚âÉ‚ü® soundness{œÅ = œÅ}{NE-œÅ} M‚Ä≤‚Äî‚Ü†N ‚ü© 
    ‚ü¶ N ‚üß œÅ      ‚àé where open ‚âÉ-Reasoning

