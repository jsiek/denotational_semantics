open import Data.Empty using (‚ä•-elim) renaming (‚ä• to False)
open import Data.List using (List ; _‚à∑_ ; []; _++_; length; replicate)
open import Data.List.Properties using (++-conicalÀ°)
open import Data.List.Membership.Propositional renaming (_‚àà_ to _‚ãµ_)
open import Data.List.Membership.Propositional.Properties
  using (‚àà-++‚Å∫À°; ‚àà-++‚Å∫ ≥)
open import Data.List.Relation.Unary.Any using (here; there) 
open import Data.Nat using (‚Ñï; zero; suc; _‚âü_; _<_; s‚â§s; _+_)
open import Data.Product using (_√ó_; Œ£; Œ£-syntax; proj‚ÇÅ; proj‚ÇÇ)
    renaming (_,_ to ‚ü®_,_‚ü©)
open import Data.Sum using (_‚äé_; inj‚ÇÅ; inj‚ÇÇ)
open import Data.Unit using (tt) renaming (‚ä§ to True)
open import Level renaming (zero to lzero; suc to lsuc; _‚äî_ to _l‚äî_)
open import Relation.Binary.PropositionalEquality
    using (_‚â°_; _‚â¢_; refl; sym; subst)
open import Relation.Nullary using (¬¨_; Dec; yes; no)

open import Primitives
open import ScopedTuple hiding (ùí´)
open import SetsAsPredicates
open import Syntax hiding (‚åà_‚åâ)
open import NewSigUtil
open import NewSyntaxUtil
open import NewDOpSig
open import Utilities using (extensionality)
open import NewDenotProperties

module NewSemantics (Op : Set) (sig : Op ‚Üí List Sig) where

open Syntax.OpSig Op sig
open import Fold2 Op sig



{- ================ Set-valued environments ================================ -}

Env : (A : Set) ‚Üí Set‚ÇÅ
Env A = Var ‚Üí ùí´ A

nonempty-env : ‚àÄ {A} ‚Üí Env A ‚Üí Set
nonempty-env œÅ = ‚àÄ x ‚Üí nonempty (œÅ x)

infix 5 _‚äÜ‚Çë_
_‚äÜ‚Çë_ : ‚àÄ {A} ‚Üí Env A ‚Üí Env A ‚Üí Set
œÅ‚ÇÅ ‚äÜ‚Çë œÅ‚ÇÇ = ‚àÄ x ‚Üí œÅ‚ÇÅ x ‚äÜ œÅ‚ÇÇ x

‚äÜ‚Çë-trans : ‚àÄ{A}{œÅ‚ÇÅ œÅ‚ÇÇ œÅ‚ÇÉ : Env A} ‚Üí œÅ‚ÇÅ ‚äÜ‚Çë œÅ‚ÇÇ ‚Üí œÅ‚ÇÇ ‚äÜ‚Çë œÅ‚ÇÉ ‚Üí œÅ‚ÇÅ ‚äÜ‚Çë œÅ‚ÇÉ
‚äÜ‚Çë-trans {œÅ‚ÇÅ}{œÅ‚ÇÇ}{œÅ‚ÇÉ} r12 r23 x = Œª d z ‚Üí r23 x d (r12 x d z)

extend-nonempty-env : ‚àÄ{A}{œÅ : Env A}{X}
   ‚Üí nonempty-env œÅ  ‚Üí  nonempty X  ‚Üí  nonempty-env (X ‚Ä¢ œÅ)
extend-nonempty-env {œÅ} {X} NE-œÅ NE-X zero = NE-X
extend-nonempty-env {œÅ} {X} NE-œÅ V‚â¢[] (suc x) = NE-œÅ x

env-ext : ‚àÄ{A}{œÅ œÅ‚Ä≤ : Env A}{X} ‚Üí œÅ ‚äÜ‚Çë œÅ‚Ä≤ ‚Üí (x : Var) ‚Üí (X ‚Ä¢ œÅ) x ‚äÜ (X ‚Ä¢ œÅ‚Ä≤) x
env-ext œÅ<œÅ‚Ä≤ zero d d‚àà = d‚àà
env-ext œÅ<œÅ‚Ä≤ (suc x) = œÅ<œÅ‚Ä≤ x

finiteNE : ‚àÄ {A} ‚Üí ùí´ A ‚Üí Set
finiteNE {A} S = Œ£[ V ‚àà List A ] S ‚âÉ (mem V) √ó V ‚â¢ []

{- environments whose codomain are finite nonempty sets -}
finiteNE-env : ‚àÄ {A} ‚Üí Env A ‚Üí Set
finiteNE-env {A} œÅ = ‚àÄ x ‚Üí finiteNE (œÅ x)

extend-finiteNE-env : ‚àÄ {A}{œÅ : Env A}{X}
  ‚Üí finiteNE-env œÅ ‚Üí finiteNE X ‚Üí finiteNE-env (X ‚Ä¢ œÅ)
extend-finiteNE-env fin-œÅ fin-X zero = fin-X
extend-finiteNE-env fin-œÅ fin-X (suc i) = fin-œÅ i

infix 6 _‚äî‚Çë_
_‚äî‚Çë_ : ‚àÄ {A} ‚Üí Env A ‚Üí Env A ‚Üí Env A
(œÅ‚ÇÅ ‚äî‚Çë œÅ‚ÇÇ) x v = œÅ‚ÇÅ x v ‚äé œÅ‚ÇÇ x v

join-finiteNE-env : ‚àÄ{A} {œÅ‚ÇÅ œÅ‚ÇÇ : Env A} ‚Üí finiteNE-env œÅ‚ÇÅ  ‚Üí  finiteNE-env œÅ‚ÇÇ
   ‚Üí finiteNE-env (œÅ‚ÇÅ ‚äî‚Çë œÅ‚ÇÇ)
join-finiteNE-env {A}{œÅ‚ÇÅ}{œÅ‚ÇÇ} f1 f2 x
    with f1 x
... | ‚ü® E1 , ‚ü® œÅ‚ÇÅ=E1 , NE-E1 ‚ü© ‚ü©
    with f2 x
... | ‚ü® E2 , ‚ü® œÅ‚ÇÇ=E2 , NE-E2 ‚ü© ‚ü© =
    ‚ü® (E1 ++ E2) , ‚ü® ‚ü® G , (H {E1} Œª d z ‚Üí z) ‚ü© ,
      (Œª E12=[] ‚Üí NE-E1 (++-conicalÀ° E1 E2 E12=[])) ‚ü© ‚ü©
    where
    G : (v : A ) ‚Üí œÅ‚ÇÅ x v ‚äé œÅ‚ÇÇ x v ‚Üí mem (E1 ++ E2) v
    G v (inj‚ÇÅ œÅ1x) = ‚àà-++‚Å∫À° ((proj‚ÇÅ œÅ‚ÇÅ=E1) v œÅ1x)
    G v (inj‚ÇÇ œÅ2x) = ‚àà-++‚Å∫ ≥ E1 ((proj‚ÇÅ œÅ‚ÇÇ=E2) v œÅ2x)

    H : ‚àÄ{E} ‚Üí mem E ‚äÜ mem E1 ‚Üí mem (E ++ E2) ‚äÜ (Œª v ‚Üí œÅ‚ÇÅ x v ‚äé œÅ‚ÇÇ x v)
    H {[]} E<E1 v v‚ààE++E2 = inj‚ÇÇ ((proj‚ÇÇ œÅ‚ÇÇ=E2) v v‚ààE++E2)
    H {x ‚à∑ E} E<E1 .x (here refl) = inj‚ÇÅ ((proj‚ÇÇ œÅ‚ÇÅ=E1) x (E<E1 x (here refl)))
    H {x ‚à∑ E} E<E1 v (there v‚ààE++E2) =
       H (Œª v z ‚Üí E<E1 v (there z)) v v‚ààE++E2

join-lub : ‚àÄ{A}{œÅ œÅ‚ÇÅ œÅ‚ÇÇ : Env A} ‚Üí œÅ‚ÇÅ ‚äÜ‚Çë œÅ ‚Üí œÅ‚ÇÇ ‚äÜ‚Çë œÅ ‚Üí œÅ‚ÇÅ ‚äî‚Çë œÅ‚ÇÇ ‚äÜ‚Çë œÅ
join-lub {œÅ} {œÅ‚ÇÅ} {œÅ‚ÇÇ} œÅ‚ÇÅ‚äÜœÅ œÅ‚ÇÇ‚äÜœÅ x v (inj‚ÇÅ v‚ààœÅ‚ÇÅx) = œÅ‚ÇÅ‚äÜœÅ x v v‚ààœÅ‚ÇÅx
join-lub {œÅ} {œÅ‚ÇÅ} {œÅ‚ÇÇ} œÅ‚ÇÅ‚äÜœÅ œÅ‚ÇÇ‚äÜœÅ x v (inj‚ÇÇ v‚ààœÅ‚ÇÇx) = œÅ‚ÇÇ‚äÜœÅ x v v‚ààœÅ‚ÇÇx

join-‚äÜ-left : ‚àÄ{A}{œÅ‚ÇÅ œÅ‚ÇÇ : Env A} ‚Üí œÅ‚ÇÅ ‚äÜ‚Çë œÅ‚ÇÅ ‚äî‚Çë œÅ‚ÇÇ
join-‚äÜ-left {œÅ‚ÇÅ}{œÅ‚ÇÇ} = Œª x d z ‚Üí inj‚ÇÅ z

join-‚äÜ-right : ‚àÄ{A}{œÅ‚ÇÅ œÅ‚ÇÇ : Env A} ‚Üí œÅ‚ÇÇ ‚äÜ‚Çë œÅ‚ÇÅ ‚äî‚Çë œÅ‚ÇÇ
join-‚äÜ-right {œÅ‚ÇÅ}{œÅ‚ÇÇ} = Œª x d z ‚Üí inj‚ÇÇ z

monotone-env : ‚àÄ {A} ‚Üí (Env A ‚Üí ùí´ A) ‚Üí Set‚ÇÅ
monotone-env D = ‚àÄ {œÅ œÅ‚Ä≤} ‚Üí (‚àÄ x ‚Üí œÅ x ‚äÜ œÅ‚Ä≤ x)  ‚Üí  D œÅ ‚äÜ D œÅ‚Ä≤


{- creates an environment that maps each variable x to
   a singleton set of some element in œÅ x.  -}
initial-finiteNE-env : ‚àÄ {A} (œÅ : Env A) ‚Üí (NE-œÅ : nonempty-env œÅ) ‚Üí Env A
initial-finiteNE-env œÅ NE-œÅ x
    with NE-œÅ x
... | ‚ü® v , v‚ààœÅx ‚ü© = ‚åà v ‚åâ

initial-fin : ‚àÄ {A} (œÅ : Env A) ‚Üí (NE-œÅ : nonempty-env œÅ)
   ‚Üí finiteNE-env (initial-finiteNE-env œÅ NE-œÅ)
initial-fin œÅ NE-œÅ x
    with NE-œÅ x
... | ‚ü® v , v‚ààœÅx ‚ü© =
      ‚ü® v ‚à∑ [] ,
      ‚ü® ‚ü® (Œª {w refl ‚Üí (here refl)}) , (Œª {w (here refl) ‚Üí refl}) ‚ü© , (Œª ()) ‚ü© ‚ü©

initial-fin-‚äÜ : ‚àÄ {A} (œÅ : Env A) ‚Üí (NE-œÅ : nonempty-env œÅ)
  ‚Üí initial-finiteNE-env œÅ NE-œÅ ‚äÜ‚Çë œÅ
initial-fin-‚äÜ œÅ NE-œÅ x v v‚ààinitial
    with NE-œÅ x
... | ‚ü® w , w‚ààœÅx ‚ü© rewrite v‚ààinitial = w‚ààœÅx

{- single-env maps x to D and any other variable y to something in œÅ y. -}
single-env : ‚àÄ {A} Var ‚Üí ùí´ A ‚Üí (œÅ : Env A) ‚Üí (NE-œÅ : nonempty-env œÅ) ‚Üí Env A
single-env x D œÅ NE-œÅ y
    with x ‚âü y
... | yes refl = D
... | no neq
    with NE-œÅ y
... | ‚ü® v , v‚ààœÅy ‚ü© = ‚åà v ‚åâ    

single-fin : ‚àÄ{A}{v}{x}{œÅ : Env A}{NE-œÅ} ‚Üí finiteNE-env (single-env x ‚åà v ‚åâ œÅ NE-œÅ)
single-fin {A}{v}{x}{œÅ}{NE-œÅ} y
    with x ‚âü y
... | yes refl =
    ‚ü® v ‚à∑ [] ,
    ‚ü® ‚ü® (Œª{v‚ÇÅ refl ‚Üí (here refl)}) , (Œª{v‚ÇÅ (here refl) ‚Üí refl}) ‚ü© , (Œª ()) ‚ü© ‚ü©
... | no neq
    with NE-œÅ y
... | ‚ü® w , w‚ààœÅy ‚ü© =
    ‚ü® w ‚à∑ [] ,
    ‚ü® ‚ü® (Œª{v‚ÇÅ refl ‚Üí here refl}) , (Œª{v‚ÇÅ (here refl) ‚Üí refl}) ‚ü© , (Œª ()) ‚ü© ‚ü©

single-‚äÜ : ‚àÄ{A}{œÅ x v}{NE-œÅ : nonempty-env {A} œÅ}
  ‚Üí  v ‚àà œÅ x  ‚Üí  single-env x ‚åà v ‚åâ œÅ NE-œÅ ‚äÜ‚Çë œÅ
single-‚äÜ {A}{œÅ}{x}{v}{NE-œÅ} v‚ààœÅx y w sing 
    with x ‚âü y
... | yes refl rewrite sing = v‚ààœÅx
... | no neq
    with NE-œÅ y
... | ‚ü® u , u‚ààœÅy ‚ü© rewrite sing = u‚ààœÅy

v‚ààsingle[xv]x : ‚àÄ{A}{v}{x}{œÅ : Env A}{NE-œÅ} ‚Üí v ‚àà single-env x ‚åà v ‚åâ œÅ NE-œÅ x
v‚ààsingle[xv]x {A}{v}{x}
    with x ‚âü x
... | yes refl = refl
... | no neq = ‚ä•-elim (neq refl)


{- =================== Monotonic Semantics ================================= -}

record Semantics {A : Set} : Set‚ÇÅ where
  field 
    error : A 
    interp-op : DOpSig (ùí´ A) sig

  init : ùí´ A
  init = ‚åà error ‚åâ

  ‚ü¶_‚üß : ABT ‚Üí Env A ‚Üí ùí´ A
  ‚ü¶ M ‚üß œÅ = fold interp-op init œÅ M

  ‚ü¶_‚üß‚Çê : ‚àÄ{b} ‚Üí Arg b ‚Üí Env A ‚Üí Result (ùí´ A) b
  ‚ü¶ arg ‚üß‚Çê œÅ = fold-arg interp-op init œÅ arg

  ‚ü¶_‚üß‚Çä : ‚àÄ{bs} ‚Üí Args bs ‚Üí Env A ‚Üí Tuple bs (Result (ùí´ A))
  ‚ü¶ args ‚üß‚Çä œÅ = fold-args interp-op init œÅ args

  field 
    mono-op : ùïÜ-monotone sig interp-op

open Semantics {{...}}

{- =================== Consistent Semantics =============================== -}

record ConsistentSemantics {A : Set} : Set‚ÇÅ where
  field 
    {{Sem}} : Semantics {A}
    consistency : A ‚Üí A ‚Üí Set
    consistent-op : ùïÜ-consistent consistency sig (Semantics.interp-op Sem)

open ConsistentSemantics {{...}}

{- =================== Continuous Semantics ====================== -}

continuous-‚àà : ‚àÄ {A} ‚Üí (Env A ‚Üí ùí´ A) ‚Üí Env A ‚Üí A ‚Üí Set‚ÇÅ
continuous-‚àà {A} D œÅ v = v ‚àà D œÅ
   ‚Üí Œ£[ œÅ‚Ä≤ ‚àà Env A ] finiteNE-env œÅ‚Ä≤ √ó œÅ‚Ä≤ ‚äÜ‚Çë œÅ  √ó v ‚àà D œÅ‚Ä≤

continuous-env : ‚àÄ {A} ‚Üí (Env A ‚Üí ùí´ A) ‚Üí Env A ‚Üí Set‚ÇÅ
continuous-env {A} D œÅ = ‚àÄ v ‚Üí v ‚àà D œÅ
                     ‚Üí Œ£[ œÅ‚Ä≤ ‚àà Env A ] finiteNE-env œÅ‚Ä≤ √ó œÅ‚Ä≤ ‚äÜ‚Çë œÅ  √ó v ‚àà D œÅ‚Ä≤

tracebound-result : ‚àÄ {A : Set} b (F : Env A ‚Üí Result (ùí´ A) b) (œÅ : Env A) (œÅ‚àÅ : Env A) ‚Üí Set‚ÇÅ
tracebound-result {A} ‚ñ† F œÅ œÅ‚àÅ = continuous-env F œÅ
tracebound-result {A} (ŒΩ b) F œÅ œÅ‚àÅ = ‚àÄ V ‚Üí V ‚â¢ [] ‚Üí tracebound-result b (Œª œÅ' ‚Üí F œÅ' (mem V)) ((mem V) ‚Ä¢ œÅ) œÅ‚àÅ
tracebound-result {A} (‚àÅ b) F œÅ œÅ‚àÅ = tracebound-result b F œÅ‚àÅ œÅ‚àÅ

all-results-tracebound : ‚àÄ {A} b F œÅ (œÅ‚àÅ : Env A) ‚Üí finiteNE-env œÅ ‚Üí finiteNE-env œÅ‚àÅ ‚Üí tracebound-result b F œÅ œÅ‚àÅ
all-results-tracebound ‚ñ† F œÅ œÅ‚àÅ fin-œÅ fin-œÅ‚àÅ d d‚àà = ‚ü® œÅ , ‚ü® fin-œÅ , ‚ü® (Œª i d d‚ààœÅi ‚Üí d‚ààœÅi) , d‚àà ‚ü© ‚ü© ‚ü©
all-results-tracebound (ŒΩ b) F œÅ œÅ‚àÅ fin-œÅ fin-œÅ‚àÅ V Vne = 
  all-results-tracebound b (Œª œÅ ‚Üí F œÅ (mem V)) (mem V ‚Ä¢ œÅ) œÅ‚àÅ 
                         (extend-finiteNE-env fin-œÅ ‚ü® V , ‚ü® ‚âÉ-refl , Vne ‚ü© ‚ü©) fin-œÅ‚àÅ
all-results-tracebound (‚àÅ b) F œÅ œÅ‚àÅ fin-œÅ fin-œÅ‚àÅ = all-results-tracebound b F œÅ‚àÅ œÅ‚àÅ fin-œÅ‚àÅ fin-œÅ‚àÅ




continuous-‚àà‚áí‚äÜ : ‚àÄ {A} E (œÅ : Env A) (NE-œÅ : nonempty-env œÅ)
   ‚Üí monotone-env E
   ‚Üí ‚àÄ V ‚Üí mem V ‚äÜ E œÅ
   ‚Üí (‚àÄ v ‚Üí v ‚àà mem V ‚Üí continuous-‚àà E œÅ v)
   ‚Üí Œ£[ œÅ‚Ä≤ ‚àà Env A ] finiteNE-env œÅ‚Ä≤ √ó œÅ‚Ä≤ ‚äÜ‚Çë œÅ  √ó mem V ‚äÜ E œÅ‚Ä≤
continuous-‚àà‚áí‚äÜ E œÅ NE-œÅ mE [] V‚äÜE ‚àÄv‚ààV‚áícont =
   ‚ü® initial-finiteNE-env œÅ NE-œÅ , ‚ü® initial-fin œÅ NE-œÅ ,
   ‚ü® initial-fin-‚äÜ œÅ NE-œÅ , (Œª d ()) ‚ü© ‚ü© ‚ü©
continuous-‚àà‚áí‚äÜ {A} E œÅ NE-œÅ mE (v ‚à∑ V) v‚à∑V‚äÜEœÅ v‚ààV‚áícont
    with continuous-‚àà‚áí‚äÜ E œÅ NE-œÅ mE V (Œª d z ‚Üí v‚à∑V‚äÜEœÅ d (there z))
                (Œª w w‚ààV w‚ààMœÅ ‚Üí v‚ààV‚áícont w (there w‚ààV) w‚ààMœÅ)
... | ‚ü® œÅ‚ÇÅ , ‚ü® fœÅ‚ÇÅ , ‚ü® œÅ‚ÇÅ‚äÜœÅ , V‚äÜEœÅ‚ÇÅ ‚ü© ‚ü© ‚ü©
    with v‚ààV‚áícont v (here refl) (v‚à∑V‚äÜEœÅ v (here refl))
... | ‚ü® œÅ‚ÇÇ , ‚ü® fœÅ‚ÇÇ , ‚ü® œÅ‚ÇÇ‚äÜœÅ , v‚ààEœÅ‚ÇÇ ‚ü© ‚ü© ‚ü© =    
    ‚ü® œÅ‚ÇÉ , ‚ü® (join-finiteNE-env fœÅ‚ÇÅ fœÅ‚ÇÇ) , ‚ü® (join-lub œÅ‚ÇÅ‚äÜœÅ œÅ‚ÇÇ‚äÜœÅ) ,
    G ‚ü© ‚ü© ‚ü©
    where
    œÅ‚ÇÉ = œÅ‚ÇÅ ‚äî‚Çë œÅ‚ÇÇ
    G : (d : A) ‚Üí mem (v ‚à∑ V) d ‚Üí d ‚àà E œÅ‚ÇÉ
    G d (here refl) = mE {œÅ‚ÇÇ}{œÅ‚ÇÉ} join-‚äÜ-right v v‚ààEœÅ‚ÇÇ
    G d (there m) = mE {œÅ‚ÇÅ}{œÅ‚ÇÉ} join-‚äÜ-left d (V‚äÜEœÅ‚ÇÅ d m)






{- here I'm hoping that all semantics are continuous...
   or at least that the type signature for continuous-op can be much simplified.

all-args : (‚àÄ b ‚Üí Arg b ‚Üí Set‚ÇÅ) ‚Üí ‚àÄ bs ‚Üí Args bs ‚Üí Set‚ÇÅ
all-args P [] args = Lift (lsuc lzero) True
all-args P (b ‚à∑ bs) (cons arg args) = P b arg √ó all-args P bs args

Cont-Env-Arg : ‚àÄ {{_ : Semantics {A}}} (œÅ : Env A) (NE-œÅ : nonempty-env œÅ)
    ‚Üí ‚àÄ b ‚Üí (arg : Arg b) ‚Üí Set‚ÇÅ
  Cont-Env-Arg œÅ NE-œÅ ‚ñ† (ast M) = continuous-env ‚ü¶ M ‚üß œÅ
  Cont-Env-Arg œÅ NE-œÅ (ŒΩ b) (bind arg) =
    ‚àÄ V ‚Üí (ne : V ‚â¢ [])
    ‚Üí Cont-Env-Arg (mem V ‚Ä¢ œÅ)
          (extend-nonempty-env NE-œÅ (E‚â¢[]‚áínonempty-mem ne)) b arg
  Cont-Env-Arg œÅ NE-œÅ (‚àÅ b) (clear arg) =
      Cont-Env-Arg (Œª x ‚Üí init) (Œª i ‚Üí ‚ü® error , refl ‚ü©) b arg

record ContinuousSemantics {A : Set} : Set‚ÇÅ where
  field 
    {{Sem}} : Semantics {A}

    {- continuous-op : ‚àÄ{op}{œÅ : Env A}{NE-œÅ}{v}{args} ‚Üí v ‚àà ‚ü¶ op ‚¶Ö args ‚¶Ü ‚üß œÅ ‚Üí all-args (Cont-Env-Arg œÅ NE-œÅ) (sig op) args ‚Üí Œ£[ œÅ‚Ä≤ ‚àà Env A ] finite-env œÅ‚Ä≤ √ó œÅ‚Ä≤ ‚äÜ‚Çë œÅ √ó v ‚àà (‚ü¶ op ‚¶Ö args ‚¶Ü ‚üß œÅ‚Ä≤)
    -}

open ContinuousSemantics {{...}}
-}










{-
record ContinuousSemantics : Set‚ÇÅ where
  field {{Sem}} : Semantics
  field continuous-op : ‚àÄ{op}{œÅ}{NE-œÅ}{v}{args} ‚Üí v ‚àà ‚ü¶ op ‚¶Ö args ‚¶Ü ‚üß œÅ ‚Üí all-args (Cont-Env-Arg œÅ NE-œÅ) (sig op) args  ‚Üí   Œ£[ œÅ‚Ä≤ ‚àà Env ] finite-env œÅ‚Ä≤ √ó œÅ‚Ä≤ ‚äÜ‚Çë œÅ √ó v ‚àà (‚ü¶ op ‚¶Ö args ‚¶Ü ‚üß œÅ‚Ä≤)

open ContinuousSemantics {{...}}


{- Monotone -------------------------------------------------------------------}

‚ü¶‚üß-monotone : ‚àÄ{{_ : Semantics}} {œÅ œÅ‚Ä≤} (M : ABT)
  ‚Üí  œÅ ‚äÜ‚Çë œÅ‚Ä≤ ‚Üí  ‚ü¶ M ‚üß œÅ ‚äÜ ‚ü¶ M ‚üß œÅ‚Ä≤
‚ü¶‚üß-monotone-arg : ‚àÄ{{_ : Semantics}} {b}{œÅ œÅ‚Ä≤} (arg : Arg b)
  ‚Üí  œÅ ‚äÜ‚Çë œÅ‚Ä≤ ‚Üí  ‚äÜ-result b (‚ü¶ arg ‚üß‚Çê œÅ) (‚ü¶ arg ‚üß‚Çê œÅ‚Ä≤)
‚ü¶‚üß-monotone-args : ‚àÄ{{_ : Semantics}} {bs}{œÅ œÅ‚Ä≤} (args : Args bs)
  ‚Üí  œÅ ‚äÜ‚Çë œÅ‚Ä≤  ‚Üí  ‚äÜ-results bs (‚ü¶ args ‚üß‚Çä œÅ) (‚ü¶ args ‚üß‚Çä œÅ‚Ä≤)
  
‚ü¶‚üß-monotone {œÅ}{œÅ‚Ä≤} (` x) œÅ<œÅ‚Ä≤ = œÅ<œÅ‚Ä≤ x
‚ü¶‚üß-monotone {œÅ}{œÅ‚Ä≤} (op ‚¶Ö args ‚¶Ü) œÅ<œÅ‚Ä≤ = mono-op (‚ü¶‚üß-monotone-args  args œÅ<œÅ‚Ä≤)

‚ü¶‚üß-monotone-arg {‚ñ†} (ast M) œÅ<œÅ‚Ä≤ = lift (‚ü¶‚üß-monotone M œÅ<œÅ‚Ä≤)
‚ü¶‚üß-monotone-arg {ŒΩ b}{œÅ}{œÅ‚Ä≤} (bind arg) œÅ<œÅ‚Ä≤ X =
    ‚ü¶‚üß-monotone-arg {b}{X ‚Ä¢ œÅ}{X ‚Ä¢ œÅ‚Ä≤} arg (env-ext œÅ<œÅ‚Ä≤)
‚ü¶‚üß-monotone-arg {‚àÅ b} (clear arg) œÅ<œÅ‚Ä≤ =
    ‚ü¶‚üß-monotone-arg {b}{Œª x ‚Üí init}{Œª x ‚Üí init} arg Œª x d z ‚Üí z

‚ü¶‚üß-monotone-args {bs = []} nil œÅ<œÅ‚Ä≤ = lift tt
‚ü¶‚üß-monotone-args {bs = b ‚à∑ bs} (cons arg args) œÅ<œÅ‚Ä≤ =
  ‚ü® ‚ü¶‚üß-monotone-arg arg œÅ<œÅ‚Ä≤ , ‚ü¶‚üß-monotone-args args œÅ<œÅ‚Ä≤ ‚ü©

‚ü¶‚üß-monotone-one : ‚àÄ{{_ : Semantics}}{N : ABT}{œÅ}
   ‚Üí monotone (Œª D ‚Üí ‚ü¶ N ‚üß (D ‚Ä¢ œÅ))
‚ü¶‚üß-monotone-one {N}{œÅ} D‚ÇÅ D‚ÇÇ D12 = ‚ü¶‚üß-monotone N G
  where G : (x : Var) ‚Üí (D‚ÇÅ ‚Ä¢ œÅ) x ‚äÜ (D‚ÇÇ ‚Ä¢ œÅ) x
        G zero = D12
        G (suc x) = Œª v z ‚Üí z



{- Continuous -----------------------------------------------------------------}

‚ü¶‚üß-continuous : ‚àÄ{{_ : ContinuousSemantics}}{œÅ}{NE-œÅ : nonempty-env œÅ}
    (M : ABT)
  ‚Üí continuous-env ‚ü¶ M ‚üß œÅ 
‚ü¶‚üß-cont-env-arg : ‚àÄ{{_ : ContinuousSemantics}}
    {œÅ}{NE-œÅ : nonempty-env œÅ} {b}(arg : Arg b)
  ‚Üí Cont-Env-Arg œÅ NE-œÅ b arg 
‚ü¶‚üß-cont-env-args : ‚àÄ{{_ : ContinuousSemantics}}
    {œÅ}{NE-œÅ : nonempty-env œÅ}{bs} (args : Args bs)
  ‚Üí all-args (Cont-Env-Arg œÅ NE-œÅ) bs args

‚ü¶‚üß-continuous {œÅ}{NE-œÅ} (` x) v v‚àà‚ü¶M‚üßœÅ =
   ‚ü® (single-env x ‚åà v ‚åâ œÅ NE-œÅ) , ‚ü® (single-fin {v}{x}) , ‚ü® (single-‚äÜ v‚àà‚ü¶M‚üßœÅ) ,
     (v‚ààsingle[xv]x {v}{x}) ‚ü© ‚ü© ‚ü©

‚ü¶‚üß-continuous {œÅ}{NE-œÅ} (op ‚¶Ö args ‚¶Ü) v v‚àà‚ü¶M‚üßœÅ =
    continuous-op{NE-œÅ = NE-œÅ} v‚àà‚ü¶M‚üßœÅ (‚ü¶‚üß-cont-env-args {œÅ}{NE-œÅ} args)
‚ü¶‚üß-cont-env-arg {œÅ} {NE-œÅ} {‚ñ†} (ast M) v v‚àà‚ü¶M‚üßœÅ =
    ‚ü¶‚üß-continuous {œÅ}{NE-œÅ = NE-œÅ} M v v‚àà‚ü¶M‚üßœÅ
‚ü¶‚üß-cont-env-arg {œÅ} {NE-œÅ} {ŒΩ b} (bind arg) V V‚â¢[] =
    let NE-V‚Ä¢œÅ = (extend-nonempty-env NE-œÅ (E‚â¢[]‚áínonempty-mem V‚â¢[])) in
    ‚ü¶‚üß-cont-env-arg {mem V ‚Ä¢ œÅ}{NE-V‚Ä¢œÅ} {b} arg
‚ü¶‚üß-cont-env-arg {œÅ} {NE-œÅ} {‚àÅ b} (clear arg) =
    ‚ü¶‚üß-cont-env-arg {Œª x ‚Üí init} {Œª x ‚Üí ‚ü® ŒΩ , refl ‚ü©}{b} arg

‚ü¶‚üß-cont-env-args {œÅ} {NE-œÅ} {[]} nil = lift tt
‚ü¶‚üß-cont-env-args {œÅ} {NE-œÅ} {b ‚à∑ bs} (cons arg args) =
    ‚ü® ‚ü¶‚üß-cont-env-arg {œÅ}{NE-œÅ}{b} arg ,
      ‚ü¶‚üß-cont-env-args {œÅ} {NE-œÅ} {bs} args ‚ü©

‚ü¶‚üß-continuous-‚äÜ  : ‚àÄ{{_ : ContinuousSemantics}}{œÅ}{NE-œÅ : nonempty-env œÅ}
    (M : ABT)
  ‚Üí ‚àÄ V ‚Üí mem V ‚äÜ ‚ü¶ M ‚üß œÅ
  ‚Üí Œ£[ œÅ‚Ä≤ ‚àà Env ] finite-env œÅ‚Ä≤ √ó œÅ‚Ä≤ ‚äÜ‚Çë œÅ  √ó mem V ‚äÜ ‚ü¶ M ‚üß œÅ‚Ä≤
‚ü¶‚üß-continuous-‚äÜ {œÅ}{NE-œÅ} M V V‚äÜEœÅ =
    continuous-‚àà‚áí‚äÜ ‚ü¶ M ‚üß œÅ NE-œÅ (‚ü¶‚üß-monotone M) V V‚äÜEœÅ
        (Œª v v‚ààV ‚Üí ‚ü¶‚üß-continuous {NE-œÅ = NE-œÅ} M v)

‚ü¶‚üß-continuous-one : ‚àÄ{{_ : ContinuousSemantics}}{N : ABT}
    {œÅ}{NE-œÅ : nonempty-env œÅ}
  ‚Üí continuous (Œª D ‚Üí ‚ü¶ N ‚üß (D ‚Ä¢ œÅ))
‚ü¶‚üß-continuous-one {N}{œÅ}{NE-œÅ} X E E‚äÜ‚ü¶N‚üßX‚Ä¢œÅ NE-X
    with ‚ü¶‚üß-continuous-‚äÜ {X ‚Ä¢ œÅ}{extend-nonempty-env NE-œÅ NE-X} N E E‚äÜ‚ü¶N‚üßX‚Ä¢œÅ
... | ‚ü® œÅ‚Ä≤ , ‚ü® fœÅ‚Ä≤ , ‚ü® œÅ‚Ä≤‚äÜX‚Ä¢œÅ , E‚äÜ‚ü¶N‚üßœÅ‚Ä≤ ‚ü© ‚ü© ‚ü©
    with fœÅ‚Ä≤ 0
... | ‚ü® D , ‚ü® œÅ‚Ä≤x=D , NE-D ‚ü© ‚ü© =
    ‚ü® D , ‚ü® (Œª v v‚ààD ‚Üí œÅ‚Ä≤‚äÜX‚Ä¢œÅ 0 v ((proj‚ÇÇ œÅ‚Ä≤x=D) v v‚ààD)) ,
    ‚ü® (Œª d d‚ààE ‚Üí ‚ü¶‚üß-monotone {œÅ‚Ä≤}{mem D ‚Ä¢ œÅ} N G d (E‚äÜ‚ü¶N‚üßœÅ‚Ä≤ d d‚ààE)) , NE-D ‚ü© ‚ü© ‚ü©
    where
    G : (x : Var) ‚Üí œÅ‚Ä≤ x ‚äÜ (mem D ‚Ä¢ œÅ) x
    G zero d d‚ààœÅ0 = (proj‚ÇÅ œÅ‚Ä≤x=D) d d‚ààœÅ0 
    G (suc x) d m = œÅ‚Ä≤‚äÜX‚Ä¢œÅ (suc x) d m

Œõ‚ü¶‚üß-‚ñ™-id : ‚àÄ {{_ : ContinuousSemantics}}{N : ABT}{œÅ}{NE-œÅ : nonempty-env œÅ}
    {X : ùí´ Value}
  ‚Üí nonempty X
  ‚Üí (Œõ Œª X ‚Üí ‚ü¶ N ‚üß (X ‚Ä¢ œÅ)) ‚ñ™ X ‚âÉ ‚ü¶ N ‚üß (X ‚Ä¢ œÅ)
Œõ‚ü¶‚üß-‚ñ™-id {N}{œÅ}{NE-œÅ}{X} NE-X =
    Œõ-‚ñ™-id {Œª D ‚Üí ‚ü¶ N ‚üß (D ‚Ä¢ œÅ)} (‚ü¶‚üß-continuous-one{N}{œÅ}{NE-œÅ})
        (‚ü¶‚üß-monotone-one{N}) NE-X

{- The following is annoying. Can it be simplified? -}
all-Cont-Env-Arg‚áícont-envs : ‚àÄ{{_ : Semantics}}
    {n}{args : Args (replicate n ‚ñ†)}{œÅ}{NE-œÅ}
    ‚Üí all-args (Cont-Env-Arg œÅ NE-œÅ) (replicate n ‚ñ†) args
    ‚Üí continuous-envs (‚ü¶ args ‚üß‚Çä) œÅ
all-Cont-Env-Arg‚áícont-envs {zero} {nil}{œÅ}{NE-œÅ} (lift tt) v v‚ààùíØnil =
    ‚ü® initial-finite-env œÅ NE-œÅ , ‚ü® initial-fin œÅ NE-œÅ ,
    ‚ü® initial-fin-‚äÜ œÅ NE-œÅ , v‚ààùíØnil ‚ü© ‚ü© ‚ü©
all-Cont-Env-Arg‚áícont-envs {suc n} {cons (ast M) args}{œÅ}{NE-œÅ}
    ‚ü® cM , cont-args ‚ü© ‚ü¨ v ‚à∑ vs ‚ü≠ ‚ü® v‚àà , vs‚àà ‚ü©
    with all-Cont-Env-Arg‚áícont-envs {n} {args}{œÅ}{NE-œÅ} cont-args ‚ü¨ vs ‚ü≠ vs‚àà
... | ‚ü® œÅ‚ÇÅ , ‚ü® fœÅ‚ÇÅ , ‚ü® œÅ‚ÇÅ‚äÜœÅ , vs‚ààùíØargsœÅ‚ÇÅ ‚ü© ‚ü© ‚ü©
    with cM v v‚àà
... | ‚ü® œÅ‚ÇÇ , ‚ü® fœÅ‚ÇÇ , ‚ü® œÅ‚ÇÇ‚äÜœÅ , v‚ààùíØMœÅ‚ÇÇ ‚ü© ‚ü© ‚ü© =
    ‚ü® œÅ‚ÇÅ ‚äî‚Çë œÅ‚ÇÇ , ‚ü® join-finite-env fœÅ‚ÇÅ fœÅ‚ÇÇ , ‚ü® join-lub œÅ‚ÇÅ‚äÜœÅ œÅ‚ÇÇ‚äÜœÅ ,
    ‚ü® ‚ü¶‚üß-monotone M (Œª x d z ‚Üí inj‚ÇÇ z) v v‚ààùíØMœÅ‚ÇÇ ,
      ùíØ-mono-‚äÜ (rel-results‚áírel-‚àè ‚äÜ-result‚áí‚äÜ
       (‚ü¶‚üß-monotone-args args (Œª x d z ‚Üí inj‚ÇÅ z))) ‚ü¨ vs ‚ü≠ vs‚ààùíØargsœÅ‚ÇÅ ‚ü© ‚ü© ‚ü© ‚ü©


-}